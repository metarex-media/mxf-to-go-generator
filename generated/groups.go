// Copyright Â©2019-2024  Mr MXF   info@mrmxf.com
// BSD-3-Clause License  https://opensource.org/license/bsd-3-clause/
package mxf2go

import (
	"encoding/binary"
)

// Group contains the register properties of a group,
// as well as the function to decode the bytes into a go value.
type Group struct {
	UL     string
	IsOpt  bool
	Length int
	Decode func([]byte) (any, error)
}

// GroupID contains the name of a group and
// all the possible fields it contains, which can be found with their
// UL in the format
// "urn:smpte:ul:00000000.00000000.00000000.00000000"
type GroupID struct {
	Name  string
	Group map[string]Group
}

func BEREncode(number int) []byte {

	switch {
	case number < 127:
		return []byte{byte(number)}
	case number < 0xff:
		return []byte{0x81, byte(number)}
	case number < 0xffff:
		full := make([]byte, 2)
		binary.BigEndian.PutUint16(full, uint16(number))
		return append([]byte{0x82}, full...)
	case number < 0xffffffff:
		full := make([]byte, 4)
		binary.BigEndian.PutUint32(full, uint32(number))
		return append([]byte{0x84}, full...)
	default:
		full := make([]byte, 8)
		binary.BigEndian.PutUint64(full, uint64(number))
		return append([]byte{0x88}, full...)
	}

}

var GBadRequestResponse = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.02070300.00000000": {UL: "ASMBadRequestCopy", Length: 0, Decode: DecodeTDataValue},
	"urn:smpte:ul:060e2b34.0101010d.02070400.00000000": {UL: "ASMResponse", Length: 1, Decode: DecodeTUInt8},
}

type GBadRequestResponseStruct struct {
	ASMBadRequestCopy TDataValue // IsOptional:false
	ASMResponse       uint8      // IsOptional:false

}

func (g *GBadRequestResponseStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTDataValue(g.ASMBadRequestCopy)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 2, 7, 3, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ASMResponse)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 2, 7, 4, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 1, 1, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTimeRequest = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
}

type GTimeRequestStruct struct {
	ASMRequestID uint32 // IsOptional:false

}

func (g *GTimeRequestStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 2, 16, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTimeResponse = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.07020101.01080000": {UL: "ASMCurrentTime", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.0101010d.02070400.00000000": {UL: "ASMResponse", Length: 1, Decode: DecodeTUInt8},
}

type GTimeResponseStruct struct {
	ASMRequestID   uint32 // IsOptional:false
	ASMCurrentTime uint64 // IsOptional:false
	ASMResponse    uint8  // IsOptional:false

}

func (g *GTimeResponseStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.ASMCurrentTime)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 7, 2, 1, 1, 1, 8, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ASMResponse)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 2, 7, 4, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 2, 17, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GEventListRequest = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.07020102.07030000": {UL: "ASMEventListStartTime", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.07020102.0a020000": {UL: "ASMEventListStopTime", Length: 4, Decode: DecodeTUInt32},
}

type GEventListRequestStruct struct {
	ASMRequestID          uint32 // IsOptional:false
	ASMEventListStartTime uint32 // IsOptional:false
	ASMEventListStopTime  uint32 // IsOptional:false

}

func (g *GEventListRequestStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.ASMEventListStartTime)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 7, 2, 1, 2, 7, 3, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.ASMEventListStopTime)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 7, 2, 1, 2, 10, 2, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 2, 18, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GEventListResponse = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.06010103.0f000000": {UL: "ASMEventIDBatch", Length: 0, Decode: DecodeTUInt32Set},
	"urn:smpte:ul:060e2b34.0101010d.02070400.00000000": {UL: "ASMResponse", Length: 1, Decode: DecodeTUInt8},
}

type GEventListResponseStruct struct {
	ASMRequestID    uint32     // IsOptional:false
	ASMEventIDBatch TUInt32Set // IsOptional:false
	ASMResponse     uint8      // IsOptional:false

}

func (g *GEventListResponseStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32Set(g.ASMEventIDBatch)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 6, 1, 1, 3, 15, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ASMResponse)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 2, 7, 4, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 2, 19, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GEventIDRequest = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.01030801.02000000": {UL: "ASMEventID", Length: 4, Decode: DecodeTUInt32},
}

type GEventIDRequestStruct struct {
	ASMRequestID uint32 // IsOptional:false
	ASMEventID   uint32 // IsOptional:false

}

func (g *GEventIDRequestStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.ASMEventID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 2, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 2, 20, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GEventIDResponse = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.02070500.00000000": {UL: "ASMLogRecord", Length: 0, Decode: DecodeTDataValue},
	"urn:smpte:ul:060e2b34.0101010d.02070400.00000000": {UL: "ASMResponse", Length: 1, Decode: DecodeTUInt8},
}

type GEventIDResponseStruct struct {
	ASMRequestID uint32     // IsOptional:false
	ASMLogRecord TDataValue // IsOptional:false
	ASMResponse  uint8      // IsOptional:false

}

func (g *GEventIDResponseStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTDataValue(g.ASMLogRecord)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 2, 7, 5, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ASMResponse)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 2, 7, 4, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 2, 21, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GSecureProcessingBlockQueryRequest = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
}

type GSecureProcessingBlockQueryRequestStruct struct {
	ASMRequestID uint32 // IsOptional:false

}

func (g *GSecureProcessingBlockQueryRequestStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 2, 22, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GSecureProcessingBlockQueryResponse = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.02070600.00000000": {UL: "ASMProtocolVersion", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010d.02070700.00000000": {UL: "ASMPlayoutStatus", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010d.02070400.00000000": {UL: "ASMResponse", Length: 1, Decode: DecodeTUInt8},
}

type GSecureProcessingBlockQueryResponseStruct struct {
	ASMRequestID       uint32 // IsOptional:false
	ASMProtocolVersion uint8  // IsOptional:false
	ASMPlayoutStatus   uint8  // IsOptional:false
	ASMResponse        uint8  // IsOptional:false

}

func (g *GSecureProcessingBlockQueryResponseStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ASMProtocolVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 2, 7, 6, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ASMPlayoutStatus)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 2, 7, 7, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ASMResponse)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 2, 7, 4, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 2, 23, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GProjectorCertificateRequest = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
}

type GProjectorCertificateRequestStruct struct {
	ASMRequestID uint32 // IsOptional:false

}

func (g *GProjectorCertificateRequestStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 2, 24, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GProjectorCertificateResponse = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.02070e00.00000000": {UL: "ASMProjectorCertificateData", Length: 0, Decode: DecodeTDataValue},
	"urn:smpte:ul:060e2b34.0101010d.02070400.00000000": {UL: "ASMResponse", Length: 1, Decode: DecodeTUInt8},
}

type GProjectorCertificateResponseStruct struct {
	ASMRequestID                uint32     // IsOptional:false
	ASMProjectorCertificateData TDataValue // IsOptional:false
	ASMResponse                 uint8      // IsOptional:false

}

func (g *GProjectorCertificateResponseStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTDataValue(g.ASMProjectorCertificateData)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 2, 7, 14, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ASMResponse)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 2, 7, 4, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 2, 25, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GLinkEncryptionKeyLoadRequest = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.06010103.10000000": {UL: "ASMLinkEncryptionKeyBatch", Length: 0, Decode: DecodeTASMLEKeyIDMappingSet},
}

type GLinkEncryptionKeyLoadRequestStruct struct {
	ASMRequestID              uint32                // IsOptional:false
	ASMLinkEncryptionKeyBatch TASMLEKeyIDMappingSet // IsOptional:false

}

func (g *GLinkEncryptionKeyLoadRequestStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTASMLEKeyIDMappingSet(g.ASMLinkEncryptionKeyBatch)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 6, 1, 1, 3, 16, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 3, 32, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GLinkEncryptionKeyLoadResponse = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.02070800.00000000": {UL: "ASMBufferOverflowFlag", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010d.02070400.00000000": {UL: "ASMResponse", Length: 1, Decode: DecodeTUInt8},
}

type GLinkEncryptionKeyLoadResponseStruct struct {
	ASMRequestID          uint32 // IsOptional:false
	ASMBufferOverflowFlag uint8  // IsOptional:false
	ASMResponse           uint8  // IsOptional:false

}

func (g *GLinkEncryptionKeyLoadResponseStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ASMBufferOverflowFlag)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 2, 7, 8, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ASMResponse)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 2, 7, 4, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 3, 33, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GLinkEncryptionKeyQueryIDRequest = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.01030801.03000000": {UL: "ASMLinkEncryptionKeyID", Length: 4, Decode: DecodeTUInt32},
}

type GLinkEncryptionKeyQueryIDRequestStruct struct {
	ASMRequestID           uint32 // IsOptional:false
	ASMLinkEncryptionKeyID uint32 // IsOptional:false

}

func (g *GLinkEncryptionKeyQueryIDRequestStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.ASMLinkEncryptionKeyID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 3, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 3, 34, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GLinkEncryptionKeyQueryIDResponse = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.02070900.00000000": {UL: "ASMKeyPresentFlag", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010d.02070400.00000000": {UL: "ASMResponse", Length: 1, Decode: DecodeTUInt8},
}

type GLinkEncryptionKeyQueryIDResponseStruct struct {
	ASMRequestID      uint32 // IsOptional:false
	ASMKeyPresentFlag uint8  // IsOptional:false
	ASMResponse       uint8  // IsOptional:false

}

func (g *GLinkEncryptionKeyQueryIDResponseStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ASMKeyPresentFlag)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 2, 7, 9, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ASMResponse)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 2, 7, 4, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 3, 35, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GLinkEncryptionKeyQueryAllRequest = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
}

type GLinkEncryptionKeyQueryAllRequestStruct struct {
	ASMRequestID uint32 // IsOptional:false

}

func (g *GLinkEncryptionKeyQueryAllRequestStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 3, 36, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GLinkEncryptionKeyQueryAllResponse = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.06010103.11000000": {UL: "ASMLinkEncryptionKeyIDBatch", Length: 0, Decode: DecodeTUInt32Set},
	"urn:smpte:ul:060e2b34.0101010d.02070400.00000000": {UL: "ASMResponse", Length: 1, Decode: DecodeTUInt8},
}

type GLinkEncryptionKeyQueryAllResponseStruct struct {
	ASMRequestID                uint32     // IsOptional:false
	ASMLinkEncryptionKeyIDBatch TUInt32Set // IsOptional:false
	ASMResponse                 uint8      // IsOptional:false

}

func (g *GLinkEncryptionKeyQueryAllResponseStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32Set(g.ASMLinkEncryptionKeyIDBatch)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 6, 1, 1, 3, 17, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ASMResponse)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 2, 7, 4, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 3, 37, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GLinkEncryptionPurgeIDRequest = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.01030801.03000000": {UL: "ASMLinkEncryptionKeyID", Length: 4, Decode: DecodeTUInt32},
}

type GLinkEncryptionPurgeIDRequestStruct struct {
	ASMRequestID           uint32 // IsOptional:false
	ASMLinkEncryptionKeyID uint32 // IsOptional:false

}

func (g *GLinkEncryptionPurgeIDRequestStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.ASMLinkEncryptionKeyID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 3, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 3, 38, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GLinkEncryptionPurgeIDResponse = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.02070a00.00000000": {UL: "ASMKeyNotPresentFlag", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010d.02070400.00000000": {UL: "ASMResponse", Length: 1, Decode: DecodeTUInt8},
}

type GLinkEncryptionPurgeIDResponseStruct struct {
	ASMRequestID         uint32 // IsOptional:false
	ASMKeyNotPresentFlag uint8  // IsOptional:false
	ASMResponse          uint8  // IsOptional:false

}

func (g *GLinkEncryptionPurgeIDResponseStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ASMKeyNotPresentFlag)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 2, 7, 10, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ASMResponse)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 2, 7, 4, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 3, 39, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GLinkEncryptionPurgeAllRequest = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
}

type GLinkEncryptionPurgeAllRequestStruct struct {
	ASMRequestID uint32 // IsOptional:false

}

func (g *GLinkEncryptionPurgeAllRequestStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 3, 40, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GLinkEncryptionPurgeAllResponse = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030801.01000000": {UL: "ASMRequestID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.02070400.00000000": {UL: "ASMResponse", Length: 1, Decode: DecodeTUInt8},
}

type GLinkEncryptionPurgeAllResponseStruct struct {
	ASMRequestID uint32 // IsOptional:false
	ASMResponse  uint8  // IsOptional:false

}

func (g *GLinkEncryptionPurgeAllResponseStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ASMRequestID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 8, 1, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ASMResponse)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 13, 2, 7, 4, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 2, 7, 1, 3, 41, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDMCVTGenericSet1 = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010e.05310101.00000000": {UL: "ApplicationIdentifier", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310102.00000000": {UL: "ApplicationVersionNumber", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310103.00000000": {UL: "BackwardsVersion", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310104.00000000": {UL: "TimeIntervalStart", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.05310105.00000000": {UL: "TimeIntervalDuration", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.05310106.00000000": {UL: "UpperLeftCorner", Length: 0, Decode: DecodeTUInt16Array},
	"urn:smpte:ul:060e2b34.0101010e.05310107.00000000": {UL: "LowerRightCorner", Length: 0, Decode: DecodeTUInt16Array},
	"urn:smpte:ul:060e2b34.0101010e.05310108.00000000": {UL: "WindowNumber", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310109.00000000": {UL: "TargetedSystemDisplayPrimaries", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.0531010a.00000000": {UL: "TargetedSystemDisplayWhitePointChromaticity", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.0531010b.00000000": {UL: "TargetedSystemDisplayMaximumLuminance", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.0531010c.00000000": {UL: "TargetedSystemDisplayMinimumLuminance", Length: 8, Decode: DecodeTRational},
}

type GDMCVTGenericSet1Struct struct {
	ApplicationIdentifier    uint8 // IsOptional:false
	ApplicationVersionNumber uint8 // IsOptional:false

}

func (g *GDMCVTGenericSet1Struct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt8(g.ApplicationIdentifier)
	result = append(result, []byte{54, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 1, 0, 0, 0, 0}, []byte{54, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ApplicationVersionNumber)
	result = append(result, []byte{54, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 2, 0, 0, 0, 0}, []byte{54, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 5, 49, 1, 1, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDMCVTApp1Set = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010e.05310101.00000000": {UL: "ApplicationIdentifier", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310102.00000000": {UL: "ApplicationVersionNumber", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310103.00000000": {UL: "BackwardsVersion", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310104.00000000": {UL: "TimeIntervalStart", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.05310105.00000000": {UL: "TimeIntervalDuration", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.05310106.00000000": {UL: "UpperLeftCorner", Length: 0, Decode: DecodeTUInt16Array},
	"urn:smpte:ul:060e2b34.0101010e.05310107.00000000": {UL: "LowerRightCorner", Length: 0, Decode: DecodeTUInt16Array},
	"urn:smpte:ul:060e2b34.0101010e.05310108.00000000": {UL: "WindowNumber", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310109.00000000": {UL: "TargetedSystemDisplayPrimaries", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.0531010a.00000000": {UL: "TargetedSystemDisplayWhitePointChromaticity", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.0531010b.00000000": {UL: "TargetedSystemDisplayMaximumLuminance", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.0531010c.00000000": {UL: "TargetedSystemDisplayMinimumLuminance", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.0531010d.00000000": {UL: "MinimumPqencodedMaxrgb", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.0531010e.00000000": {UL: "AveragePqencodedMaxrgb", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.0531010f.00000000": {UL: "MaximumPqencodedMaxrgb", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.05310110.00000000": {UL: "MinimumPqencodedMaxrgbOffset", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.05310111.00000000": {UL: "AveragePqencodedMaxrgbOffset", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.05310112.00000000": {UL: "MaximumPqencodedMaxrgbOffset", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.05310113.00000000": {UL: "ToneMappingOffset", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.05310114.00000000": {UL: "ToneMappingGain", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.05310115.00000000": {UL: "ToneMappingGamma", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.05310116.00000000": {UL: "ChromaCompensationWeight", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.05310117.00000000": {UL: "SaturationGain", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.05310118.00000000": {UL: "ToneDetailFactor", Length: 8, Decode: DecodeTRational},
}

type GDMCVTApp1SetStruct struct {
	ApplicationIdentifier    uint8     // IsOptional:false
	ApplicationVersionNumber uint8     // IsOptional:false
	MinimumPqencodedMaxrgb   TRational // IsOptional:false
	AveragePqencodedMaxrgb   TRational // IsOptional:false
	MaximumPqencodedMaxrgb   TRational // IsOptional:false

}

func (g *GDMCVTApp1SetStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt8(g.ApplicationIdentifier)
	result = append(result, []byte{54, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 1, 0, 0, 0, 0}, []byte{54, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ApplicationVersionNumber)
	result = append(result, []byte{54, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 2, 0, 0, 0, 0}, []byte{54, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.MinimumPqencodedMaxrgb)
	result = append(result, []byte{54, 13}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 13, 0, 0, 0, 0}, []byte{54, 13})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.AveragePqencodedMaxrgb)
	result = append(result, []byte{54, 14}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 14, 0, 0, 0, 0}, []byte{54, 14})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.MaximumPqencodedMaxrgb)
	result = append(result, []byte{54, 15}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 15, 0, 0, 0, 0}, []byte{54, 15})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 5, 49, 2, 1, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDMCVTApp2Set = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010e.05310101.00000000": {UL: "ApplicationIdentifier", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310102.00000000": {UL: "ApplicationVersionNumber", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310103.00000000": {UL: "BackwardsVersion", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310104.00000000": {UL: "TimeIntervalStart", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.05310105.00000000": {UL: "TimeIntervalDuration", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.05310106.00000000": {UL: "UpperLeftCorner", Length: 0, Decode: DecodeTUInt16Array},
	"urn:smpte:ul:060e2b34.0101010e.05310107.00000000": {UL: "LowerRightCorner", Length: 0, Decode: DecodeTUInt16Array},
	"urn:smpte:ul:060e2b34.0101010e.05310108.00000000": {UL: "WindowNumber", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310109.00000000": {UL: "TargetedSystemDisplayPrimaries", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.0531010a.00000000": {UL: "TargetedSystemDisplayWhitePointChromaticity", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.0531010b.00000000": {UL: "TargetedSystemDisplayMaximumLuminance", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.0531010c.00000000": {UL: "TargetedSystemDisplayMinimumLuminance", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.05310119.00000000": {UL: "LuminanceLowerBound", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010e.0531011a.00000000": {UL: "LuminanceUpperBound", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010e.0531011b.00000000": {UL: "LuminanceRangeSelector", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010e.0531011c.00000000": {UL: "ChromaticityDiskCenter", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.0531011d.00000000": {UL: "ChromaticityDiskRadius", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.0531011e.00000000": {UL: "ChromaticityAreaSelector", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010e.0531011f.00000000": {UL: "SaturationGainFunction", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.05310120.00000000": {UL: "ToneMappingInputSignalWeights", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.05310121.00000000": {UL: "ToneMappingInputSignalBlackLevelOffset", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.05310122.00000000": {UL: "ToneMappingInputSignalWhiteLevelOffset", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.05310123.00000000": {UL: "ShadowGainControl", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.05310124.00000000": {UL: "HighlightGainControl", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.05310125.00000000": {UL: "MidToneWidthAdjustmentFactor", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.05310126.00000000": {UL: "ToneMappingOutputFineTuningFunction", Length: 0, Decode: DecodeTRationalArray},
}

type GDMCVTApp2SetStruct struct {
	ApplicationIdentifier                  uint8          // IsOptional:false
	ApplicationVersionNumber               uint8          // IsOptional:false
	SaturationGainFunction                 TRationalArray // IsOptional:false
	ToneMappingInputSignalWeights          TRationalArray // IsOptional:false
	ToneMappingInputSignalBlackLevelOffset TRational      // IsOptional:false
	ToneMappingInputSignalWhiteLevelOffset TRational      // IsOptional:false
	ShadowGainControl                      TRational      // IsOptional:false
	HighlightGainControl                   TRational      // IsOptional:false
	MidToneWidthAdjustmentFactor           TRational      // IsOptional:false
	ToneMappingOutputFineTuningFunction    TRationalArray // IsOptional:false

}

func (g *GDMCVTApp2SetStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt8(g.ApplicationIdentifier)
	result = append(result, []byte{54, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 1, 0, 0, 0, 0}, []byte{54, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ApplicationVersionNumber)
	result = append(result, []byte{54, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 2, 0, 0, 0, 0}, []byte{54, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRationalArray(g.SaturationGainFunction)
	result = append(result, []byte{54, 31}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 31, 0, 0, 0, 0}, []byte{54, 31})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRationalArray(g.ToneMappingInputSignalWeights)
	result = append(result, []byte{54, 32}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 32, 0, 0, 0, 0}, []byte{54, 32})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.ToneMappingInputSignalBlackLevelOffset)
	result = append(result, []byte{54, 33}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 33, 0, 0, 0, 0}, []byte{54, 33})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.ToneMappingInputSignalWhiteLevelOffset)
	result = append(result, []byte{54, 34}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 34, 0, 0, 0, 0}, []byte{54, 34})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.ShadowGainControl)
	result = append(result, []byte{54, 35}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 35, 0, 0, 0, 0}, []byte{54, 35})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.HighlightGainControl)
	result = append(result, []byte{54, 36}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 36, 0, 0, 0, 0}, []byte{54, 36})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.MidToneWidthAdjustmentFactor)
	result = append(result, []byte{54, 37}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 37, 0, 0, 0, 0}, []byte{54, 37})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRationalArray(g.ToneMappingOutputFineTuningFunction)
	result = append(result, []byte{54, 38}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 38, 0, 0, 0, 0}, []byte{54, 38})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 5, 49, 2, 2, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDMCVTApp3Set = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010e.05310101.00000000": {UL: "ApplicationIdentifier", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310102.00000000": {UL: "ApplicationVersionNumber", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310103.00000000": {UL: "BackwardsVersion", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310104.00000000": {UL: "TimeIntervalStart", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.05310105.00000000": {UL: "TimeIntervalDuration", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.05310106.00000000": {UL: "UpperLeftCorner", Length: 0, Decode: DecodeTUInt16Array},
	"urn:smpte:ul:060e2b34.0101010e.05310107.00000000": {UL: "LowerRightCorner", Length: 0, Decode: DecodeTUInt16Array},
	"urn:smpte:ul:060e2b34.0101010e.05310108.00000000": {UL: "WindowNumber", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310109.00000000": {UL: "TargetedSystemDisplayPrimaries", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.0531010a.00000000": {UL: "TargetedSystemDisplayWhitePointChromaticity", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.0531010b.00000000": {UL: "TargetedSystemDisplayMaximumLuminance", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.0531010c.00000000": {UL: "TargetedSystemDisplayMinimumLuminance", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.05310127.00000000": {UL: "TargetedSystemDisplaySignalFormat", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310128.00000000": {UL: "MetadataColorCodingWorkspace", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310129.00000000": {UL: "PreMatrixToneMapping1", Length: 0, Decode: DecodeTUInt16Array},
	"urn:smpte:ul:060e2b34.0101010e.0531012a.00000000": {UL: "PreMatrixToneMapping2", Length: 0, Decode: DecodeTUInt16Array},
	"urn:smpte:ul:060e2b34.0101010e.0531012b.00000000": {UL: "PreMatrixToneMapping3", Length: 0, Decode: DecodeTUInt16Array},
	"urn:smpte:ul:060e2b34.0101010e.0531012c.00000000": {UL: "ColorRemappingMatrix", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.0531012d.00000000": {UL: "PostMatrixToneMapping1", Length: 0, Decode: DecodeTUInt16Array},
	"urn:smpte:ul:060e2b34.0101010e.0531012e.00000000": {UL: "PostMatrixToneMapping2", Length: 0, Decode: DecodeTUInt16Array},
	"urn:smpte:ul:060e2b34.0101010e.0531012f.00000000": {UL: "PostMatrixToneMapping3", Length: 0, Decode: DecodeTUInt16Array},
}

type GDMCVTApp3SetStruct struct {
	ApplicationIdentifier    uint8 // IsOptional:false
	ApplicationVersionNumber uint8 // IsOptional:false

}

func (g *GDMCVTApp3SetStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt8(g.ApplicationIdentifier)
	result = append(result, []byte{54, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 1, 0, 0, 0, 0}, []byte{54, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ApplicationVersionNumber)
	result = append(result, []byte{54, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 2, 0, 0, 0, 0}, []byte{54, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 5, 49, 2, 3, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDMCVTApp4Set = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010e.05310101.00000000": {UL: "ApplicationIdentifier", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310102.00000000": {UL: "ApplicationVersionNumber", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310103.00000000": {UL: "BackwardsVersion", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310104.00000000": {UL: "TimeIntervalStart", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.05310105.00000000": {UL: "TimeIntervalDuration", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.05310106.00000000": {UL: "UpperLeftCorner", Length: 0, Decode: DecodeTUInt16Array},
	"urn:smpte:ul:060e2b34.0101010e.05310107.00000000": {UL: "LowerRightCorner", Length: 0, Decode: DecodeTUInt16Array},
	"urn:smpte:ul:060e2b34.0101010e.05310108.00000000": {UL: "WindowNumber", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310109.00000000": {UL: "TargetedSystemDisplayPrimaries", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.0531010a.00000000": {UL: "TargetedSystemDisplayWhitePointChromaticity", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.0531010b.00000000": {UL: "TargetedSystemDisplayMaximumLuminance", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.0531010c.00000000": {UL: "TargetedSystemDisplayMinimumLuminance", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.05310130.00000000": {UL: "CenterOfEllipse", Length: 0, Decode: DecodeTUInt16Array},
	"urn:smpte:ul:060e2b34.0101010e.05310131.00000000": {UL: "RotationAngle", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310132.00000000": {UL: "SemiMajorAxisInternalEllipse", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010e.05310133.00000000": {UL: "SemiMajorAxisExternalEllipse", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010e.05310134.00000000": {UL: "SemiMinorAxisExternalEllipse", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010e.05310135.00000000": {UL: "OverlapProcessOption", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310136.00000000": {UL: "TargetedSystemDisplayActualPeakLuminance", Length: 0, Decode: DecodeTUInt8Array},
	"urn:smpte:ul:060e2b34.0101010e.05310137.00000000": {UL: "RowsInTargetedSystemDisplayActualPeakLuminance", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310138.00000000": {UL: "MasteringDisplayActualPeakLuminance", Length: 0, Decode: DecodeTUInt8Array},
	"urn:smpte:ul:060e2b34.0101010e.05310139.00000000": {UL: "RowsInMasteringDisplayActualPeakLuminance", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.0531013a.00000000": {UL: "MaxSCL", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.0531013b.00000000": {UL: "AverageMaxRGB", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.0531013c.00000000": {UL: "DistributionMaxRGBPercentages", Length: 0, Decode: DecodeTUInt8Array},
	"urn:smpte:ul:060e2b34.0101010e.0531013d.00000000": {UL: "DistributionMaxRGBPercentiles", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.0531013e.00000000": {UL: "FractionBrightPixels", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.0531013f.00000000": {UL: "KneePoint", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.05310140.00000000": {UL: "BezierCurveAnchors", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.05310141.00000000": {UL: "ColorSaturationWeight", Length: 8, Decode: DecodeTRational},
}

type GDMCVTApp4SetStruct struct {
	ApplicationIdentifier         uint8          // IsOptional:false
	ApplicationVersionNumber      uint8          // IsOptional:false
	MaxSCL                        TRationalArray // IsOptional:false
	AverageMaxRGB                 TRational      // IsOptional:false
	DistributionMaxRGBPercentages TUInt8Array    // IsOptional:false
	DistributionMaxRGBPercentiles TRationalArray // IsOptional:false
	FractionBrightPixels          TRational      // IsOptional:false

}

func (g *GDMCVTApp4SetStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt8(g.ApplicationIdentifier)
	result = append(result, []byte{54, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 1, 0, 0, 0, 0}, []byte{54, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.ApplicationVersionNumber)
	result = append(result, []byte{54, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 2, 0, 0, 0, 0}, []byte{54, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRationalArray(g.MaxSCL)
	result = append(result, []byte{54, 58}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 58, 0, 0, 0, 0}, []byte{54, 58})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.AverageMaxRGB)
	result = append(result, []byte{54, 59}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 59, 0, 0, 0, 0}, []byte{54, 59})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8Array(g.DistributionMaxRGBPercentages)
	result = append(result, []byte{54, 60}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 60, 0, 0, 0, 0}, []byte{54, 60})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRationalArray(g.DistributionMaxRGBPercentiles)
	result = append(result, []byte{54, 61}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 61, 0, 0, 0, 0}, []byte{54, 61})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.FractionBrightPixels)
	result = append(result, []byte{54, 62}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 1, 62, 0, 0, 0, 0}, []byte{54, 62})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 5, 49, 2, 4, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GMDColorVolumeMetadata = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010e.04200401.02010000": {UL: "MDPrimaries", Length: 12, Decode: DecodeTThreeColorPrimaries},
	"urn:smpte:ul:060e2b34.0101010e.04200401.02020000": {UL: "MDWhitePointChromaticity", Length: 4, Decode: DecodeTColorPrimary},
	"urn:smpte:ul:060e2b34.0101010e.04200401.02030000": {UL: "MDMaximumLuminance", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04200401.02040000": {UL: "MDMinimumLuminance", Length: 4, Decode: DecodeTUInt32},
}

type GMDColorVolumeMetadataStruct struct {
}

func (g *GMDColorVolumeMetadataStruct) Encode() ([]byte, error) {
	var result []byte

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 5, 50, 1, 0, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GMaximumLightLevelMetadata = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010e.05310142.00000000": {UL: "MaximumContentLightLevel", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010e.05310143.00000000": {UL: "MaximumFrameAverageLightLevel", Length: 2, Decode: DecodeTUInt16},
}

type GMaximumLightLevelMetadataStruct struct {
}

func (g *GMaximumLightLevelMetadataStruct) Encode() ([]byte, error) {
	var result []byte

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 5, 50, 2, 0, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAdministrativeBaseClass = map[string]Group{}

type GAdministrativeBaseClassStruct struct {
}

var GCompoundEntryElementBaseClass = map[string]Group{}

type GCompoundEntryElementBaseClassStruct struct {
}

var GEntry = map[string]Group{}

type GEntryStruct struct {
}

var GEntryAdministration = map[string]Group{}

type GEntryAdministrationStruct struct {
}

var GLeaf = map[string]Group{}

type GLeafStruct struct {
}

var GNode = map[string]Group{}

type GNodeStruct struct {
}

var GRegister = map[string]Group{}

type GRegisterStruct struct {
}

var GRegisterAdministration = map[string]Group{}

type GRegisterAdministrationStruct struct {
}

var GRifBaseClass = map[string]Group{}

type GRifBaseClassStruct struct {
}

var GLensUnitAcquisitionMetadata = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.0101010d.04200202.01000000": {UL: "IrisFNumber", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010e.04200202.08000000": {UL: "IrisTNumber", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010e.04200202.09000000": {UL: "IrisRingPosition", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010d.04200202.02000000": {UL: "FocusPositionFromImagePlane", Decode: DecodeTany},
	"urn:smpte:ul:060e2b34.0101010d.04200202.03000000": {UL: "FocusPositionFromFrontLensVertex", Decode: DecodeTany},
	"urn:smpte:ul:060e2b34.0101010e.04200202.0a000000": {UL: "FocusRingPosition", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010d.04200202.04000000": {UL: "MacroSetting", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010d.04200202.05000000": {UL: "LensZoom35mmStillCameraEquivalent", Decode: DecodeTany},
	"urn:smpte:ul:060e2b34.0101010d.04200202.06000000": {UL: "LensZoomActualFocalLength", Decode: DecodeTany},
	"urn:smpte:ul:060e2b34.0101010e.04200202.0b000000": {UL: "ZoomRingPosition", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010d.04200202.07000000": {UL: "OpticalExtenderMagnification", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010d.03020302.02100100": {UL: "LensAttributes", Length: 0, Decode: DecodeTUTF8String},
}

type GLensUnitAcquisitionMetadataStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GLensUnitAcquisitionMetadataStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 12, 2, 1, 1, 1, 1, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GCameraUnitAcquisitionMetadata = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.0101010d.04200103.01010000": {UL: "AutoExposureMode", Length: 16, Decode: DecodeTAutoExposureModeType},
	"urn:smpte:ul:060e2b34.0101010e.04200103.010c0000": {UL: "ExposureIndexOfPhotoMeter", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010d.04200103.01020000": {UL: "AutoFocusSensingAreaSetting", Length: 1, Decode: DecodeTAutoFocusSensingAreaSettingType},
	"urn:smpte:ul:060e2b34.0101010d.04200103.01030000": {UL: "ColorCorrectionFilterWheelSetting", Length: 1, Decode: DecodeTColorCorrectionFilterWheelSettingType},
	"urn:smpte:ul:060e2b34.0101010d.04200103.01040000": {UL: "NeutralDensityFilterWheelSetting", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010d.04200103.01050000": {UL: "ImageSensorDimensionEffectiveWidth", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010d.04200103.01060000": {UL: "ImageSensorDimensionEffectiveHeight", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010d.04010301.03010000": {UL: "CaptureFrameRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010d.04200103.01070000": {UL: "ImageSensorReadoutMode", Length: 1, Decode: DecodeTImageSensorReadoutModeType},
	"urn:smpte:ul:060e2b34.0101010d.04200103.01080000": {UL: "ShutterSpeedAngle", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.04200103.01080100": {UL: "ShutterSpeedTime", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010d.04200103.01090000": {UL: "CameraMasterGainAdjustment", Length: 2, Decode: DecodeTInt16},
	"urn:smpte:ul:060e2b34.0101010d.04200103.010a0000": {UL: "ISOSensitivity", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010e.04200103.010d0000": {UL: "ColorMatrix", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010d.04200103.010b0000": {UL: "ElectricalExtenderMagnification", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010d.04200103.02010000": {UL: "AutoWhiteBalanceMode", Length: 1, Decode: DecodeTAutoWhiteBalanceModeType},
	"urn:smpte:ul:060e2b34.0101010d.04200103.02020000": {UL: "WhiteBalance", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010d.04200103.02030000": {UL: "CameraMasterBlackLevel", Length: 2, Decode: DecodeTInt16},
	"urn:smpte:ul:060e2b34.0101010d.04200103.02040000": {UL: "CameraKneePoint", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010d.04200103.02050000": {UL: "CameraKneeSlope", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010d.04200103.02060000": {UL: "CameraLuminanceDynamicRange", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010102.04010201.01010200": {UL: "TransferCharacteristic", Length: 16, Decode: DecodeTTransferCharacteristicType},
	"urn:smpte:ul:060e2b34.0101010e.04200103.02070000": {UL: "GammaForCDL", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04200103.02080000": {UL: "ASCCDLV12", Decode: DecodeTany},
	"urn:smpte:ul:060e2b34.0101010d.01020108.02000000": {UL: "CameraSettingFileURI", Length: 0, Decode: DecodeTUTF8String},
	"urn:smpte:ul:060e2b34.0101010d.03020302.02100200": {UL: "CameraAttributes", Length: 0, Decode: DecodeTUTF8String},
}

type GCameraUnitAcquisitionMetadataStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GCameraUnitAcquisitionMetadataStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 12, 2, 1, 1, 2, 1, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GUserDefinedAcquisitionMetadata = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.0101010d.04060805.00000000": {UL: "UDAMSetIdentifier", Length: 16, Decode: DecodeTAUID},
}

type GUserDefinedAcquisitionMetadataStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GUserDefinedAcquisitionMetadataStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 12, 2, 1, 1, 127, 1, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAuxDataBlockTransferHeader = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010e.02400101.00000000": {UL: "AuxDataEditUnitRangeStartIndex", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.02400102.00000000": {UL: "AuxEditUnitRangeCount", Length: 4, Decode: DecodeTUInt32},
}

type GAuxDataBlockTransferHeaderStruct struct {
	AuxDataEditUnitRangeStartIndex uint32 // IsOptional:false
	AuxEditUnitRangeCount          uint32 // IsOptional:false

}

func (g *GAuxDataBlockTransferHeaderStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.AuxDataEditUnitRangeStartIndex)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 14, 2, 64, 1, 1, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.AuxEditUnitRangeCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 14, 2, 64, 1, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 12, 3, 1, 1, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAuxDataBlock = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010e.02400103.00000000": {UL: "AuxDataBlockEditUnitIndex", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.02400104.00000000": {UL: "AuxDataBlockEditUnitEditRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.02400105.00000000": {UL: "AuxDataBlockSourceDataEssenceCodingUL", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010e.02400106.00000000": {UL: "AuxDataBlockSourceDataItemLength", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.0101010e.02400107.00000000": {UL: "AuxDataBlockSourceDataItem", Length: 0, Decode: DecodeTDataValue},
	"urn:smpte:ul:060e2b34.0101010e.02400108.00000000": {UL: "AuxDataBlockSourceCryptographicContextLength", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.0101010e.02400109.00000000": {UL: "AuxDataBlockSourceCryptographicContext", Length: 0, Decode: DecodeTDataValue},
}

type GAuxDataBlockStruct struct {
	AuxDataBlockEditUnitIndex                    uint32     // IsOptional:false
	AuxDataBlockEditUnitEditRate                 TRational  // IsOptional:false
	AuxDataBlockSourceDataEssenceCodingUL        TAUID      // IsOptional:false
	AuxDataBlockSourceDataItemLength             uint64     // IsOptional:false
	AuxDataBlockSourceDataItem                   TDataValue // IsOptional:false
	AuxDataBlockSourceCryptographicContextLength uint64     // IsOptional:false
	AuxDataBlockSourceCryptographicContext       TDataValue // IsOptional:false

}

func (g *GAuxDataBlockStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.AuxDataBlockEditUnitIndex)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 14, 2, 64, 1, 3, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.AuxDataBlockEditUnitEditRate)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 14, 2, 64, 1, 4, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.AuxDataBlockSourceDataEssenceCodingUL)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 14, 2, 64, 1, 5, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.AuxDataBlockSourceDataItemLength)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 14, 2, 64, 1, 6, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTDataValue(g.AuxDataBlockSourceDataItem)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 14, 2, 64, 1, 7, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.AuxDataBlockSourceCryptographicContextLength)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 14, 2, 64, 1, 8, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTDataValue(g.AuxDataBlockSourceCryptographicContext)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 14, 2, 64, 1, 9, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 12, 3, 1, 2, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAudioMetadataPack = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010e.04020901.00000000": {UL: "ST2109AudioMetadata", Length: 0, Decode: DecodeTST2109PayloadSeries},
}

type GAudioMetadataPackStruct struct {
}

func (g *GAudioMetadataPackStruct) Encode() ([]byte, error) {
	var result []byte

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 12, 4, 1, 0, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GInterchangeObject = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GInterchangeObjectStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GInterchangeObjectStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GComponent = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
}

type GComponentStruct struct {
	InstanceID              TUUID          // IsOptional:true
	ComponentDataDefinition TWeakReference // IsOptional:false

}

func (g *GComponentStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 2, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GSegment = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GSegmentStruct struct {
	ComponentDataDefinition TWeakReference // IsOptional:false
	InstanceID              TUUID          // IsOptional:true

}

func (g *GSegmentStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 3, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GEdgeCode = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.01040901.00000000": {UL: "EdgeCodeStart", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.01010102.04100103.01090000": {UL: "EdgeCodeFilmFormat", Length: 1, Decode: DecodeTFilmType},
	"urn:smpte:ul:060e2b34.01010101.04100103.01020000": {UL: "EdgeCodeFormat", Length: 1, Decode: DecodeTEdgeType},
	"urn:smpte:ul:060e2b34.01010102.01030201.02000000": {UL: "EdgeCodeHeader", Length: 0, Decode: DecodeTDataValue},
}

type GEdgeCodeStruct struct {
	ComponentDataDefinition TWeakReference // IsOptional:false
	InstanceID              TUUID          // IsOptional:true
	EdgeCodeStart           TPositionType  // IsOptional:false
	EdgeCodeFilmFormat      TFilmType      // IsOptional:false
	EdgeCodeFormat          TEdgeType      // IsOptional:false

}

func (g *GEdgeCodeStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPositionType(g.EdgeCodeStart)
	result = append(result, []byte{4, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 4, 9, 1, 0, 0, 0, 0}, []byte{4, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTFilmType(g.EdgeCodeFilmFormat)
	result = append(result, []byte{4, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 16, 1, 3, 1, 9, 0, 0}, []byte{4, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTEdgeType(g.EdgeCodeFormat)
	result = append(result, []byte{4, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 16, 1, 3, 1, 2, 0, 0}, []byte{4, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 4, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GEssenceGroup = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.06010000": {UL: "Choices", Length: 0, Decode: DecodeTSourceReferenceStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010102.06010104.02080000": {UL: "StillFrame", Length: 0, Decode: DecodeTStrongReference},
}

type GEssenceGroupStruct struct {
	ComponentDataDefinition TWeakReference                        // IsOptional:false
	InstanceID              TUUID                                 // IsOptional:true
	Choices                 TSourceReferenceStrongReferenceVector // IsOptional:false

}

func (g *GEssenceGroupStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTSourceReferenceStrongReferenceVector(g.Choices)
	result = append(result, []byte{5, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 6, 1, 0, 0}, []byte{5, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 5, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GEvent = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.07020103.03030000": {UL: "EventPosition", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.01010102.05300404.01000000": {UL: "EventComment", Length: 0, Decode: DecodeTUTF16String},
}

type GEventStruct struct {
	ComponentDataDefinition TWeakReference // IsOptional:false
	InstanceID              TUUID          // IsOptional:true

}

func (g *GEventStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 6, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GGPITrigger = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.07020103.03030000": {UL: "EventPosition", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.01010102.05300404.01000000": {UL: "EventComment", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.05300401.00000000": {UL: "ActiveState", Length: 1, Decode: DecodeTBoolean},
}

type GGPITriggerStruct struct {
	ComponentDataDefinition TWeakReference // IsOptional:false
	InstanceID              TUUID          // IsOptional:true
	ActiveState             TBoolean       // IsOptional:false

}

func (g *GGPITriggerStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTBoolean(g.ActiveState)
	result = append(result, []byte{8, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 5, 48, 4, 1, 0, 0, 0, 0}, []byte{8, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 7, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GCommentMarker = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.07020103.03030000": {UL: "EventPosition", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.01010102.05300404.01000000": {UL: "EventComment", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.020a0000": {UL: "AnnotationSource", Length: 0, Decode: DecodeTStrongReference},
}

type GCommentMarkerStruct struct {
	ComponentDataDefinition TWeakReference // IsOptional:false
	InstanceID              TUUID          // IsOptional:true

}

func (g *GCommentMarkerStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 8, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GFiller = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GFillerStruct struct {
	ComponentDataDefinition TWeakReference // IsOptional:false
	InstanceID              TUUID          // IsOptional:true

}

func (g *GFillerStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 1, 1, 1, 1, 9, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GOperationGroup = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.05300506.00000000": {UL: "Operation", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.06020000": {UL: "InputSegments", Length: 0, Decode: DecodeTSegmentStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010102.06010104.060a0000": {UL: "Parameters", Length: 0, Decode: DecodeTParameterStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010102.0530050c.00000000": {UL: "BypassOverride", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.02060000": {UL: "Rendering", Length: 0, Decode: DecodeTStrongReference},
}

type GOperationGroupStruct struct {
	ComponentDataDefinition TWeakReference // IsOptional:false
	InstanceID              TUUID          // IsOptional:true
	Operation               TWeakReference // IsOptional:false

}

func (g *GOperationGroupStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.Operation)
	result = append(result, []byte{11, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 5, 48, 5, 6, 0, 0, 0, 0}, []byte{11, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 10, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GNestedScope = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.06070000": {UL: "NestedScopeTracks", Length: 0, Decode: DecodeTSegmentStrongReferenceVector},
}

type GNestedScopeStruct struct {
	ComponentDataDefinition TWeakReference                // IsOptional:false
	InstanceID              TUUID                         // IsOptional:true
	NestedScopeTracks       TSegmentStrongReferenceVector // IsOptional:false

}

func (g *GNestedScopeStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTSegmentStrongReferenceVector(g.NestedScopeTracks)
	result = append(result, []byte{12, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 6, 7, 0, 0}, []byte{12, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 11, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GPulldown = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.02070000": {UL: "InputSegment", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010102.05401001.02000000": {UL: "PulldownKind", Length: 1, Decode: DecodeTPulldownKindType},
	"urn:smpte:ul:060e2b34.01010102.05401001.01000000": {UL: "PulldownDirection", Length: 1, Decode: DecodeTPulldownDirectionType},
	"urn:smpte:ul:060e2b34.01010102.05401001.03000000": {UL: "PhaseFrame", Length: 4, Decode: DecodeTPhaseFrameType},
}

type GPulldownStruct struct {
	ComponentDataDefinition TWeakReference         // IsOptional:false
	InstanceID              TUUID                  // IsOptional:true
	InputSegment            TStrongReference       // IsOptional:false
	PulldownKind            TPulldownKindType      // IsOptional:false
	PulldownDirection       TPulldownDirectionType // IsOptional:false
	PhaseFrame              TPhaseFrameType        // IsOptional:false

}

func (g *GPulldownStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTStrongReference(g.InputSegment)
	result = append(result, []byte{13, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 2, 7, 0, 0}, []byte{13, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPulldownKindType(g.PulldownKind)
	result = append(result, []byte{13, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 5, 64, 16, 1, 2, 0, 0, 0}, []byte{13, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPulldownDirectionType(g.PulldownDirection)
	result = append(result, []byte{13, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 5, 64, 16, 1, 1, 0, 0, 0}, []byte{13, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPhaseFrameType(g.PhaseFrame)
	result = append(result, []byte{13, 4}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 5, 64, 16, 1, 3, 0, 0, 0}, []byte{13, 4})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 12, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GScopeReference = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010103.03000000": {UL: "RelativeScope", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010103.04000000": {UL: "RelativeTrack", Length: 4, Decode: DecodeTUInt32},
}

type GScopeReferenceStruct struct {
	ComponentDataDefinition TWeakReference // IsOptional:false
	InstanceID              TUUID          // IsOptional:true
	RelativeScope           uint32         // IsOptional:false
	RelativeTrack           uint32         // IsOptional:false

}

func (g *GScopeReferenceStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.RelativeScope)
	result = append(result, []byte{14, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 3, 3, 0, 0, 0}, []byte{14, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.RelativeTrack)
	result = append(result, []byte{14, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 3, 4, 0, 0, 0}, []byte{14, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 13, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GSelector = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.02090000": {UL: "SelectedSegment", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.06080000": {UL: "AlternateSegments", Length: 0, Decode: DecodeTSegmentStrongReferenceVector},
}

type GSelectorStruct struct {
	ComponentDataDefinition TWeakReference   // IsOptional:false
	InstanceID              TUUID            // IsOptional:true
	SelectedSegment         TStrongReference // IsOptional:false

}

func (g *GSelectorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTStrongReference(g.SelectedSegment)
	result = append(result, []byte{15, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 2, 9, 0, 0}, []byte{15, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 14, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GSequence = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.06090000": {UL: "ComponentObjects", Length: 0, Decode: DecodeTComponentStrongReferenceVector},
}

type GSequenceStruct struct {
	ComponentDataDefinition TWeakReference                  // IsOptional:false
	InstanceID              TUUID                           // IsOptional:true
	ComponentObjects        TComponentStrongReferenceVector // IsOptional:false

}

func (g *GSequenceStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTComponentStrongReferenceVector(g.ComponentObjects)
	result = append(result, []byte{16, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 6, 9, 0, 0}, []byte{16, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 15, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GSourceReference = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010103.01000000": {UL: "SourcePackageID", Length: 32, Decode: DecodeTPackageIDType},
	"urn:smpte:ul:060e2b34.01010102.06010103.02000000": {UL: "SourceTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010107.06010103.07000000": {UL: "ChannelIDs", Length: 0, Decode: DecodeTUInt32Array},
	"urn:smpte:ul:060e2b34.01010108.06010103.08000000": {UL: "MonoSourceTrackIDs", Length: 0, Decode: DecodeTUInt32Array},
}

type GSourceReferenceStruct struct {
	ComponentDataDefinition TWeakReference // IsOptional:false
	InstanceID              TUUID          // IsOptional:true
	SourcePackageID         TPackageIDType // IsOptional:false
	SourceTrackID           uint32         // IsOptional:false

}

func (g *GSourceReferenceStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPackageIDType(g.SourcePackageID)
	result = append(result, []byte{17, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 3, 1, 0, 0, 0}, []byte{17, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.SourceTrackID)
	result = append(result, []byte{17, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 3, 2, 0, 0, 0}, []byte{17, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 16, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GSourceClip = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.06010103.01000000": {UL: "SourcePackageID", Length: 32, Decode: DecodeTPackageIDType},
	"urn:smpte:ul:060e2b34.01010102.06010103.02000000": {UL: "SourceTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010107.06010103.07000000": {UL: "ChannelIDs", Length: 0, Decode: DecodeTUInt32Array},
	"urn:smpte:ul:060e2b34.01010108.06010103.08000000": {UL: "MonoSourceTrackIDs", Length: 0, Decode: DecodeTUInt32Array},
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.07020103.01040000": {UL: "StartPosition", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.01010102.07020201.01050200": {UL: "FadeInLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010101.05300501.00000000": {UL: "FadeInType", Length: 1, Decode: DecodeTFadeType},
	"urn:smpte:ul:060e2b34.01010102.07020201.01050300": {UL: "FadeOutLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010101.05300502.00000000": {UL: "FadeOutType", Length: 1, Decode: DecodeTFadeType},
}

type GSourceClipStruct struct {
	SourcePackageID         TPackageIDType // IsOptional:false
	SourceTrackID           uint32         // IsOptional:false
	ComponentDataDefinition TWeakReference // IsOptional:false
	InstanceID              TUUID          // IsOptional:true
	StartPosition           TPositionType  // IsOptional:false

}

func (g *GSourceClipStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTPackageIDType(g.SourcePackageID)
	result = append(result, []byte{17, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 3, 1, 0, 0, 0}, []byte{17, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.SourceTrackID)
	result = append(result, []byte{17, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 3, 2, 0, 0, 0}, []byte{17, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPositionType(g.StartPosition)
	result = append(result, []byte{18, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 7, 2, 1, 3, 1, 4, 0, 0}, []byte{18, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 17, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTextClip = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.06010103.01000000": {UL: "SourcePackageID", Length: 32, Decode: DecodeTPackageIDType},
	"urn:smpte:ul:060e2b34.01010102.06010103.02000000": {UL: "SourceTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010107.06010103.07000000": {UL: "ChannelIDs", Length: 0, Decode: DecodeTUInt32Array},
	"urn:smpte:ul:060e2b34.01010108.06010103.08000000": {UL: "MonoSourceTrackIDs", Length: 0, Decode: DecodeTUInt32Array},
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GTextClipStruct struct {
	SourcePackageID         TPackageIDType // IsOptional:false
	SourceTrackID           uint32         // IsOptional:false
	ComponentDataDefinition TWeakReference // IsOptional:false
	InstanceID              TUUID          // IsOptional:true

}

func (g *GTextClipStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTPackageIDType(g.SourcePackageID)
	result = append(result, []byte{17, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 3, 1, 0, 0, 0}, []byte{17, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.SourceTrackID)
	result = append(result, []byte{17, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 3, 2, 0, 0, 0}, []byte{17, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 18, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GHTMLClip = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.06010103.01000000": {UL: "SourcePackageID", Length: 32, Decode: DecodeTPackageIDType},
	"urn:smpte:ul:060e2b34.01010102.06010103.02000000": {UL: "SourceTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010107.06010103.07000000": {UL: "ChannelIDs", Length: 0, Decode: DecodeTUInt32Array},
	"urn:smpte:ul:060e2b34.01010108.06010103.08000000": {UL: "MonoSourceTrackIDs", Length: 0, Decode: DecodeTUInt32Array},
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.05300601.01000000": {UL: "BeginAnchor", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.05300602.01000000": {UL: "EndAnchor", Length: 0, Decode: DecodeTUTF16String},
}

type GHTMLClipStruct struct {
	SourcePackageID         TPackageIDType // IsOptional:false
	SourceTrackID           uint32         // IsOptional:false
	ComponentDataDefinition TWeakReference // IsOptional:false
	InstanceID              TUUID          // IsOptional:true

}

func (g *GHTMLClipStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTPackageIDType(g.SourcePackageID)
	result = append(result, []byte{17, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 3, 1, 0, 0, 0}, []byte{17, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.SourceTrackID)
	result = append(result, []byte{17, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 3, 2, 0, 0, 0}, []byte{17, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 19, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTimecode = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.07020103.01050000": {UL: "StartTimecode", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.01010102.04040101.02060000": {UL: "FramesPerSecond", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010101.04040101.05000000": {UL: "DropFrame", Length: 1, Decode: DecodeTBoolean},
}

type GTimecodeStruct struct {
	ComponentDataDefinition TWeakReference // IsOptional:false
	InstanceID              TUUID          // IsOptional:true
	StartTimecode           TPositionType  // IsOptional:false
	FramesPerSecond         uint16         // IsOptional:false
	DropFrame               TBoolean       // IsOptional:false

}

func (g *GTimecodeStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPositionType(g.StartTimecode)
	result = append(result, []byte{21, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 7, 2, 1, 3, 1, 5, 0, 0}, []byte{21, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.FramesPerSecond)
	result = append(result, []byte{21, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 4, 1, 1, 2, 6, 0, 0}, []byte{21, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTBoolean(g.DropFrame)
	result = append(result, []byte{21, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 4, 1, 1, 5, 0, 0, 0}, []byte{21, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 20, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTimecodeStream = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.04040101.02010000": {UL: "TimecodeStreamSampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010102.04070300.00000000": {UL: "TimecodeStreamData", Length: 0, Decode: DecodeTbyte},
	"urn:smpte:ul:060e2b34.01010101.04040201.00000000": {UL: "TimecodeSource", Length: 1, Decode: DecodeTTCSource},
}

type GTimecodeStreamStruct struct {
	ComponentDataDefinition  TWeakReference // IsOptional:false
	InstanceID               TUUID          // IsOptional:true
	TimecodeStreamSampleRate TRational      // IsOptional:false
	TimecodeStreamData       byte           // IsOptional:false
	TimecodeSource           TTCSource      // IsOptional:false

}

func (g *GTimecodeStreamStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.TimecodeStreamSampleRate)
	result = append(result, []byte{22, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 4, 1, 1, 2, 1, 0, 0}, []byte{22, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTbyte(g.TimecodeStreamData)
	result = append(result, []byte{22, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 3, 0, 0, 0, 0, 0}, []byte{22, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTTCSource(g.TimecodeSource)
	result = append(result, []byte{22, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 4, 2, 1, 0, 0, 0, 0}, []byte{22, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 21, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTimecodeStream12M = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04040101.02010000": {UL: "TimecodeStreamSampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010102.04070300.00000000": {UL: "TimecodeStreamData", Length: 0, Decode: DecodeTbyte},
	"urn:smpte:ul:060e2b34.01010101.04040201.00000000": {UL: "TimecodeSource", Length: 1, Decode: DecodeTTCSource},
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.04040101.04000000": {UL: "IncludeSync", Length: 1, Decode: DecodeTBoolean},
}

type GTimecodeStream12MStruct struct {
	TimecodeStreamSampleRate TRational      // IsOptional:false
	TimecodeStreamData       byte           // IsOptional:false
	TimecodeSource           TTCSource      // IsOptional:false
	ComponentDataDefinition  TWeakReference // IsOptional:false
	InstanceID               TUUID          // IsOptional:true
	IncludeSync              TBoolean       // IsOptional:false

}

func (g *GTimecodeStream12MStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTRational(g.TimecodeStreamSampleRate)
	result = append(result, []byte{22, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 4, 1, 1, 2, 1, 0, 0}, []byte{22, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTbyte(g.TimecodeStreamData)
	result = append(result, []byte{22, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 3, 0, 0, 0, 0, 0}, []byte{22, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTTCSource(g.TimecodeSource)
	result = append(result, []byte{22, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 4, 2, 1, 0, 0, 0, 0}, []byte{22, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTBoolean(g.IncludeSync)
	result = append(result, []byte{23, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 4, 1, 1, 4, 0, 0, 0}, []byte{23, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 22, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTransition = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.02050000": {UL: "TransitionOperation", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010102.07020103.01060000": {UL: "CutPoint", Length: 8, Decode: DecodeTPositionType},
}

type GTransitionStruct struct {
	ComponentDataDefinition TWeakReference   // IsOptional:false
	InstanceID              TUUID            // IsOptional:true
	TransitionOperation     TStrongReference // IsOptional:false
	CutPoint                TPositionType    // IsOptional:false

}

func (g *GTransitionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTStrongReference(g.TransitionOperation)
	result = append(result, []byte{24, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 2, 5, 0, 0}, []byte{24, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPositionType(g.CutPoint)
	result = append(result, []byte{24, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 7, 2, 1, 3, 1, 6, 0, 0}, []byte{24, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 23, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GContentStorage = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.05010000": {UL: "Packages", Length: 0, Decode: DecodeTPackageStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.05020000": {UL: "EssenceDataObjects", Length: 0, Decode: DecodeTEssenceDataStrongReferenceSet},
}

type GContentStorageStruct struct {
	InstanceID TUUID                      // IsOptional:true
	Packages   TPackageStrongReferenceSet // IsOptional:false

}

func (g *GContentStorageStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPackageStrongReferenceSet(g.Packages)
	result = append(result, []byte{25, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 5, 1, 0, 0}, []byte{25, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 24, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GControlPoint = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.0530050d.00000000": {UL: "ControlPointValue", Length: 0, Decode: DecodeTany},
	"urn:smpte:ul:060e2b34.01010102.07020103.10020100": {UL: "ControlPointTime", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010102.05300508.00000000": {UL: "EditHint", Length: 1, Decode: DecodeTEditHintType},
}

type GControlPointStruct struct {
	InstanceID        TUUID     // IsOptional:true
	ControlPointValue any       // IsOptional:false
	ControlPointTime  TRational // IsOptional:false

}

func (g *GControlPointStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTany(g.ControlPointValue)
	result = append(result, []byte{26, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 5, 48, 5, 13, 0, 0, 0, 0}, []byte{26, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.ControlPointTime)
	result = append(result, []byte{26, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 7, 2, 1, 3, 16, 2, 1, 0}, []byte{26, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 25, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDefinitionObject = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.01011503.00000000": {UL: "DefinitionObjectIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.01070102.03010000": {UL: "DefinitionObjectName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.03020301.02010000": {UL: "DefinitionObjectDescription", Length: 0, Decode: DecodeTUTF16String},
}

type GDefinitionObjectStruct struct {
	InstanceID                     TUUID        // IsOptional:true
	DefinitionObjectIdentification TAUID        // IsOptional:false
	DefinitionObjectName           TUTF16String // IsOptional:false

}

func (g *GDefinitionObjectStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.DefinitionObjectIdentification)
	result = append(result, []byte{27, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 1, 21, 3, 0, 0, 0, 0}, []byte{27, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.DefinitionObjectName)
	result = append(result, []byte{27, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 7, 1, 2, 3, 1, 0, 0}, []byte{27, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 26, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDataDefinition = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.01011503.00000000": {UL: "DefinitionObjectIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.01070102.03010000": {UL: "DefinitionObjectName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.03020301.02010000": {UL: "DefinitionObjectDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GDataDefinitionStruct struct {
	DefinitionObjectIdentification TAUID        // IsOptional:false
	DefinitionObjectName           TUTF16String // IsOptional:false
	InstanceID                     TUUID        // IsOptional:true

}

func (g *GDataDefinitionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.DefinitionObjectIdentification)
	result = append(result, []byte{27, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 1, 21, 3, 0, 0, 0, 0}, []byte{27, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.DefinitionObjectName)
	result = append(result, []byte{27, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 7, 1, 2, 3, 1, 0, 0}, []byte{27, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 27, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GOperationDefinition = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.01011503.00000000": {UL: "DefinitionObjectIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.01070102.03010000": {UL: "DefinitionObjectName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.03020301.02010000": {UL: "DefinitionObjectDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.05300509.00000000": {UL: "OperationDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.05300503.00000000": {UL: "IsTimeWarp", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010102.06010104.04010000": {UL: "DegradeTo", Length: 0, Decode: DecodeTOperationDefinitionWeakReferenceVector},
	"urn:smpte:ul:060e2b34.01010102.0530050a.00000000": {UL: "OperationCategory", Length: 16, Decode: DecodeTOperationCategoryType},
	"urn:smpte:ul:060e2b34.01010101.05300504.00000000": {UL: "OperationInputCount", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.05300505.00000000": {UL: "Bypass", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.03020000": {UL: "OperationParametersDefined", Length: 0, Decode: DecodeTParameterDefinitionWeakReferenceSet},
}

type GOperationDefinitionStruct struct {
	DefinitionObjectIdentification TAUID          // IsOptional:false
	DefinitionObjectName           TUTF16String   // IsOptional:false
	InstanceID                     TUUID          // IsOptional:true
	OperationDataDefinition        TWeakReference // IsOptional:false
	OperationInputCount            int32          // IsOptional:false

}

func (g *GOperationDefinitionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.DefinitionObjectIdentification)
	result = append(result, []byte{27, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 1, 21, 3, 0, 0, 0, 0}, []byte{27, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.DefinitionObjectName)
	result = append(result, []byte{27, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 7, 1, 2, 3, 1, 0, 0}, []byte{27, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.OperationDataDefinition)
	result = append(result, []byte{30, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 5, 48, 5, 9, 0, 0, 0, 0}, []byte{30, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTInt32(g.OperationInputCount)
	result = append(result, []byte{30, 7}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 5, 48, 5, 4, 0, 0, 0, 0}, []byte{30, 7})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 28, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GParameterDefinition = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.01011503.00000000": {UL: "DefinitionObjectIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.01070102.03010000": {UL: "DefinitionObjectName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.03020301.02010000": {UL: "DefinitionObjectDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.01060000": {UL: "ParameterType", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.0530050b.01000000": {UL: "ParameterDisplayUnits", Length: 0, Decode: DecodeTUTF16String},
}

type GParameterDefinitionStruct struct {
	DefinitionObjectIdentification TAUID          // IsOptional:false
	DefinitionObjectName           TUTF16String   // IsOptional:false
	InstanceID                     TUUID          // IsOptional:true
	ParameterType                  TWeakReference // IsOptional:false

}

func (g *GParameterDefinitionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.DefinitionObjectIdentification)
	result = append(result, []byte{27, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 1, 21, 3, 0, 0, 0, 0}, []byte{27, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.DefinitionObjectName)
	result = append(result, []byte{27, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 7, 1, 2, 3, 1, 0, 0}, []byte{27, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.ParameterType)
	result = append(result, []byte{31, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 1, 6, 0, 0}, []byte{31, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 29, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GPluginDefinition = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.01011503.00000000": {UL: "DefinitionObjectIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.01070102.03010000": {UL: "DefinitionObjectName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.03020301.02010000": {UL: "DefinitionObjectDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.05200901.00000000": {UL: "PluginCategory", Length: 16, Decode: DecodeTPluginCategoryType},
	"urn:smpte:ul:060e2b34.01010102.03030301.03000000": {UL: "PluginVersion", Length: 2, Decode: DecodeTVersionType},
	"urn:smpte:ul:060e2b34.01010102.03030301.02010000": {UL: "PluginVersionString", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.010a0101.01010000": {UL: "DeviceManufacturerName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010104.020b0000": {UL: "ManufacturerInfo", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010102.010a0101.03000000": {UL: "ManufacturerID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.05200902.00000000": {UL: "PluginPlatform", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.05200903.00000000": {UL: "MinPlatformVersion", Length: 2, Decode: DecodeTVersionType},
	"urn:smpte:ul:060e2b34.01010102.05200904.00000000": {UL: "MaxPlatformVersion", Length: 2, Decode: DecodeTVersionType},
	"urn:smpte:ul:060e2b34.01010102.05200905.00000000": {UL: "Engine", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.05200906.00000000": {UL: "MinEngineVersion", Length: 2, Decode: DecodeTVersionType},
	"urn:smpte:ul:060e2b34.01010102.05200907.00000000": {UL: "MaxEngineVersion", Length: 2, Decode: DecodeTVersionType},
	"urn:smpte:ul:060e2b34.01010102.05200908.00000000": {UL: "PluginAPI", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.05200909.00000000": {UL: "MinPluginAPI", Length: 2, Decode: DecodeTVersionType},
	"urn:smpte:ul:060e2b34.01010102.0520090a.00000000": {UL: "MaxPluginAPI", Length: 2, Decode: DecodeTVersionType},
	"urn:smpte:ul:060e2b34.01010102.0520090b.00000000": {UL: "SoftwareOnly", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010102.0520090c.00000000": {UL: "Accelerator", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010102.0520090d.00000000": {UL: "PluginLocators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010102.0520090e.00000000": {UL: "Authentication", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010102.0520090f.00000000": {UL: "ImplementedClass", Length: 16, Decode: DecodeTAUID},
}

type GPluginDefinitionStruct struct {
	DefinitionObjectIdentification TAUID               // IsOptional:false
	DefinitionObjectName           TUTF16String        // IsOptional:false
	InstanceID                     TUUID               // IsOptional:true
	PluginCategory                 TPluginCategoryType // IsOptional:false
	PluginVersion                  TVersionType        // IsOptional:false

}

func (g *GPluginDefinitionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.DefinitionObjectIdentification)
	result = append(result, []byte{27, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 1, 21, 3, 0, 0, 0, 0}, []byte{27, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.DefinitionObjectName)
	result = append(result, []byte{27, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 7, 1, 2, 3, 1, 0, 0}, []byte{27, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPluginCategoryType(g.PluginCategory)
	result = append(result, []byte{34, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 5, 32, 9, 1, 0, 0, 0, 0}, []byte{34, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTVersionType(g.PluginVersion)
	result = append(result, []byte{34, 4}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 3, 3, 1, 3, 0, 0, 0}, []byte{34, 4})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 30, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GCodecDefinition = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.01011503.00000000": {UL: "DefinitionObjectIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.01070102.03010000": {UL: "DefinitionObjectName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.03020301.02010000": {UL: "DefinitionObjectDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.01070000": {UL: "FileDescriptorClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.03010000": {UL: "CodecDataDefinitions", Length: 0, Decode: DecodeTDataDefinitionWeakReferenceVector},
}

type GCodecDefinitionStruct struct {
	DefinitionObjectIdentification TAUID                              // IsOptional:false
	DefinitionObjectName           TUTF16String                       // IsOptional:false
	InstanceID                     TUUID                              // IsOptional:true
	FileDescriptorClass            TWeakReference                     // IsOptional:false
	CodecDataDefinitions           TDataDefinitionWeakReferenceVector // IsOptional:false

}

func (g *GCodecDefinitionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.DefinitionObjectIdentification)
	result = append(result, []byte{27, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 1, 21, 3, 0, 0, 0, 0}, []byte{27, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.DefinitionObjectName)
	result = append(result, []byte{27, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 7, 1, 2, 3, 1, 0, 0}, []byte{27, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.FileDescriptorClass)
	result = append(result, []byte{35, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 1, 7, 0, 0}, []byte{35, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTDataDefinitionWeakReferenceVector(g.CodecDataDefinitions)
	result = append(result, []byte{35, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 3, 1, 0, 0}, []byte{35, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 31, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GContainerDefinition = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.01011503.00000000": {UL: "DefinitionObjectIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.01070102.03010000": {UL: "DefinitionObjectName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.03020301.02010000": {UL: "DefinitionObjectDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.03010201.03000000": {UL: "EssenceIsIdentified", Length: 1, Decode: DecodeTBoolean},
}

type GContainerDefinitionStruct struct {
	DefinitionObjectIdentification TAUID        // IsOptional:false
	DefinitionObjectName           TUTF16String // IsOptional:false
	InstanceID                     TUUID        // IsOptional:true

}

func (g *GContainerDefinitionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.DefinitionObjectIdentification)
	result = append(result, []byte{27, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 1, 21, 3, 0, 0, 0, 0}, []byte{27, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.DefinitionObjectName)
	result = append(result, []byte{27, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 7, 1, 2, 3, 1, 0, 0}, []byte{27, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 32, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GInterpolationDefinition = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.01011503.00000000": {UL: "DefinitionObjectIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.01070102.03010000": {UL: "DefinitionObjectName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.03020301.02010000": {UL: "DefinitionObjectDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GInterpolationDefinitionStruct struct {
	DefinitionObjectIdentification TAUID        // IsOptional:false
	DefinitionObjectName           TUTF16String // IsOptional:false
	InstanceID                     TUUID        // IsOptional:true

}

func (g *GInterpolationDefinitionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.DefinitionObjectIdentification)
	result = append(result, []byte{27, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 1, 21, 3, 0, 0, 0, 0}, []byte{27, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.DefinitionObjectName)
	result = append(result, []byte{27, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 7, 1, 2, 3, 1, 0, 0}, []byte{27, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 33, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDictionary = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.05030000": {UL: "OperationDefinitions", Length: 0, Decode: DecodeTOperationDefinitionStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.05040000": {UL: "ParameterDefinitions", Length: 0, Decode: DecodeTParameterDefinitionStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.05050000": {UL: "DataDefinitions", Length: 0, Decode: DecodeTDataDefinitionStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.05060000": {UL: "PluginDefinitions", Length: 0, Decode: DecodeTPluginDefinitionStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.05070000": {UL: "CodecDefinitions", Length: 0, Decode: DecodeTCodecDefinitionStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.05080000": {UL: "ContainerDefinitions", Length: 0, Decode: DecodeTContainerDefinitionStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.05090000": {UL: "InterpolationDefinitions", Length: 0, Decode: DecodeTInterpolationDefinitionStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010107.06010104.050a0000": {UL: "KLVDataDefinitions", Length: 0, Decode: DecodeTKLVDataDefinitionStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010107.06010104.050b0000": {UL: "TaggedValueDefinitions", Length: 0, Decode: DecodeTTaggedValueDefinitionStrongReferenceSet},
}

type GDictionaryStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GDictionaryStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 34, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GEssenceData = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010106.01000000": {UL: "LinkedPackageID", Length: 32, Decode: DecodeTPackageIDType},
	"urn:smpte:ul:060e2b34.01010102.04070200.00000000": {UL: "EssenceStream", Length: 0, Decode: DecodeTbyte},
	"urn:smpte:ul:060e2b34.01010102.06010102.01000000": {UL: "SampleIndex", Length: 0, Decode: DecodeTbyte},
	"urn:smpte:ul:060e2b34.01010104.01030404.00000000": {UL: "EssenceStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.01030405.00000000": {UL: "IndexStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04040504.00000000": {UL: "PrecedingIndexTable", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010e.04060207.00000000": {UL: "SingularPartitionUsage", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010e.04040505.00000000": {UL: "FollowingIndexTable", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010e.04040506.00000000": {UL: "IsSparse", Length: 1, Decode: DecodeTBoolean},
}

type GEssenceDataStruct struct {
	InstanceID      TUUID          // IsOptional:true
	LinkedPackageID TPackageIDType // IsOptional:false

}

func (g *GEssenceDataStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPackageIDType(g.LinkedPackageID)
	result = append(result, []byte{39, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 6, 1, 0, 0, 0}, []byte{39, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 35, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GEssenceDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
}

type GEssenceDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GEssenceDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 36, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GFileDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
}

type GFileDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GFileDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 37, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAIFCDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.03030302.02000000": {UL: "AIFCSummary", Length: 0, Decode: DecodeTDataValue},
}

type GAIFCDescriptorStruct struct {
	InstanceID  TUUID      // IsOptional:true
	AIFCSummary TDataValue // IsOptional:false

}

func (g *GAIFCDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTDataValue(g.AIFCSummary)
	result = append(result, []byte{49, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 3, 3, 2, 2, 0, 0, 0}, []byte{49, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 38, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GPictureDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.04010601.00000000": {UL: "PictureCompression", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.04010502.01000000": {UL: "StoredHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010502.02000000": {UL: "StoredWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.07000000": {UL: "SampledHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.08000000": {UL: "SampledWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.09000000": {UL: "SampledXOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0a000000": {UL: "SampledYOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0b000000": {UL: "DisplayHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0c000000": {UL: "DisplayWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0d000000": {UL: "DisplayXOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0e000000": {UL: "DisplayYOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010301.04000000": {UL: "FrameLayout", Length: 1, Decode: DecodeTLayoutType},
	"urn:smpte:ul:060e2b34.01010102.04010302.05000000": {UL: "VideoLineMap", Length: 0, Decode: DecodeTInt32Array},
	"urn:smpte:ul:060e2b34.01010101.04010101.01000000": {UL: "ImageAspectRatio", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010102.05200102.00000000": {UL: "AlphaTransparency", Length: 1, Decode: DecodeTAlphaTransparencyType},
	"urn:smpte:ul:060e2b34.01010102.04010201.01010200": {UL: "TransferCharacteristic", Length: 16, Decode: DecodeTTransferCharacteristicType},
	"urn:smpte:ul:060e2b34.01010109.04010201.01060100": {UL: "ColorPrimaries", Length: 16, Decode: DecodeTColorPrimariesType},
	"urn:smpte:ul:060e2b34.01010102.04010201.01030100": {UL: "CodingEquations", Length: 16, Decode: DecodeTCodingEquationsType},
	"urn:smpte:ul:060e2b34.01010102.04180101.00000000": {UL: "ImageAlignmentFactor", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04010301.06000000": {UL: "FieldDominance", Length: 1, Decode: DecodeTFieldNumber},
	"urn:smpte:ul:060e2b34.01010102.04180102.00000000": {UL: "ImageStartOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04180103.00000000": {UL: "ImageEndOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.04050113.00000000": {UL: "SignalStandard", Length: 1, Decode: DecodeTSignalStandardType},
	"urn:smpte:ul:060e2b34.01010105.04010302.08000000": {UL: "StoredF2Offset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010105.04010302.07000000": {UL: "DisplayF2Offset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010105.04010302.09000000": {UL: "ActiveFormatDescriptor", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010501.13000000": {UL: "ActiveHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010501.14000000": {UL: "ActiveWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010501.15000000": {UL: "ActiveXOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010501.16000000": {UL: "ActiveYOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010302.0b000000": {UL: "AlternativeCenterCuts", Length: 0, Decode: DecodeTAUIDSet},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01010000": {UL: "MasteringDisplayPrimaries", Length: 12, Decode: DecodeTThreeColorPrimaries},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01020000": {UL: "MasteringDisplayWhitePointChromaticity", Length: 4, Decode: DecodeTColorPrimary},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01030000": {UL: "MasteringDisplayMaximumLuminance", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01040000": {UL: "MasteringDisplayMinimumLuminance", Length: 4, Decode: DecodeTUInt32},
}

type GPictureDescriptorStruct struct {
	InstanceID       TUUID       // IsOptional:true
	StoredHeight     uint32      // IsOptional:false
	StoredWidth      uint32      // IsOptional:false
	FrameLayout      TLayoutType // IsOptional:false
	VideoLineMap     TInt32Array // IsOptional:false
	ImageAspectRatio TRational   // IsOptional:false

}

func (g *GPictureDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.StoredHeight)
	result = append(result, []byte{50, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 5, 2, 1, 0, 0, 0}, []byte{50, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.StoredWidth)
	result = append(result, []byte{50, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 5, 2, 2, 0, 0, 0}, []byte{50, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTLayoutType(g.FrameLayout)
	result = append(result, []byte{50, 12}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 3, 1, 4, 0, 0, 0}, []byte{50, 12})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTInt32Array(g.VideoLineMap)
	result = append(result, []byte{50, 13}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 1, 3, 2, 5, 0, 0, 0}, []byte{50, 13})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.ImageAspectRatio)
	result = append(result, []byte{50, 14}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 1, 1, 1, 0, 0, 0}, []byte{50, 14})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 39, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GCDCIDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04010601.00000000": {UL: "PictureCompression", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.04010502.01000000": {UL: "StoredHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010502.02000000": {UL: "StoredWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.07000000": {UL: "SampledHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.08000000": {UL: "SampledWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.09000000": {UL: "SampledXOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0a000000": {UL: "SampledYOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0b000000": {UL: "DisplayHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0c000000": {UL: "DisplayWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0d000000": {UL: "DisplayXOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0e000000": {UL: "DisplayYOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010301.04000000": {UL: "FrameLayout", Length: 1, Decode: DecodeTLayoutType},
	"urn:smpte:ul:060e2b34.01010102.04010302.05000000": {UL: "VideoLineMap", Length: 0, Decode: DecodeTInt32Array},
	"urn:smpte:ul:060e2b34.01010101.04010101.01000000": {UL: "ImageAspectRatio", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010102.05200102.00000000": {UL: "AlphaTransparency", Length: 1, Decode: DecodeTAlphaTransparencyType},
	"urn:smpte:ul:060e2b34.01010102.04010201.01010200": {UL: "TransferCharacteristic", Length: 16, Decode: DecodeTTransferCharacteristicType},
	"urn:smpte:ul:060e2b34.01010109.04010201.01060100": {UL: "ColorPrimaries", Length: 16, Decode: DecodeTColorPrimariesType},
	"urn:smpte:ul:060e2b34.01010102.04010201.01030100": {UL: "CodingEquations", Length: 16, Decode: DecodeTCodingEquationsType},
	"urn:smpte:ul:060e2b34.01010102.04180101.00000000": {UL: "ImageAlignmentFactor", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04010301.06000000": {UL: "FieldDominance", Length: 1, Decode: DecodeTFieldNumber},
	"urn:smpte:ul:060e2b34.01010102.04180102.00000000": {UL: "ImageStartOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04180103.00000000": {UL: "ImageEndOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.04050113.00000000": {UL: "SignalStandard", Length: 1, Decode: DecodeTSignalStandardType},
	"urn:smpte:ul:060e2b34.01010105.04010302.08000000": {UL: "StoredF2Offset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010105.04010302.07000000": {UL: "DisplayF2Offset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010105.04010302.09000000": {UL: "ActiveFormatDescriptor", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010501.13000000": {UL: "ActiveHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010501.14000000": {UL: "ActiveWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010501.15000000": {UL: "ActiveXOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010501.16000000": {UL: "ActiveYOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010302.0b000000": {UL: "AlternativeCenterCuts", Length: 0, Decode: DecodeTAUIDSet},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01010000": {UL: "MasteringDisplayPrimaries", Length: 12, Decode: DecodeTThreeColorPrimaries},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01020000": {UL: "MasteringDisplayWhitePointChromaticity", Length: 4, Decode: DecodeTColorPrimary},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01030000": {UL: "MasteringDisplayMaximumLuminance", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01040000": {UL: "MasteringDisplayMinimumLuminance", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.04010503.0a000000": {UL: "ComponentDepth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.05000000": {UL: "HorizontalSubsampling", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.06000000": {UL: "ColorSiting", Length: 1, Decode: DecodeTColorSitingType},
	"urn:smpte:ul:060e2b34.01010101.04010503.03000000": {UL: "BlackRefLevel", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010503.04000000": {UL: "WhiteRefLevel", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04010503.05000000": {UL: "ColorRange", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04180104.00000000": {UL: "PaddingBits", Length: 2, Decode: DecodeTInt16},
	"urn:smpte:ul:060e2b34.01010102.04010501.10000000": {UL: "VerticalSubsampling", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04010503.07000000": {UL: "AlphaSampleDepth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.03010201.0a000000": {UL: "ReversedByteOrder", Length: 1, Decode: DecodeTBoolean},
}

type GCDCIDescriptorStruct struct {
	StoredHeight          uint32      // IsOptional:false
	StoredWidth           uint32      // IsOptional:false
	FrameLayout           TLayoutType // IsOptional:false
	VideoLineMap          TInt32Array // IsOptional:false
	ImageAspectRatio      TRational   // IsOptional:false
	InstanceID            TUUID       // IsOptional:true
	ComponentDepth        uint32      // IsOptional:false
	HorizontalSubsampling uint32      // IsOptional:false

}

func (g *GCDCIDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.StoredHeight)
	result = append(result, []byte{50, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 5, 2, 1, 0, 0, 0}, []byte{50, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.StoredWidth)
	result = append(result, []byte{50, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 5, 2, 2, 0, 0, 0}, []byte{50, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTLayoutType(g.FrameLayout)
	result = append(result, []byte{50, 12}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 3, 1, 4, 0, 0, 0}, []byte{50, 12})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTInt32Array(g.VideoLineMap)
	result = append(result, []byte{50, 13}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 1, 3, 2, 5, 0, 0, 0}, []byte{50, 13})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.ImageAspectRatio)
	result = append(result, []byte{50, 14}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 1, 1, 1, 0, 0, 0}, []byte{50, 14})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.ComponentDepth)
	result = append(result, []byte{51, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 1, 5, 3, 10, 0, 0, 0}, []byte{51, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.HorizontalSubsampling)
	result = append(result, []byte{51, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 5, 1, 5, 0, 0, 0}, []byte{51, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 40, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GRGBADescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04010601.00000000": {UL: "PictureCompression", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.04010502.01000000": {UL: "StoredHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010502.02000000": {UL: "StoredWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.07000000": {UL: "SampledHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.08000000": {UL: "SampledWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.09000000": {UL: "SampledXOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0a000000": {UL: "SampledYOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0b000000": {UL: "DisplayHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0c000000": {UL: "DisplayWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0d000000": {UL: "DisplayXOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0e000000": {UL: "DisplayYOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010301.04000000": {UL: "FrameLayout", Length: 1, Decode: DecodeTLayoutType},
	"urn:smpte:ul:060e2b34.01010102.04010302.05000000": {UL: "VideoLineMap", Length: 0, Decode: DecodeTInt32Array},
	"urn:smpte:ul:060e2b34.01010101.04010101.01000000": {UL: "ImageAspectRatio", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010102.05200102.00000000": {UL: "AlphaTransparency", Length: 1, Decode: DecodeTAlphaTransparencyType},
	"urn:smpte:ul:060e2b34.01010102.04010201.01010200": {UL: "TransferCharacteristic", Length: 16, Decode: DecodeTTransferCharacteristicType},
	"urn:smpte:ul:060e2b34.01010109.04010201.01060100": {UL: "ColorPrimaries", Length: 16, Decode: DecodeTColorPrimariesType},
	"urn:smpte:ul:060e2b34.01010102.04010201.01030100": {UL: "CodingEquations", Length: 16, Decode: DecodeTCodingEquationsType},
	"urn:smpte:ul:060e2b34.01010102.04180101.00000000": {UL: "ImageAlignmentFactor", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04010301.06000000": {UL: "FieldDominance", Length: 1, Decode: DecodeTFieldNumber},
	"urn:smpte:ul:060e2b34.01010102.04180102.00000000": {UL: "ImageStartOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04180103.00000000": {UL: "ImageEndOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.04050113.00000000": {UL: "SignalStandard", Length: 1, Decode: DecodeTSignalStandardType},
	"urn:smpte:ul:060e2b34.01010105.04010302.08000000": {UL: "StoredF2Offset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010105.04010302.07000000": {UL: "DisplayF2Offset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010105.04010302.09000000": {UL: "ActiveFormatDescriptor", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010501.13000000": {UL: "ActiveHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010501.14000000": {UL: "ActiveWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010501.15000000": {UL: "ActiveXOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010501.16000000": {UL: "ActiveYOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010302.0b000000": {UL: "AlternativeCenterCuts", Length: 0, Decode: DecodeTAUIDSet},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01010000": {UL: "MasteringDisplayPrimaries", Length: 12, Decode: DecodeTThreeColorPrimaries},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01020000": {UL: "MasteringDisplayWhitePointChromaticity", Length: 4, Decode: DecodeTColorPrimary},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01030000": {UL: "MasteringDisplayMaximumLuminance", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01040000": {UL: "MasteringDisplayMinimumLuminance", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.04010503.06000000": {UL: "PixelLayout", Length: 16, Decode: DecodeTRGBALayout},
	"urn:smpte:ul:060e2b34.01010102.04010503.08000000": {UL: "Palette", Length: 0, Decode: DecodeTDataValue},
	"urn:smpte:ul:060e2b34.01010102.04010503.09000000": {UL: "PaletteLayout", Length: 16, Decode: DecodeTRGBALayout},
	"urn:smpte:ul:060e2b34.01010105.04010404.01000000": {UL: "ScanningDirection", Length: 1, Decode: DecodeTScanningDirectionType},
	"urn:smpte:ul:060e2b34.01010105.04010503.0b000000": {UL: "ComponentMaxRef", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.04010503.0c000000": {UL: "ComponentMinRef", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.04010503.0d000000": {UL: "AlphaMaxRef", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.04010503.0e000000": {UL: "AlphaMinRef", Length: 4, Decode: DecodeTUInt32},
}

type GRGBADescriptorStruct struct {
	StoredHeight     uint32      // IsOptional:false
	StoredWidth      uint32      // IsOptional:false
	FrameLayout      TLayoutType // IsOptional:false
	VideoLineMap     TInt32Array // IsOptional:false
	ImageAspectRatio TRational   // IsOptional:false
	InstanceID       TUUID       // IsOptional:true
	PixelLayout      TRGBALayout // IsOptional:false

}

func (g *GRGBADescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.StoredHeight)
	result = append(result, []byte{50, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 5, 2, 1, 0, 0, 0}, []byte{50, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.StoredWidth)
	result = append(result, []byte{50, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 5, 2, 2, 0, 0, 0}, []byte{50, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTLayoutType(g.FrameLayout)
	result = append(result, []byte{50, 12}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 3, 1, 4, 0, 0, 0}, []byte{50, 12})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTInt32Array(g.VideoLineMap)
	result = append(result, []byte{50, 13}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 1, 3, 2, 5, 0, 0, 0}, []byte{50, 13})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.ImageAspectRatio)
	result = append(result, []byte{50, 14}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 1, 1, 1, 0, 0, 0}, []byte{50, 14})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRGBALayout(g.PixelLayout)
	result = append(result, []byte{52, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 1, 5, 3, 6, 0, 0, 0}, []byte{52, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 41, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GHTMLDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GHTMLDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GHTMLDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 42, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTIFFDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.05020103.01010000": {UL: "IsUniform", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.06080201.00000000": {UL: "IsContiguous", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.04010302.03000000": {UL: "LeadingLines", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010302.04000000": {UL: "TrailingLines", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010102.05020103.01020000": {UL: "JPEGTableID", Length: 4, Decode: DecodeTJPEGTableIDType},
	"urn:smpte:ul:060e2b34.01010102.03030302.03000000": {UL: "TIFFSummary", Length: 0, Decode: DecodeTDataValue},
}

type GTIFFDescriptorStruct struct {
	InstanceID   TUUID      // IsOptional:true
	IsUniform    TBoolean   // IsOptional:false
	IsContiguous TBoolean   // IsOptional:false
	TIFFSummary  TDataValue // IsOptional:false

}

func (g *GTIFFDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTBoolean(g.IsUniform)
	result = append(result, []byte{55, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 5, 2, 1, 3, 1, 1, 0, 0}, []byte{55, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTBoolean(g.IsContiguous)
	result = append(result, []byte{55, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 6, 8, 2, 1, 0, 0, 0, 0}, []byte{55, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTDataValue(g.TIFFSummary)
	result = append(result, []byte{55, 6}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 3, 3, 2, 3, 0, 0, 0}, []byte{55, 6})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 43, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GWAVEDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.03030302.01000000": {UL: "WAVESummary", Length: 0, Decode: DecodeTDataValue},
}

type GWAVEDescriptorStruct struct {
	InstanceID  TUUID      // IsOptional:true
	WAVESummary TDataValue // IsOptional:false

}

func (g *GWAVEDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTDataValue(g.WAVESummary)
	result = append(result, []byte{56, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 3, 3, 2, 1, 0, 0, 0}, []byte{56, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 44, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GFilmDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.04100103.01080000": {UL: "FilmFormat", Length: 1, Decode: DecodeTFilmType},
	"urn:smpte:ul:060e2b34.01010102.04010802.03000000": {UL: "FrameRate", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04100103.01030000": {UL: "PerforationsPerFrame", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.01010102.04100103.02030000": {UL: "FilmAspectRatio", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010102.04100103.01060100": {UL: "FilmStockManufacturer", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.04100103.01050100": {UL: "FilmStockKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.04100103.01040100": {UL: "FilmFormatName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.04100103.01070100": {UL: "FilmBatchNumber", Length: 0, Decode: DecodeTUTF16String},
}

type GFilmDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GFilmDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 45, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTapeDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.04100101.01010000": {UL: "TapeFormFactor", Length: 1, Decode: DecodeTTapeCaseType},
	"urn:smpte:ul:060e2b34.01010102.04010401.01000000": {UL: "VideoSignal", Length: 1, Decode: DecodeTVideoSignalType},
	"urn:smpte:ul:060e2b34.01010102.0d010101.01010100": {UL: "TapeFormat", Length: 1, Decode: DecodeTTapeFormatType},
	"urn:smpte:ul:060e2b34.01010102.04100101.03000000": {UL: "TapeCapacity", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04100101.04010000": {UL: "TapeManufacturer", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.04100101.02010000": {UL: "TapeFormulation", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.04100101.06010000": {UL: "TapeBatchNumber", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.04100101.05010000": {UL: "TapeStock", Length: 0, Decode: DecodeTUTF16String},
}

type GTapeDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GTapeDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 46, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GPreface = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.03010201.02000000": {UL: "ByteOrder", Length: 2, Decode: DecodeTInt16},
	"urn:smpte:ul:060e2b34.01010102.07020110.02040000": {UL: "FileLastModified", Length: 8, Decode: DecodeTTimeStamp},
	"urn:smpte:ul:060e2b34.01010102.06010104.02010000": {UL: "ContentStorageObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.02020000": {UL: "Dictionary", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010102.03010201.05000000": {UL: "FormatVersion", Length: 2, Decode: DecodeTVersionType},
	"urn:smpte:ul:060e2b34.01010102.06010104.06040000": {UL: "IdentificationList", Length: 0, Decode: DecodeTIdentificationStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010102.03010201.04000000": {UL: "ObjectModelVersion", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06010104.01080000": {UL: "PrimaryPackage", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.01020203.00000000": {UL: "OperationalPattern", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010105.01020210.02010000": {UL: "EssenceContainers", Length: 0, Decode: DecodeTAUIDSet},
	"urn:smpte:ul:060e2b34.01010105.01020210.02020000": {UL: "DescriptiveSchemes", Length: 0, Decode: DecodeTAUIDSet},
	"urn:smpte:ul:060e2b34.0101010e.04040503.00000000": {UL: "IsRIPPresent", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d040101.40010100": {UL: "APP_VTRErrorCount", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.0d040101.40010200": {UL: "APP_PSEFailureCount", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.0d040101.40010300": {UL: "APP_DigiBetaDropoutCount", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.0d040101.40010400": {UL: "APP_TimecodeBreakCount", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.0d010801.01010000": {UL: "Specification_Identifiers", Length: 0, Decode: DecodeTAUIDSet},
	"urn:smpte:ul:060e2b34.0101010e.01020210.02040000": {UL: "ConformsToSpecifications", Length: 0, Decode: DecodeTAUIDSet},
}

type GPrefaceStruct struct {
	InstanceID           TUUID                                // IsOptional:true
	FileLastModified     TTimeStamp                           // IsOptional:false
	ContentStorageObject TStrongReference                     // IsOptional:false
	FormatVersion        TVersionType                         // IsOptional:false
	IdentificationList   TIdentificationStrongReferenceVector // IsOptional:false
	OperationalPattern   TAUID                                // IsOptional:false
	EssenceContainers    TAUIDSet                             // IsOptional:false
	DescriptiveSchemes   TAUIDSet                             // IsOptional:false

}

func (g *GPrefaceStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTTimeStamp(g.FileLastModified)
	result = append(result, []byte{59, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 7, 2, 1, 16, 2, 4, 0, 0}, []byte{59, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTStrongReference(g.ContentStorageObject)
	result = append(result, []byte{59, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 2, 1, 0, 0}, []byte{59, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTVersionType(g.FormatVersion)
	result = append(result, []byte{59, 5}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 1, 2, 1, 5, 0, 0, 0}, []byte{59, 5})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTIdentificationStrongReferenceVector(g.IdentificationList)
	result = append(result, []byte{59, 6}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 6, 4, 0, 0}, []byte{59, 6})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.OperationalPattern)
	result = append(result, []byte{59, 9}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 3, 0, 0, 0, 0}, []byte{59, 9})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUIDSet(g.EssenceContainers)
	result = append(result, []byte{59, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 16, 2, 1, 0, 0}, []byte{59, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUIDSet(g.DescriptiveSchemes)
	result = append(result, []byte{59, 11}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 16, 2, 2, 0, 0}, []byte{59, 11})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 47, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GIdentification = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.05200701.02010000": {UL: "ApplicationSupplierName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.05200701.03010000": {UL: "ApplicationName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.05200701.04000000": {UL: "ApplicationVersion", Length: 9, Decode: DecodeTProductVersionType},
	"urn:smpte:ul:060e2b34.01010102.05200701.05010000": {UL: "ApplicationVersionString", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.05200701.07000000": {UL: "ApplicationProductID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.07020110.02030000": {UL: "FileModificationDate", Length: 8, Decode: DecodeTTimeStamp},
	"urn:smpte:ul:060e2b34.01010102.05200701.0a000000": {UL: "ToolkitVersion", Length: 9, Decode: DecodeTProductVersionType},
	"urn:smpte:ul:060e2b34.01010102.05200701.06010000": {UL: "ApplicationPlatform", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.05200701.01000000": {UL: "GenerationID", Length: 16, Decode: DecodeTAUID},
}

type GIdentificationStruct struct {
	InstanceID               TUUID        // IsOptional:true
	ApplicationSupplierName  TUTF16String // IsOptional:false
	ApplicationName          TUTF16String // IsOptional:false
	ApplicationVersionString TUTF16String // IsOptional:false
	ApplicationProductID     TAUID        // IsOptional:false
	GenerationID             TAUID        // IsOptional:false

}

func (g *GIdentificationStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.ApplicationSupplierName)
	result = append(result, []byte{60, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 5, 32, 7, 1, 2, 1, 0, 0}, []byte{60, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.ApplicationName)
	result = append(result, []byte{60, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 5, 32, 7, 1, 3, 1, 0, 0}, []byte{60, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.ApplicationVersionString)
	result = append(result, []byte{60, 4}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 5, 32, 7, 1, 5, 1, 0, 0}, []byte{60, 4})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.ApplicationProductID)
	result = append(result, []byte{60, 5}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 5, 32, 7, 1, 7, 0, 0, 0}, []byte{60, 5})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.GenerationID)
	result = append(result, []byte{60, 9}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 5, 32, 7, 1, 1, 0, 0, 0}, []byte{60, 9})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 48, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GLocator = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GLocatorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GLocatorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 49, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GNetworkLocator = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.01020101.01000000": {UL: "URL", Length: 0, Decode: DecodeTUTF16String},
}

type GNetworkLocatorStruct struct {
	InstanceID TUUID        // IsOptional:true
	URL        TUTF16String // IsOptional:false

}

func (g *GNetworkLocatorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.URL)
	result = append(result, []byte{64, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 0}, []byte{64, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 50, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTextLocator = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.01040102.01000000": {UL: "LocationName", Length: 0, Decode: DecodeTUTF16String},
}

type GTextLocatorStruct struct {
	InstanceID   TUUID        // IsOptional:true
	LocationName TUTF16String // IsOptional:false

}

func (g *GTextLocatorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.LocationName)
	result = append(result, []byte{65, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 4, 1, 2, 1, 0, 0, 0}, []byte{65, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 51, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GPackage = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.01011510.00000000": {UL: "PackageID", Length: 32, Decode: DecodeTPackageIDType},
	"urn:smpte:ul:060e2b34.01010101.01030302.01000000": {UL: "PackageName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010104.06050000": {UL: "PackageTracks", Length: 0, Decode: DecodeTTrackStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010102.07020110.02050000": {UL: "PackageLastModified", Length: 8, Decode: DecodeTTimeStamp},
	"urn:smpte:ul:060e2b34.01010102.07020110.01030000": {UL: "CreationTime", Length: 8, Decode: DecodeTTimeStamp},
	"urn:smpte:ul:060e2b34.01010102.03020102.0c000000": {UL: "PackageUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010102.03010210.03000000": {UL: "PackageKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.07000000": {UL: "PackageAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.05010108.00000000": {UL: "PackageUsage", Length: 16, Decode: DecodeTUsageType},
}

type GPackageStruct struct {
	InstanceID          TUUID                       // IsOptional:true
	PackageID           TPackageIDType              // IsOptional:false
	PackageTracks       TTrackStrongReferenceVector // IsOptional:false
	PackageLastModified TTimeStamp                  // IsOptional:false
	CreationTime        TTimeStamp                  // IsOptional:false

}

func (g *GPackageStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPackageIDType(g.PackageID)
	result = append(result, []byte{68, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 16, 0, 0, 0, 0}, []byte{68, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTTrackStrongReferenceVector(g.PackageTracks)
	result = append(result, []byte{68, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 6, 5, 0, 0}, []byte{68, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTTimeStamp(g.PackageLastModified)
	result = append(result, []byte{68, 4}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 7, 2, 1, 16, 2, 5, 0, 0}, []byte{68, 4})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTTimeStamp(g.CreationTime)
	result = append(result, []byte{68, 5}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 7, 2, 1, 16, 1, 3, 0, 0}, []byte{68, 5})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 52, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GCompositionPackage = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011510.00000000": {UL: "PackageID", Length: 32, Decode: DecodeTPackageIDType},
	"urn:smpte:ul:060e2b34.01010101.01030302.01000000": {UL: "PackageName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010104.06050000": {UL: "PackageTracks", Length: 0, Decode: DecodeTTrackStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010102.07020110.02050000": {UL: "PackageLastModified", Length: 8, Decode: DecodeTTimeStamp},
	"urn:smpte:ul:060e2b34.01010102.07020110.01030000": {UL: "CreationTime", Length: 8, Decode: DecodeTTimeStamp},
	"urn:smpte:ul:060e2b34.01010102.03020102.0c000000": {UL: "PackageUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010102.03010210.03000000": {UL: "PackageKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.07000000": {UL: "PackageAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.05010108.00000000": {UL: "PackageUsage", Length: 16, Decode: DecodeTUsageType},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.07020201.01050100": {UL: "DefaultFadeLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010101.05300201.00000000": {UL: "DefaultFadeType", Length: 1, Decode: DecodeTFadeType},
	"urn:smpte:ul:060e2b34.01010102.05300403.00000000": {UL: "DefaultFadeEditUnit", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010108.06010104.010a0000": {UL: "CompositionRendering", Length: 32, Decode: DecodeTPackageIDType},
}

type GCompositionPackageStruct struct {
	PackageID           TPackageIDType              // IsOptional:false
	PackageTracks       TTrackStrongReferenceVector // IsOptional:false
	PackageLastModified TTimeStamp                  // IsOptional:false
	CreationTime        TTimeStamp                  // IsOptional:false
	InstanceID          TUUID                       // IsOptional:true

}

func (g *GCompositionPackageStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTPackageIDType(g.PackageID)
	result = append(result, []byte{68, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 16, 0, 0, 0, 0}, []byte{68, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTTrackStrongReferenceVector(g.PackageTracks)
	result = append(result, []byte{68, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 6, 5, 0, 0}, []byte{68, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTTimeStamp(g.PackageLastModified)
	result = append(result, []byte{68, 4}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 7, 2, 1, 16, 2, 5, 0, 0}, []byte{68, 4})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTTimeStamp(g.CreationTime)
	result = append(result, []byte{68, 5}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 7, 2, 1, 16, 1, 3, 0, 0}, []byte{68, 5})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 53, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GMaterialPackage = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011510.00000000": {UL: "PackageID", Length: 32, Decode: DecodeTPackageIDType},
	"urn:smpte:ul:060e2b34.01010101.01030302.01000000": {UL: "PackageName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010104.06050000": {UL: "PackageTracks", Length: 0, Decode: DecodeTTrackStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010102.07020110.02050000": {UL: "PackageLastModified", Length: 8, Decode: DecodeTTimeStamp},
	"urn:smpte:ul:060e2b34.01010102.07020110.01030000": {UL: "CreationTime", Length: 8, Decode: DecodeTTimeStamp},
	"urn:smpte:ul:060e2b34.01010102.03020102.0c000000": {UL: "PackageUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010102.03010210.03000000": {UL: "PackageKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.07000000": {UL: "PackageAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.05010108.00000000": {UL: "PackageUsage", Length: 16, Decode: DecodeTUsageType},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GMaterialPackageStruct struct {
	PackageID           TPackageIDType              // IsOptional:false
	PackageTracks       TTrackStrongReferenceVector // IsOptional:false
	PackageLastModified TTimeStamp                  // IsOptional:false
	CreationTime        TTimeStamp                  // IsOptional:false
	InstanceID          TUUID                       // IsOptional:true

}

func (g *GMaterialPackageStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTPackageIDType(g.PackageID)
	result = append(result, []byte{68, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 16, 0, 0, 0, 0}, []byte{68, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTTrackStrongReferenceVector(g.PackageTracks)
	result = append(result, []byte{68, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 6, 5, 0, 0}, []byte{68, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTTimeStamp(g.PackageLastModified)
	result = append(result, []byte{68, 4}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 7, 2, 1, 16, 2, 5, 0, 0}, []byte{68, 4})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTTimeStamp(g.CreationTime)
	result = append(result, []byte{68, 5}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 7, 2, 1, 16, 1, 3, 0, 0}, []byte{68, 5})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 54, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GSourcePackage = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011510.00000000": {UL: "PackageID", Length: 32, Decode: DecodeTPackageIDType},
	"urn:smpte:ul:060e2b34.01010101.01030302.01000000": {UL: "PackageName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010104.06050000": {UL: "PackageTracks", Length: 0, Decode: DecodeTTrackStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010102.07020110.02050000": {UL: "PackageLastModified", Length: 8, Decode: DecodeTTimeStamp},
	"urn:smpte:ul:060e2b34.01010102.07020110.01030000": {UL: "CreationTime", Length: 8, Decode: DecodeTTimeStamp},
	"urn:smpte:ul:060e2b34.01010102.03020102.0c000000": {UL: "PackageUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010102.03010210.03000000": {UL: "PackageKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.07000000": {UL: "PackageAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.05010108.00000000": {UL: "PackageUsage", Length: 16, Decode: DecodeTUsageType},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.02030000": {UL: "EssenceDescription", Length: 0, Decode: DecodeTStrongReference},
}

type GSourcePackageStruct struct {
	PackageID           TPackageIDType              // IsOptional:false
	PackageTracks       TTrackStrongReferenceVector // IsOptional:false
	PackageLastModified TTimeStamp                  // IsOptional:false
	CreationTime        TTimeStamp                  // IsOptional:false
	InstanceID          TUUID                       // IsOptional:true
	EssenceDescription  TStrongReference            // IsOptional:false

}

func (g *GSourcePackageStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTPackageIDType(g.PackageID)
	result = append(result, []byte{68, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 16, 0, 0, 0, 0}, []byte{68, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTTrackStrongReferenceVector(g.PackageTracks)
	result = append(result, []byte{68, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 6, 5, 0, 0}, []byte{68, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTTimeStamp(g.PackageLastModified)
	result = append(result, []byte{68, 4}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 7, 2, 1, 16, 2, 5, 0, 0}, []byte{68, 4})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTTimeStamp(g.CreationTime)
	result = append(result, []byte{68, 5}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 7, 2, 1, 16, 1, 3, 0, 0}, []byte{68, 5})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTStrongReference(g.EssenceDescription)
	result = append(result, []byte{71, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 2, 3, 0, 0}, []byte{71, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 55, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTrack = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.01070101.00000000": {UL: "TrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.01070102.01000000": {UL: "TrackName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010104.02040000": {UL: "TrackSegment", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010102.01040103.00000000": {UL: "EssenceTrackNumber", Length: 4, Decode: DecodeTUInt32},
}

type GTrackStruct struct {
	InstanceID         TUUID            // IsOptional:true
	TrackID            uint32           // IsOptional:false
	TrackSegment       TStrongReference // IsOptional:false
	EssenceTrackNumber uint32           // IsOptional:false

}

func (g *GTrackStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.TrackID)
	result = append(result, []byte{72, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 7, 1, 1, 0, 0, 0, 0}, []byte{72, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTStrongReference(g.TrackSegment)
	result = append(result, []byte{72, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 2, 4, 0, 0}, []byte{72, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceTrackNumber)
	result = append(result, []byte{72, 4}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 4, 1, 3, 0, 0, 0, 0}, []byte{72, 4})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 56, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GEventTrack = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.01070101.00000000": {UL: "TrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.01070102.01000000": {UL: "TrackName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010104.02040000": {UL: "TrackSegment", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010102.01040103.00000000": {UL: "EssenceTrackNumber", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.05300402.00000000": {UL: "EventTrackEditRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010105.07020103.010b0000": {UL: "EventTrackOrigin", Length: 8, Decode: DecodeTPositionType},
}

type GEventTrackStruct struct {
	TrackID            uint32           // IsOptional:false
	TrackSegment       TStrongReference // IsOptional:false
	EssenceTrackNumber uint32           // IsOptional:false
	InstanceID         TUUID            // IsOptional:true
	EventTrackEditRate TRational        // IsOptional:false

}

func (g *GEventTrackStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.TrackID)
	result = append(result, []byte{72, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 7, 1, 1, 0, 0, 0, 0}, []byte{72, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTStrongReference(g.TrackSegment)
	result = append(result, []byte{72, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 2, 4, 0, 0}, []byte{72, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceTrackNumber)
	result = append(result, []byte{72, 4}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 4, 1, 3, 0, 0, 0, 0}, []byte{72, 4})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.EventTrackEditRate)
	result = append(result, []byte{73, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 5, 48, 4, 2, 0, 0, 0, 0}, []byte{73, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 57, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GStaticTrack = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.01070101.00000000": {UL: "TrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.01070102.01000000": {UL: "TrackName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010104.02040000": {UL: "TrackSegment", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010102.01040103.00000000": {UL: "EssenceTrackNumber", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GStaticTrackStruct struct {
	TrackID            uint32           // IsOptional:false
	TrackSegment       TStrongReference // IsOptional:false
	EssenceTrackNumber uint32           // IsOptional:false
	InstanceID         TUUID            // IsOptional:true

}

func (g *GStaticTrackStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.TrackID)
	result = append(result, []byte{72, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 7, 1, 1, 0, 0, 0, 0}, []byte{72, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTStrongReference(g.TrackSegment)
	result = append(result, []byte{72, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 2, 4, 0, 0}, []byte{72, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceTrackNumber)
	result = append(result, []byte{72, 4}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 4, 1, 3, 0, 0, 0, 0}, []byte{72, 4})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 58, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTimelineTrack = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.01070101.00000000": {UL: "TrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.01070102.01000000": {UL: "TrackName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010104.02040000": {UL: "TrackSegment", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010102.01040103.00000000": {UL: "EssenceTrackNumber", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.05300405.00000000": {UL: "EditRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010102.07020103.01030000": {UL: "Origin", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.01010107.07020103.010c0000": {UL: "MarkIn", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.01010107.07020103.02030000": {UL: "MarkOut", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.01010107.07020103.010d0000": {UL: "UserPosition", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.0101010a.07020103.010e0000": {UL: "PackageMarkInPosition", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.0101010a.07020103.02040000": {UL: "PackageMarkOutPosition", Length: 8, Decode: DecodeTPositionType},
}

type GTimelineTrackStruct struct {
	TrackID            uint32           // IsOptional:false
	TrackSegment       TStrongReference // IsOptional:false
	EssenceTrackNumber uint32           // IsOptional:false
	InstanceID         TUUID            // IsOptional:true
	EditRate           TRational        // IsOptional:false
	Origin             TPositionType    // IsOptional:false

}

func (g *GTimelineTrackStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.TrackID)
	result = append(result, []byte{72, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 7, 1, 1, 0, 0, 0, 0}, []byte{72, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTStrongReference(g.TrackSegment)
	result = append(result, []byte{72, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 2, 4, 0, 0}, []byte{72, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceTrackNumber)
	result = append(result, []byte{72, 4}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 4, 1, 3, 0, 0, 0, 0}, []byte{72, 4})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.EditRate)
	result = append(result, []byte{75, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 5, 48, 4, 5, 0, 0, 0, 0}, []byte{75, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPositionType(g.Origin)
	result = append(result, []byte{75, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 7, 2, 1, 3, 1, 3, 0, 0}, []byte{75, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 59, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GParameter = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.01040000": {UL: "ParameterDefinitionReference", Length: 16, Decode: DecodeTAUID},
}

type GParameterStruct struct {
	InstanceID                   TUUID // IsOptional:true
	ParameterDefinitionReference TAUID // IsOptional:false

}

func (g *GParameterStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.ParameterDefinitionReference)
	result = append(result, []byte{76, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 1, 4, 0, 0}, []byte{76, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 60, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GConstantValue = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.06010104.01040000": {UL: "ParameterDefinitionReference", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.05300507.00000000": {UL: "Value", Length: 0, Decode: DecodeTany},
}

type GConstantValueStruct struct {
	ParameterDefinitionReference TAUID // IsOptional:false
	InstanceID                   TUUID // IsOptional:true
	Value                        any   // IsOptional:false

}

func (g *GConstantValueStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.ParameterDefinitionReference)
	result = append(result, []byte{76, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 1, 4, 0, 0}, []byte{76, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTany(g.Value)
	result = append(result, []byte{77, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 5, 48, 5, 7, 0, 0, 0, 0}, []byte{77, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 61, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GVaryingValue = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.06010104.01040000": {UL: "ParameterDefinitionReference", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010104.01050000": {UL: "Interpolation", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.06060000": {UL: "PointList", Length: 0, Decode: DecodeTControlPointStrongReferenceVector},
}

type GVaryingValueStruct struct {
	ParameterDefinitionReference TAUID                              // IsOptional:false
	InstanceID                   TUUID                              // IsOptional:true
	Interpolation                TWeakReference                     // IsOptional:false
	PointList                    TControlPointStrongReferenceVector // IsOptional:false

}

func (g *GVaryingValueStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.ParameterDefinitionReference)
	result = append(result, []byte{76, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 1, 4, 0, 0}, []byte{76, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.Interpolation)
	result = append(result, []byte{78, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 1, 5, 0, 0}, []byte{78, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTControlPointStrongReferenceVector(g.PointList)
	result = append(result, []byte{78, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 6, 6, 0, 0}, []byte{78, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 62, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTaggedValue = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.03020102.09010000": {UL: "Tag", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.03020102.0a010000": {UL: "IndirectValue", Length: 0, Decode: DecodeTany},
}

type GTaggedValueStruct struct {
	InstanceID    TUUID        // IsOptional:true
	Tag           TUTF16String // IsOptional:false
	IndirectValue any          // IsOptional:false

}

func (g *GTaggedValueStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.Tag)
	result = append(result, []byte{80, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 1, 2, 9, 1, 0, 0}, []byte{80, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTany(g.IndirectValue)
	result = append(result, []byte{80, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 1, 2, 10, 1, 0, 0}, []byte{80, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 63, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GKLVData = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.03010210.02000000": {UL: "KLVDataValue", Length: 0, Decode: DecodeTany},
}

type GKLVDataStruct struct {
	InstanceID   TUUID // IsOptional:true
	KLVDataValue any   // IsOptional:false

}

func (g *GKLVDataStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTany(g.KLVDataValue)
	result = append(result, []byte{81, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 1, 2, 16, 2, 0, 0, 0}, []byte{81, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 64, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDescriptiveMarker = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.06010104.020a0000": {UL: "AnnotationSource", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010102.07020103.03030000": {UL: "EventPosition", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.01010102.05300404.01000000": {UL: "EventComment", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010104.01070105.00000000": {UL: "DescribedTrackIDs", Length: 0, Decode: DecodeTUInt32Set},
	"urn:smpte:ul:060e2b34.01010105.06010104.020c0000": {UL: "DescriptiveFrameworkObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.0101010c.05200701.0e000000": {UL: "DescriptiveMetadataPlugInID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.0101010c.04060804.00000000": {UL: "DescriptiveMetadataScheme", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.05200701.10000000": {UL: "DescriptiveMetadataApplicationEnvironmentID", Length: 0, Decode: DecodeTUTF16String},
}

type GDescriptiveMarkerStruct struct {
	ComponentDataDefinition    TWeakReference   // IsOptional:false
	InstanceID                 TUUID            // IsOptional:true
	DescriptiveFrameworkObject TStrongReference // IsOptional:false

}

func (g *GDescriptiveMarkerStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTStrongReference(g.DescriptiveFrameworkObject)
	result = append(result, []byte{97, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 6, 1, 1, 4, 2, 12, 0, 0}, []byte{97, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 65, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GSoundDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.04020301.01010000": {UL: "AudioSampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010104.04020301.04000000": {UL: "Locked", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.04020101.03000000": {UL: "AudioReferenceLevelCHANGED", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.01010101.04020101.01000000": {UL: "ElectrospatialFormulation", Length: 1, Decode: DecodeTElectroSpatialFormulation},
	"urn:smpte:ul:060e2b34.01010105.04020101.04000000": {UL: "ChannelCount", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.04020303.04000000": {UL: "QuantizationBits", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.04020701.00000000": {UL: "DialNorm", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.01010102.04020402.00000000": {UL: "SoundCompression", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010e.04020101.07000000": {UL: "ReferenceAudioAlignmentLevel", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.0101010e.04020101.06000000": {UL: "ReferenceImageEditRate", Length: 8, Decode: DecodeTRational},
}

type GSoundDescriptorStruct struct {
	InstanceID       TUUID     // IsOptional:true
	AudioSampleRate  TRational // IsOptional:false
	ChannelCount     uint32    // IsOptional:false
	QuantizationBits uint32    // IsOptional:false

}

func (g *GSoundDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.AudioSampleRate)
	result = append(result, []byte{61, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 4, 2, 3, 1, 1, 1, 0, 0}, []byte{61, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.ChannelCount)
	result = append(result, []byte{61, 7}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 4, 2, 1, 1, 4, 0, 0, 0}, []byte{61, 7})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.QuantizationBits)
	result = append(result, []byte{61, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 2, 3, 3, 4, 0, 0, 0}, []byte{61, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 66, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDataEssenceDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010103.04030302.00000000": {UL: "DataEssenceCoding", Length: 16, Decode: DecodeTAUID},
}

type GDataEssenceDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GDataEssenceDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 67, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GMultipleDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010104.06010104.060b0000": {UL: "FileDescriptors", Length: 0, Decode: DecodeTFileDescriptorStrongReferenceVector},
}

type GMultipleDescriptorStruct struct {
	InstanceID      TUUID                                // IsOptional:true
	FileDescriptors TFileDescriptorStrongReferenceVector // IsOptional:false

}

func (g *GMultipleDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTFileDescriptorStrongReferenceVector(g.FileDescriptors)
	result = append(result, []byte{63, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 1, 1, 4, 6, 11, 0, 0}, []byte{63, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 68, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDescriptiveClip = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.07020103.01040000": {UL: "StartPosition", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.01010102.07020201.01050200": {UL: "FadeInLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010101.05300501.00000000": {UL: "FadeInType", Length: 1, Decode: DecodeTFadeType},
	"urn:smpte:ul:060e2b34.01010102.07020201.01050300": {UL: "FadeOutLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010101.05300502.00000000": {UL: "FadeOutType", Length: 1, Decode: DecodeTFadeType},
	"urn:smpte:ul:060e2b34.01010102.06010103.01000000": {UL: "SourcePackageID", Length: 32, Decode: DecodeTPackageIDType},
	"urn:smpte:ul:060e2b34.01010102.06010103.02000000": {UL: "SourceTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010107.06010103.07000000": {UL: "ChannelIDs", Length: 0, Decode: DecodeTUInt32Array},
	"urn:smpte:ul:060e2b34.01010108.06010103.08000000": {UL: "MonoSourceTrackIDs", Length: 0, Decode: DecodeTUInt32Array},
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.01070106.00000000": {UL: "DescriptiveClipDescribedTrackIDs", Length: 0, Decode: DecodeTUInt32Set},
}

type GDescriptiveClipStruct struct {
	StartPosition           TPositionType  // IsOptional:false
	SourcePackageID         TPackageIDType // IsOptional:false
	SourceTrackID           uint32         // IsOptional:false
	ComponentDataDefinition TWeakReference // IsOptional:false
	InstanceID              TUUID          // IsOptional:true

}

func (g *GDescriptiveClipStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTPositionType(g.StartPosition)
	result = append(result, []byte{18, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 7, 2, 1, 3, 1, 4, 0, 0}, []byte{18, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPackageIDType(g.SourcePackageID)
	result = append(result, []byte{17, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 3, 1, 0, 0, 0}, []byte{17, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.SourceTrackID)
	result = append(result, []byte{17, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 3, 2, 0, 0, 0}, []byte{17, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 69, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDateTimeDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.04040102.01000000": {UL: "DateTimeRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010105.04040102.02000000": {UL: "DateTimeDropFrame", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010105.04040102.03000000": {UL: "DateTimeEmbedded", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010105.04040102.04000000": {UL: "DateTimeKind", Length: 16, Decode: DecodeTAUID},
}

type GDateTimeDescriptorStruct struct {
	InstanceID   TUUID // IsOptional:true
	DateTimeKind TAUID // IsOptional:false

}

func (g *GDateTimeDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.DateTimeKind)
	result = append(result, []byte{53, 4}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 4, 4, 1, 2, 4, 0, 0, 0}, []byte{53, 4})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 70, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAES3PCMDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010105.04020302.01000000": {UL: "BlockAlign", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.04020302.02000000": {UL: "SequenceOffset", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.01010105.04020303.05000000": {UL: "AverageBytesPerSecond", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010107.04020101.05000000": {UL: "ChannelAssignment", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010108.04020301.06000000": {UL: "PeakEnvelopeVersion", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010108.04020301.07000000": {UL: "PeakEnvelopeFormat", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010108.04020301.08000000": {UL: "PointsPerPeakValue", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010108.04020301.09000000": {UL: "PeakEnvelopeBlockSize", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010108.04020301.0a000000": {UL: "PeakChannels", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010108.04020301.0b000000": {UL: "PeakFrames", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010108.04020301.0c000000": {UL: "PeakOfPeaksPosition", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.01010108.04020301.0d000000": {UL: "PeakEnvelopeTimestamp", Length: 8, Decode: DecodeTTimeStamp},
	"urn:smpte:ul:060e2b34.01010108.04020301.0e000000": {UL: "PeakEnvelopeData", Length: 0, Decode: DecodeTbyte},
	"urn:smpte:ul:060e2b34.01010105.04020301.01010000": {UL: "AudioSampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010104.04020301.04000000": {UL: "Locked", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.04020101.03000000": {UL: "AudioReferenceLevelCHANGED", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.01010101.04020101.01000000": {UL: "ElectrospatialFormulation", Length: 1, Decode: DecodeTElectroSpatialFormulation},
	"urn:smpte:ul:060e2b34.01010105.04020101.04000000": {UL: "ChannelCount", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.04020303.04000000": {UL: "QuantizationBits", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.04020701.00000000": {UL: "DialNorm", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.01010102.04020402.00000000": {UL: "SoundCompression", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010e.04020101.07000000": {UL: "ReferenceAudioAlignmentLevel", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.0101010e.04020101.06000000": {UL: "ReferenceImageEditRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.04020501.06000000": {UL: "Emphasis", Length: 1, Decode: DecodeTEmphasisType},
	"urn:smpte:ul:060e2b34.01010105.04020302.03000000": {UL: "BlockStartOffset", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.04020501.01000000": {UL: "AuxBitsMode", Length: 1, Decode: DecodeTAuxBitsModeType},
	"urn:smpte:ul:060e2b34.01010105.04020501.02000000": {UL: "ChannelStatusMode", Length: 0, Decode: DecodeTChannelStatusModeArray},
	"urn:smpte:ul:060e2b34.01010105.04020501.03000000": {UL: "FixedChannelStatusData", Length: 0, Decode: DecodeTUInt8Array},
	"urn:smpte:ul:060e2b34.01010105.04020501.04000000": {UL: "UserDataMode", Length: 0, Decode: DecodeTUserDataModeArray},
	"urn:smpte:ul:060e2b34.01010105.04020501.05000000": {UL: "FixedUserData", Length: 0, Decode: DecodeTUInt8Array},
}

type GAES3PCMDescriptorStruct struct {
	BlockAlign            uint16    // IsOptional:false
	AverageBytesPerSecond uint32    // IsOptional:false
	AudioSampleRate       TRational // IsOptional:false
	ChannelCount          uint32    // IsOptional:false
	QuantizationBits      uint32    // IsOptional:false
	InstanceID            TUUID     // IsOptional:true

}

func (g *GAES3PCMDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt16(g.BlockAlign)
	result = append(result, []byte{61, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 4, 2, 3, 2, 1, 0, 0, 0}, []byte{61, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.AverageBytesPerSecond)
	result = append(result, []byte{61, 9}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 4, 2, 3, 3, 5, 0, 0, 0}, []byte{61, 9})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.AudioSampleRate)
	result = append(result, []byte{61, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 4, 2, 3, 1, 1, 1, 0, 0}, []byte{61, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.ChannelCount)
	result = append(result, []byte{61, 7}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 4, 2, 1, 1, 4, 0, 0, 0}, []byte{61, 7})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.QuantizationBits)
	result = append(result, []byte{61, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 2, 3, 3, 4, 0, 0, 0}, []byte{61, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 71, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GWAVEPCMDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010105.04020301.01010000": {UL: "AudioSampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010104.04020301.04000000": {UL: "Locked", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.04020101.03000000": {UL: "AudioReferenceLevelCHANGED", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.01010101.04020101.01000000": {UL: "ElectrospatialFormulation", Length: 1, Decode: DecodeTElectroSpatialFormulation},
	"urn:smpte:ul:060e2b34.01010105.04020101.04000000": {UL: "ChannelCount", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.04020303.04000000": {UL: "QuantizationBits", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.04020701.00000000": {UL: "DialNorm", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.01010102.04020402.00000000": {UL: "SoundCompression", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010e.04020101.07000000": {UL: "ReferenceAudioAlignmentLevel", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.0101010e.04020101.06000000": {UL: "ReferenceImageEditRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.04020302.01000000": {UL: "BlockAlign", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.04020302.02000000": {UL: "SequenceOffset", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.01010105.04020303.05000000": {UL: "AverageBytesPerSecond", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010107.04020101.05000000": {UL: "ChannelAssignment", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010108.04020301.06000000": {UL: "PeakEnvelopeVersion", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010108.04020301.07000000": {UL: "PeakEnvelopeFormat", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010108.04020301.08000000": {UL: "PointsPerPeakValue", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010108.04020301.09000000": {UL: "PeakEnvelopeBlockSize", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010108.04020301.0a000000": {UL: "PeakChannels", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010108.04020301.0b000000": {UL: "PeakFrames", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010108.04020301.0c000000": {UL: "PeakOfPeaksPosition", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.01010108.04020301.0d000000": {UL: "PeakEnvelopeTimestamp", Length: 8, Decode: DecodeTTimeStamp},
	"urn:smpte:ul:060e2b34.01010108.04020301.0e000000": {UL: "PeakEnvelopeData", Length: 0, Decode: DecodeTbyte},
}

type GWAVEPCMDescriptorStruct struct {
	AudioSampleRate       TRational // IsOptional:false
	ChannelCount          uint32    // IsOptional:false
	QuantizationBits      uint32    // IsOptional:false
	InstanceID            TUUID     // IsOptional:true
	BlockAlign            uint16    // IsOptional:false
	AverageBytesPerSecond uint32    // IsOptional:false

}

func (g *GWAVEPCMDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTRational(g.AudioSampleRate)
	result = append(result, []byte{61, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 4, 2, 3, 1, 1, 1, 0, 0}, []byte{61, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.ChannelCount)
	result = append(result, []byte{61, 7}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 4, 2, 1, 1, 4, 0, 0, 0}, []byte{61, 7})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.QuantizationBits)
	result = append(result, []byte{61, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 2, 3, 3, 4, 0, 0, 0}, []byte{61, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.BlockAlign)
	result = append(result, []byte{61, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 4, 2, 3, 2, 1, 0, 0, 0}, []byte{61, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.AverageBytesPerSecond)
	result = append(result, []byte{61, 9}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 4, 2, 3, 3, 5, 0, 0, 0}, []byte{61, 9})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 72, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GPhysicalDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GPhysicalDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GPhysicalDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 73, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GImportDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GImportDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GImportDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 74, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GRecordingDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GRecordingDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GRecordingDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 75, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTaggedValueDefinition = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.01011503.00000000": {UL: "DefinitionObjectIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.01070102.03010000": {UL: "DefinitionObjectName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.03020301.02010000": {UL: "DefinitionObjectDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010107.06010104.03050000": {UL: "TaggedValueParentProperties", Length: 0, Decode: DecodeTPropertyDefinitionWeakReferenceSet},
}

type GTaggedValueDefinitionStruct struct {
	DefinitionObjectIdentification TAUID                               // IsOptional:false
	DefinitionObjectName           TUTF16String                        // IsOptional:false
	InstanceID                     TUUID                               // IsOptional:true
	TaggedValueParentProperties    TPropertyDefinitionWeakReferenceSet // IsOptional:false

}

func (g *GTaggedValueDefinitionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.DefinitionObjectIdentification)
	result = append(result, []byte{27, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 1, 21, 3, 0, 0, 0, 0}, []byte{27, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.DefinitionObjectName)
	result = append(result, []byte{27, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 7, 1, 2, 3, 1, 0, 0}, []byte{27, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPropertyDefinitionWeakReferenceSet(g.TaggedValueParentProperties)
	result = append(result, []byte{76, 17}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 7, 6, 1, 1, 4, 3, 5, 0, 0}, []byte{76, 17})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 76, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GKLVDataDefinition = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.01011503.00000000": {UL: "DefinitionObjectIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.01070102.03010000": {UL: "DefinitionObjectName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.03020301.02010000": {UL: "DefinitionObjectDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010107.06010104.03040000": {UL: "KLVDataParentProperties", Length: 0, Decode: DecodeTPropertyDefinitionWeakReferenceSet},
	"urn:smpte:ul:060e2b34.01010107.06010104.01090000": {UL: "KLVDataType", Length: 0, Decode: DecodeTWeakReference},
}

type GKLVDataDefinitionStruct struct {
	DefinitionObjectIdentification TAUID                               // IsOptional:false
	DefinitionObjectName           TUTF16String                        // IsOptional:false
	InstanceID                     TUUID                               // IsOptional:true
	KLVDataParentProperties        TPropertyDefinitionWeakReferenceSet // IsOptional:false

}

func (g *GKLVDataDefinitionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.DefinitionObjectIdentification)
	result = append(result, []byte{27, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 1, 21, 3, 0, 0, 0, 0}, []byte{27, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.DefinitionObjectName)
	result = append(result, []byte{27, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 7, 1, 2, 3, 1, 0, 0}, []byte{27, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPropertyDefinitionWeakReferenceSet(g.KLVDataParentProperties)
	result = append(result, []byte{77, 17}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 7, 6, 1, 1, 4, 3, 4, 0, 0}, []byte{77, 17})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 77, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAuxiliaryDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010107.04090201.00000000": {UL: "MIMEType", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010108.04090300.00000000": {UL: "CharSet", Length: 0, Decode: DecodeTUTF16String},
}

type GAuxiliaryDescriptorStruct struct {
	InstanceID TUUID        // IsOptional:true
	MIMEType   TUTF16String // IsOptional:false

}

func (g *GAuxiliaryDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MIMEType)
	result = append(result, []byte{78, 17}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 7, 4, 9, 2, 1, 0, 0, 0, 0}, []byte{78, 17})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 78, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GRIFFChunk = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010108.04060802.00000000": {UL: "ChunkID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010108.04060903.00000000": {UL: "ChunkLength", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010108.04070400.00000000": {UL: "ChunkData", Length: 0, Decode: DecodeTbyte},
}

type GRIFFChunkStruct struct {
	InstanceID  TUUID  // IsOptional:true
	ChunkID     uint32 // IsOptional:false
	ChunkLength uint32 // IsOptional:false
	ChunkData   byte   // IsOptional:false

}

func (g *GRIFFChunkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.ChunkID)
	result = append(result, []byte{79, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 8, 4, 6, 8, 2, 0, 0, 0, 0}, []byte{79, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.ChunkLength)
	result = append(result, []byte{79, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 8, 4, 6, 9, 3, 0, 0, 0, 0}, []byte{79, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTbyte(g.ChunkData)
	result = append(result, []byte{79, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 8, 4, 7, 4, 0, 0, 0, 0, 0}, []byte{79, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 79, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GBWFImportDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.04020302.05000000": {UL: "QltyFileSecurityReport", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.04020302.06000000": {UL: "QltyFileSecurityWave", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.04020502.01010000": {UL: "BextCodingHistory", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.04020502.02010000": {UL: "QltyBasicData", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.04020502.03010000": {UL: "QltyStartOfModulation", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.04020502.04010000": {UL: "QltyQualityEvent", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.04020502.05010000": {UL: "QltyEndOfModulation", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.04020502.06010000": {UL: "QltyQualityParameter", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.04020502.07010000": {UL: "QltyOperatorComment", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.04020502.08010000": {UL: "QltyCueSheet", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010108.06010104.060f0000": {UL: "UnknownBWFChunks", Length: 0, Decode: DecodeTRIFFChunkStrongReferenceVector},
}

type GBWFImportDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GBWFImportDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 80, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GMPEGVideoDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04010503.0a000000": {UL: "ComponentDepth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.05000000": {UL: "HorizontalSubsampling", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.06000000": {UL: "ColorSiting", Length: 1, Decode: DecodeTColorSitingType},
	"urn:smpte:ul:060e2b34.01010101.04010503.03000000": {UL: "BlackRefLevel", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010503.04000000": {UL: "WhiteRefLevel", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04010503.05000000": {UL: "ColorRange", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04180104.00000000": {UL: "PaddingBits", Length: 2, Decode: DecodeTInt16},
	"urn:smpte:ul:060e2b34.01010102.04010501.10000000": {UL: "VerticalSubsampling", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04010503.07000000": {UL: "AlphaSampleDepth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.03010201.0a000000": {UL: "ReversedByteOrder", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010102.04010601.00000000": {UL: "PictureCompression", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.04010502.01000000": {UL: "StoredHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010502.02000000": {UL: "StoredWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.07000000": {UL: "SampledHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.08000000": {UL: "SampledWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.09000000": {UL: "SampledXOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0a000000": {UL: "SampledYOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0b000000": {UL: "DisplayHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0c000000": {UL: "DisplayWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0d000000": {UL: "DisplayXOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0e000000": {UL: "DisplayYOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010301.04000000": {UL: "FrameLayout", Length: 1, Decode: DecodeTLayoutType},
	"urn:smpte:ul:060e2b34.01010102.04010302.05000000": {UL: "VideoLineMap", Length: 0, Decode: DecodeTInt32Array},
	"urn:smpte:ul:060e2b34.01010101.04010101.01000000": {UL: "ImageAspectRatio", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010102.05200102.00000000": {UL: "AlphaTransparency", Length: 1, Decode: DecodeTAlphaTransparencyType},
	"urn:smpte:ul:060e2b34.01010102.04010201.01010200": {UL: "TransferCharacteristic", Length: 16, Decode: DecodeTTransferCharacteristicType},
	"urn:smpte:ul:060e2b34.01010109.04010201.01060100": {UL: "ColorPrimaries", Length: 16, Decode: DecodeTColorPrimariesType},
	"urn:smpte:ul:060e2b34.01010102.04010201.01030100": {UL: "CodingEquations", Length: 16, Decode: DecodeTCodingEquationsType},
	"urn:smpte:ul:060e2b34.01010102.04180101.00000000": {UL: "ImageAlignmentFactor", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04010301.06000000": {UL: "FieldDominance", Length: 1, Decode: DecodeTFieldNumber},
	"urn:smpte:ul:060e2b34.01010102.04180102.00000000": {UL: "ImageStartOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04180103.00000000": {UL: "ImageEndOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.04050113.00000000": {UL: "SignalStandard", Length: 1, Decode: DecodeTSignalStandardType},
	"urn:smpte:ul:060e2b34.01010105.04010302.08000000": {UL: "StoredF2Offset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010105.04010302.07000000": {UL: "DisplayF2Offset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010105.04010302.09000000": {UL: "ActiveFormatDescriptor", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010501.13000000": {UL: "ActiveHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010501.14000000": {UL: "ActiveWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010501.15000000": {UL: "ActiveXOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010501.16000000": {UL: "ActiveYOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010302.0b000000": {UL: "AlternativeCenterCuts", Length: 0, Decode: DecodeTAUIDSet},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01010000": {UL: "MasteringDisplayPrimaries", Length: 12, Decode: DecodeTThreeColorPrimaries},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01020000": {UL: "MasteringDisplayWhitePointChromaticity", Length: 4, Decode: DecodeTColorPrimary},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01030000": {UL: "MasteringDisplayMaximumLuminance", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01040000": {UL: "MasteringDisplayMinimumLuminance", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.04010602.01020000": {UL: "SingleSequence", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010105.04010602.01030000": {UL: "ConstantBPictureCount", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010105.04010602.01040000": {UL: "CodedContentScanning", Length: 1, Decode: DecodeTContentScanningType},
	"urn:smpte:ul:060e2b34.01010105.04010602.01050000": {UL: "LowDelay", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010105.04010602.01060000": {UL: "ClosedGOP", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010105.04010602.01070000": {UL: "IdenticalGOP", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010105.04010602.01080000": {UL: "MaxGOP", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.04010602.01090000": {UL: "MaxBPictureCount", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.04010602.010b0000": {UL: "BitRate", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.04010602.010a0000": {UL: "ProfileAndLevel", Length: 1, Decode: DecodeTUInt8},
}

type GMPEGVideoDescriptorStruct struct {
	ComponentDepth        uint32      // IsOptional:false
	HorizontalSubsampling uint32      // IsOptional:false
	StoredHeight          uint32      // IsOptional:false
	StoredWidth           uint32      // IsOptional:false
	FrameLayout           TLayoutType // IsOptional:false
	VideoLineMap          TInt32Array // IsOptional:false
	ImageAspectRatio      TRational   // IsOptional:false
	InstanceID            TUUID       // IsOptional:true

}

func (g *GMPEGVideoDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ComponentDepth)
	result = append(result, []byte{51, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 1, 5, 3, 10, 0, 0, 0}, []byte{51, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.HorizontalSubsampling)
	result = append(result, []byte{51, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 5, 1, 5, 0, 0, 0}, []byte{51, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.StoredHeight)
	result = append(result, []byte{50, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 5, 2, 1, 0, 0, 0}, []byte{50, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.StoredWidth)
	result = append(result, []byte{50, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 5, 2, 2, 0, 0, 0}, []byte{50, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTLayoutType(g.FrameLayout)
	result = append(result, []byte{50, 12}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 3, 1, 4, 0, 0, 0}, []byte{50, 12})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTInt32Array(g.VideoLineMap)
	result = append(result, []byte{50, 13}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 1, 3, 2, 5, 0, 0, 0}, []byte{50, 13})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.ImageAspectRatio)
	result = append(result, []byte{50, 14}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 1, 1, 1, 0, 0, 0}, []byte{50, 14})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 81, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GParsedTextDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010103.04030302.00000000": {UL: "DataEssenceCoding", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010108.04090401.00000000": {UL: "MIMEEncoding", Length: 0, Decode: DecodeTUTF16String},
}

type GParsedTextDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GParsedTextDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 82, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GSGMLDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010108.04090401.00000000": {UL: "MIMEEncoding", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.04030302.00000000": {UL: "DataEssenceCoding", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GSGMLDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GSGMLDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 83, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GXMLDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010108.04090401.00000000": {UL: "MIMEEncoding", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.04030302.00000000": {UL: "DataEssenceCoding", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010108.01020104.01000000": {UL: "DefaultNamespaceURI", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010108.01020106.01000000": {UL: "NamespaceURIs", Length: 0, Decode: DecodeTUTF16StringArray},
	"urn:smpte:ul:060e2b34.01010108.01030606.01000000": {UL: "NamespacePrefixes", Length: 0, Decode: DecodeTUTF16StringArray},
}

type GXMLDescriptorStruct struct {
	InstanceID          TUUID        // IsOptional:true
	DefaultNamespaceURI TUTF16String // IsOptional:false

}

func (g *GXMLDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.DefaultNamespaceURI)
	result = append(result, []byte{84, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 8, 1, 2, 1, 4, 1, 0, 0, 0}, []byte{84, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 84, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GHTMLParsedTextDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010108.04090401.00000000": {UL: "MIMEEncoding", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.04030302.00000000": {UL: "DataEssenceCoding", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010108.01030604.01000000": {UL: "HTMLDOCTYPE", Length: 0, Decode: DecodeTUTF16String},
}

type GHTMLParsedTextDescriptorStruct struct {
	InstanceID  TUUID        // IsOptional:true
	HTMLDOCTYPE TUTF16String // IsOptional:false

}

func (g *GHTMLParsedTextDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.HTMLDOCTYPE)
	result = append(result, []byte{85, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 8, 1, 3, 6, 4, 1, 0, 0, 0}, []byte{85, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 85, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GRP217Descriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010103.04030302.00000000": {UL: "DataEssenceCoding", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010109.01030406.00000000": {UL: "RP217DataStreamPID", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010109.01030407.00000000": {UL: "RP217VideoStreamPID", Length: 2, Decode: DecodeTUInt16},
}

type GRP217DescriptorStruct struct {
	InstanceID          TUUID  // IsOptional:true
	RP217DataStreamPID  uint16 // IsOptional:false
	RP217VideoStreamPID uint16 // IsOptional:false

}

func (g *GRP217DescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.RP217DataStreamPID)
	result = append(result, []byte{86, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 9, 1, 3, 4, 6, 0, 0, 0, 0}, []byte{86, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.RP217VideoStreamPID)
	result = append(result, []byte{86, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 9, 1, 3, 4, 7, 0, 0, 0, 0}, []byte{86, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 86, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDynamicMarker = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.01070105.00000000": {UL: "DescribedTrackIDs", Length: 0, Decode: DecodeTUInt32Set},
	"urn:smpte:ul:060e2b34.01010105.06010104.020c0000": {UL: "DescriptiveFrameworkObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.0101010c.05200701.0e000000": {UL: "DescriptiveMetadataPlugInID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.0101010c.04060804.00000000": {UL: "DescriptiveMetadataScheme", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.05200701.10000000": {UL: "DescriptiveMetadataApplicationEnvironmentID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010104.020a0000": {UL: "AnnotationSource", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010102.07020103.03030000": {UL: "EventPosition", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.01010102.05300404.01000000": {UL: "EventComment", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010109.07020501.00000000": {UL: "ToleranceMode", Length: 1, Decode: DecodeTToleranceModeType},
	"urn:smpte:ul:060e2b34.01010109.07020503.00000000": {UL: "ToleranceInterpolationMethod", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010109.07020502.00000000": {UL: "ToleranceWindow", Length: 0, Decode: DecodeTany},
}

type GDynamicMarkerStruct struct {
	DescriptiveFrameworkObject TStrongReference // IsOptional:false
	ComponentDataDefinition    TWeakReference   // IsOptional:false
	InstanceID                 TUUID            // IsOptional:true

}

func (g *GDynamicMarkerStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTStrongReference(g.DescriptiveFrameworkObject)
	result = append(result, []byte{97, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 6, 1, 1, 4, 2, 12, 0, 0}, []byte{97, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 87, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDynamicClip = map[string]Group{
	"urn:smpte:ul:060e2b34.01010109.07020501.00000000": {UL: "ToleranceMode", Length: 1, Decode: DecodeTToleranceModeType},
	"urn:smpte:ul:060e2b34.01010109.07020503.00000000": {UL: "ToleranceInterpolationMethod", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010109.07020502.00000000": {UL: "ToleranceWindow", Length: 0, Decode: DecodeTany},
	"urn:smpte:ul:060e2b34.01010104.01070105.00000000": {UL: "DescribedTrackIDs", Length: 0, Decode: DecodeTUInt32Set},
	"urn:smpte:ul:060e2b34.01010105.06010104.020c0000": {UL: "DescriptiveFrameworkObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.0101010c.05200701.0e000000": {UL: "DescriptiveMetadataPlugInID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.0101010c.04060804.00000000": {UL: "DescriptiveMetadataScheme", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.05200701.10000000": {UL: "DescriptiveMetadataApplicationEnvironmentID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010104.020a0000": {UL: "AnnotationSource", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010102.07020103.03030000": {UL: "EventPosition", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.01010102.05300404.01000000": {UL: "EventComment", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.04070100.00000000": {UL: "ComponentDataDefinition", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.07020201.01030000": {UL: "ComponentLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.03010210.04000000": {UL: "ComponentKLVData", Length: 0, Decode: DecodeTKLVDataStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03020102.16000000": {UL: "ComponentUserComments", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.03010210.08000000": {UL: "ComponentAttributes", Length: 0, Decode: DecodeTTaggedValueStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010109.06010103.09000000": {UL: "DynamicSourcePackageID", Length: 32, Decode: DecodeTPackageIDType},
	"urn:smpte:ul:060e2b34.01010109.06010103.0a000000": {UL: "DynamicSourceTrackIDs", Length: 0, Decode: DecodeTUInt32Array},
	"urn:smpte:ul:060e2b34.01010109.06010103.0b000000": {UL: "SourceIndex", Length: 0, Decode: DecodeTany},
	"urn:smpte:ul:060e2b34.01010109.06010103.0c000000": {UL: "SourceSpecies", Length: 0, Decode: DecodeTany},
}

type GDynamicClipStruct struct {
	DescriptiveFrameworkObject TStrongReference // IsOptional:false
	ComponentDataDefinition    TWeakReference   // IsOptional:false
	InstanceID                 TUUID            // IsOptional:true
	DynamicSourcePackageID     TPackageIDType   // IsOptional:false

}

func (g *GDynamicClipStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTStrongReference(g.DescriptiveFrameworkObject)
	result = append(result, []byte{97, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 6, 1, 1, 4, 2, 12, 0, 0}, []byte{97, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.ComponentDataDefinition)
	result = append(result, []byte{2, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 7, 1, 0, 0, 0, 0, 0}, []byte{2, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPackageIDType(g.DynamicSourcePackageID)
	result = append(result, []byte{88, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 9, 6, 1, 1, 3, 9, 0, 0, 0}, []byte{88, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 88, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GSubDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 89, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GJPEG2000SubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010a.04010603.01000000": {UL: "Rsiz", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010a.04010603.02000000": {UL: "Xsiz", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010a.04010603.03000000": {UL: "Ysiz", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010a.04010603.04000000": {UL: "XOsiz", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010a.04010603.05000000": {UL: "YOsiz", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010a.04010603.06000000": {UL: "XTsiz", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010a.04010603.07000000": {UL: "YTsiz", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010a.04010603.08000000": {UL: "XTOsiz", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010a.04010603.09000000": {UL: "YTOsiz", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010a.04010603.0a000000": {UL: "Csiz", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010a.04010603.0b000000": {UL: "PictureComponentSizing", Length: 0, Decode: DecodeTJ2KComponentSizingArray},
	"urn:smpte:ul:060e2b34.0101010a.04010603.0c000000": {UL: "CodingStyleDefault", Length: 0, Decode: DecodeTDataValue},
	"urn:smpte:ul:060e2b34.0101010a.04010603.0d000000": {UL: "QuantizationDefault", Length: 0, Decode: DecodeTDataValue},
	"urn:smpte:ul:060e2b34.0101010e.04010603.0e000000": {UL: "J2CLayout", Length: 16, Decode: DecodeTRGBALayout},
	"urn:smpte:ul:060e2b34.0101010e.04010603.0f000000": {UL: "J2KExtendedCapabilities", Length: 4, Decode: DecodeTJ2KExtendedCapabilities},
	"urn:smpte:ul:060e2b34.0101010e.04010603.10000000": {UL: "J2KProfile", Length: 0, Decode: DecodeTUInt16Array},
	"urn:smpte:ul:060e2b34.0101010e.04010603.11000000": {UL: "J2KCorrespondingProfile", Length: 0, Decode: DecodeTUInt16Array},
}

type GJPEG2000SubDescriptorStruct struct {
	InstanceID             TUUID                    // IsOptional:true
	Rsiz                   uint16                   // IsOptional:false
	Xsiz                   uint32                   // IsOptional:false
	Ysiz                   uint32                   // IsOptional:false
	XOsiz                  uint32                   // IsOptional:false
	YOsiz                  uint32                   // IsOptional:false
	XTsiz                  uint32                   // IsOptional:false
	YTsiz                  uint32                   // IsOptional:false
	XTOsiz                 uint32                   // IsOptional:false
	YTOsiz                 uint32                   // IsOptional:false
	Csiz                   uint16                   // IsOptional:false
	PictureComponentSizing TJ2KComponentSizingArray // IsOptional:false

}

func (g *GJPEG2000SubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.Rsiz)
	code060e2b340101010a0401060301000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 10, 4, 1, 6, 3, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010a0401060301000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.Xsiz)
	code060e2b340101010a0401060302000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 10, 4, 1, 6, 3, 2, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010a0401060302000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.Ysiz)
	code060e2b340101010a0401060303000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 10, 4, 1, 6, 3, 3, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010a0401060303000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.XOsiz)
	code060e2b340101010a0401060304000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 10, 4, 1, 6, 3, 4, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010a0401060304000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.YOsiz)
	code060e2b340101010a0401060305000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 10, 4, 1, 6, 3, 5, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010a0401060305000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.XTsiz)
	code060e2b340101010a0401060306000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 10, 4, 1, 6, 3, 6, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010a0401060306000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.YTsiz)
	code060e2b340101010a0401060307000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 10, 4, 1, 6, 3, 7, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010a0401060307000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.XTOsiz)
	code060e2b340101010a0401060308000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 10, 4, 1, 6, 3, 8, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010a0401060308000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.YTOsiz)
	code060e2b340101010a0401060309000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 10, 4, 1, 6, 3, 9, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010a0401060309000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.Csiz)
	code060e2b340101010a040106030a000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 10, 4, 1, 6, 3, 10, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010a040106030a000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTJ2KComponentSizingArray(g.PictureComponentSizing)
	code060e2b340101010a040106030b000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 10, 4, 1, 6, 3, 11, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010a040106030b000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 90, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GVBIDataDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010103.04030302.00000000": {UL: "DataEssenceCoding", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GVBIDataDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GVBIDataDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 91, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GANCDataDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010103.04030302.00000000": {UL: "DataEssenceCoding", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GANCDataDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GANCDataDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 92, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDCPCMSoundDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010105.04020301.01010000": {UL: "AudioSampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010104.04020301.04000000": {UL: "Locked", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.04020101.03000000": {UL: "AudioReferenceLevelCHANGED", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.01010101.04020101.01000000": {UL: "ElectrospatialFormulation", Length: 1, Decode: DecodeTElectroSpatialFormulation},
	"urn:smpte:ul:060e2b34.01010105.04020101.04000000": {UL: "ChannelCount", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.04020303.04000000": {UL: "QuantizationBits", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.04020701.00000000": {UL: "DialNorm", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.01010102.04020402.00000000": {UL: "SoundCompression", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010e.04020101.07000000": {UL: "ReferenceAudioAlignmentLevel", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.0101010e.04020101.06000000": {UL: "ReferenceImageEditRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GDCPCMSoundDescriptorStruct struct {
	AudioSampleRate  TRational // IsOptional:false
	ChannelCount     uint32    // IsOptional:false
	QuantizationBits uint32    // IsOptional:false
	InstanceID       TUUID     // IsOptional:true

}

func (g *GDCPCMSoundDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTRational(g.AudioSampleRate)
	result = append(result, []byte{61, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 4, 2, 3, 1, 1, 1, 0, 0}, []byte{61, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.ChannelCount)
	result = append(result, []byte{61, 7}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 4, 2, 1, 1, 4, 0, 0, 0}, []byte{61, 7})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.QuantizationBits)
	result = append(result, []byte{61, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 2, 3, 3, 4, 0, 0, 0}, []byte{61, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 93, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GMPEGAudioDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010105.04020301.01010000": {UL: "AudioSampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010104.04020301.04000000": {UL: "Locked", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.04020101.03000000": {UL: "AudioReferenceLevelCHANGED", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.01010101.04020101.01000000": {UL: "ElectrospatialFormulation", Length: 1, Decode: DecodeTElectroSpatialFormulation},
	"urn:smpte:ul:060e2b34.01010105.04020101.04000000": {UL: "ChannelCount", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.04020303.04000000": {UL: "QuantizationBits", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.04020701.00000000": {UL: "DialNorm", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.01010102.04020402.00000000": {UL: "SoundCompression", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010e.04020101.07000000": {UL: "ReferenceAudioAlignmentLevel", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.0101010e.04020101.06000000": {UL: "ReferenceImageEditRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010a.04020403.01020000": {UL: "MPEGAudioBitRate", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04020403.01050000": {UL: "MPEGAudioChannelAssignment", Length: 16, Decode: DecodeTAUID},
}

type GMPEGAudioDescriptorStruct struct {
	AudioSampleRate  TRational // IsOptional:false
	ChannelCount     uint32    // IsOptional:false
	QuantizationBits uint32    // IsOptional:false
	InstanceID       TUUID     // IsOptional:true

}

func (g *GMPEGAudioDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTRational(g.AudioSampleRate)
	result = append(result, []byte{61, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 4, 2, 3, 1, 1, 1, 0, 0}, []byte{61, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.ChannelCount)
	result = append(result, []byte{61, 7}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 4, 2, 1, 1, 4, 0, 0, 0}, []byte{61, 7})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.QuantizationBits)
	result = append(result, []byte{61, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 2, 3, 3, 4, 0, 0, 0}, []byte{61, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 94, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GVC1VideoDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04010503.0a000000": {UL: "ComponentDepth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.05000000": {UL: "HorizontalSubsampling", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.06000000": {UL: "ColorSiting", Length: 1, Decode: DecodeTColorSitingType},
	"urn:smpte:ul:060e2b34.01010101.04010503.03000000": {UL: "BlackRefLevel", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010503.04000000": {UL: "WhiteRefLevel", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04010503.05000000": {UL: "ColorRange", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04180104.00000000": {UL: "PaddingBits", Length: 2, Decode: DecodeTInt16},
	"urn:smpte:ul:060e2b34.01010102.04010501.10000000": {UL: "VerticalSubsampling", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04010503.07000000": {UL: "AlphaSampleDepth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.03010201.0a000000": {UL: "ReversedByteOrder", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010102.04010601.00000000": {UL: "PictureCompression", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.04010502.01000000": {UL: "StoredHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010502.02000000": {UL: "StoredWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.07000000": {UL: "SampledHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.08000000": {UL: "SampledWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.09000000": {UL: "SampledXOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0a000000": {UL: "SampledYOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0b000000": {UL: "DisplayHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0c000000": {UL: "DisplayWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0d000000": {UL: "DisplayXOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0e000000": {UL: "DisplayYOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010301.04000000": {UL: "FrameLayout", Length: 1, Decode: DecodeTLayoutType},
	"urn:smpte:ul:060e2b34.01010102.04010302.05000000": {UL: "VideoLineMap", Length: 0, Decode: DecodeTInt32Array},
	"urn:smpte:ul:060e2b34.01010101.04010101.01000000": {UL: "ImageAspectRatio", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010102.05200102.00000000": {UL: "AlphaTransparency", Length: 1, Decode: DecodeTAlphaTransparencyType},
	"urn:smpte:ul:060e2b34.01010102.04010201.01010200": {UL: "TransferCharacteristic", Length: 16, Decode: DecodeTTransferCharacteristicType},
	"urn:smpte:ul:060e2b34.01010109.04010201.01060100": {UL: "ColorPrimaries", Length: 16, Decode: DecodeTColorPrimariesType},
	"urn:smpte:ul:060e2b34.01010102.04010201.01030100": {UL: "CodingEquations", Length: 16, Decode: DecodeTCodingEquationsType},
	"urn:smpte:ul:060e2b34.01010102.04180101.00000000": {UL: "ImageAlignmentFactor", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04010301.06000000": {UL: "FieldDominance", Length: 1, Decode: DecodeTFieldNumber},
	"urn:smpte:ul:060e2b34.01010102.04180102.00000000": {UL: "ImageStartOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04180103.00000000": {UL: "ImageEndOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.04050113.00000000": {UL: "SignalStandard", Length: 1, Decode: DecodeTSignalStandardType},
	"urn:smpte:ul:060e2b34.01010105.04010302.08000000": {UL: "StoredF2Offset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010105.04010302.07000000": {UL: "DisplayF2Offset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010105.04010302.09000000": {UL: "ActiveFormatDescriptor", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010501.13000000": {UL: "ActiveHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010501.14000000": {UL: "ActiveWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010501.15000000": {UL: "ActiveXOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010501.16000000": {UL: "ActiveYOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010302.0b000000": {UL: "AlternativeCenterCuts", Length: 0, Decode: DecodeTAUIDSet},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01010000": {UL: "MasteringDisplayPrimaries", Length: 12, Decode: DecodeTThreeColorPrimaries},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01020000": {UL: "MasteringDisplayWhitePointChromaticity", Length: 4, Decode: DecodeTColorPrimary},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01030000": {UL: "MasteringDisplayMaximumLuminance", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01040000": {UL: "MasteringDisplayMinimumLuminance", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010c.04010604.01000000": {UL: "VC1InitializationMetadata", Length: 0, Decode: DecodeTbyte},
	"urn:smpte:ul:060e2b34.0101010c.04010604.02000000": {UL: "VC1SingleSequence", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010c.04010604.03000000": {UL: "VC1CodedContentType", Length: 1, Decode: DecodeTContentScanningType},
	"urn:smpte:ul:060e2b34.0101010c.04010604.04000000": {UL: "VC1IdenticalGOP", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010c.04010604.05000000": {UL: "VC1MaxGOP", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010c.04010604.06000000": {UL: "VC1BPictureCount", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010c.04010604.07000000": {UL: "VC1AverageBitRate", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010c.04010604.08000000": {UL: "VC1MaximumBitRate", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010c.04010604.09000000": {UL: "VC1Profile", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010c.04010604.0a000000": {UL: "VC1Level", Length: 1, Decode: DecodeTUInt8},
}

type GVC1VideoDescriptorStruct struct {
	ComponentDepth        uint32      // IsOptional:false
	HorizontalSubsampling uint32      // IsOptional:false
	StoredHeight          uint32      // IsOptional:false
	StoredWidth           uint32      // IsOptional:false
	FrameLayout           TLayoutType // IsOptional:false
	VideoLineMap          TInt32Array // IsOptional:false
	ImageAspectRatio      TRational   // IsOptional:false
	InstanceID            TUUID       // IsOptional:true

}

func (g *GVC1VideoDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.ComponentDepth)
	result = append(result, []byte{51, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 1, 5, 3, 10, 0, 0, 0}, []byte{51, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.HorizontalSubsampling)
	result = append(result, []byte{51, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 5, 1, 5, 0, 0, 0}, []byte{51, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.StoredHeight)
	result = append(result, []byte{50, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 5, 2, 1, 0, 0, 0}, []byte{50, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.StoredWidth)
	result = append(result, []byte{50, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 5, 2, 2, 0, 0, 0}, []byte{50, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTLayoutType(g.FrameLayout)
	result = append(result, []byte{50, 12}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 3, 1, 4, 0, 0, 0}, []byte{50, 12})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTInt32Array(g.VideoLineMap)
	result = append(result, []byte{50, 13}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 1, 3, 2, 5, 0, 0, 0}, []byte{50, 13})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.ImageAspectRatio)
	result = append(result, []byte{50, 14}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 1, 1, 1, 0, 0, 0}, []byte{50, 14})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 95, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GPackageMarker = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GPackageMarkerStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GPackageMarkerStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 1, 1, 1, 1, 96, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GApplicationPlugInObject = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.06010104.010b0000": {UL: "BaseClass", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010c.05200701.0d000000": {UL: "ApplicationPluginInstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.0101010c.04060803.00000000": {UL: "ApplicationScheme", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.05200701.0f000000": {UL: "ApplicationEnvironmentID", Length: 0, Decode: DecodeTUTF16String},
}

type GApplicationPlugInObjectStruct struct {
	InstanceID                  TUUID // IsOptional:true
	ApplicationPluginInstanceID TUUID // IsOptional:false
	ApplicationScheme           TAUID // IsOptional:false

}

func (g *GApplicationPlugInObjectStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.ApplicationPluginInstanceID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 12, 5, 32, 7, 1, 13, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.ApplicationScheme)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 12, 4, 6, 8, 3, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 1, 1, 1, 1, 97, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GApplicationReferencedObject = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.06010104.010b0000": {UL: "BaseClass", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010c.05200701.0b000000": {UL: "LinkedApplicationPluginInstanceID", Length: 0, Decode: DecodeTWeakReference},
}

type GApplicationReferencedObjectStruct struct {
	InstanceID                        TUUID          // IsOptional:true
	LinkedApplicationPluginInstanceID TWeakReference // IsOptional:false

}

func (g *GApplicationReferencedObjectStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.LinkedApplicationPluginInstanceID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 12, 5, 32, 7, 1, 11, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 1, 1, 1, 1, 98, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GStereoscopicPictureSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GStereoscopicPictureSubDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GStereoscopicPictureSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 99, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDCTimedTextDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010103.04030302.00000000": {UL: "DataEssenceCoding", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010c.01011512.00000000": {UL: "ResourceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.0101010c.04090500.00000000": {UL: "UCSEncoding", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010108.01020105.01000000": {UL: "NamespaceURI", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.03010102.02160000": {UL: "RFC5646LanguageTagList", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.06010102.04000000": {UL: "DisplayType", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.06010102.05000000": {UL: "IntrinsicPictureResolution", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.06010102.06000000": {UL: "ZpositionInUse", Length: 1, Decode: DecodeTUInt8},
}

type GDCTimedTextDescriptorStruct struct {
	InstanceID   TUUID        // IsOptional:true
	ResourceID   TUUID        // IsOptional:false
	UCSEncoding  TUTF16String // IsOptional:false
	NamespaceURI TUTF16String // IsOptional:false

}

func (g *GDCTimedTextDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.ResourceID)
	code060e2b340101010c0101151200000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 12, 1, 1, 21, 18, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010c0101151200000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.UCSEncoding)
	code060e2b340101010c0409050000000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 12, 4, 9, 5, 0, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010c0409050000000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.NamespaceURI)
	code060e2b34010101080102010501000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 8, 1, 2, 1, 5, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101080102010501000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 100, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDCTimedTextResourceSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010c.01011513.00000000": {UL: "AncillaryResourceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010107.04090201.00000000": {UL: "MIMEType", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010104.01030404.00000000": {UL: "EssenceStreamID", Length: 4, Decode: DecodeTUInt32},
}

type GDCTimedTextResourceSubDescriptorStruct struct {
	InstanceID          TUUID        // IsOptional:true
	AncillaryResourceID TUUID        // IsOptional:false
	MIMEType            TUTF16String // IsOptional:false
	EssenceStreamID     uint32       // IsOptional:false

}

func (g *GDCTimedTextResourceSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.AncillaryResourceID)
	code060e2b340101010c0101151300000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 12, 1, 1, 21, 19, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010c0101151300000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MIMEType)
	code060e2b34010101070409020100000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 7, 4, 9, 2, 1, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101070409020100000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceStreamID)
	code060e2b34010101040103040400000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 4, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101040103040400000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 101, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GApplicationObject = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010c.06010104.010b0000": {UL: "BaseClass", Length: 16, Decode: DecodeTAUID},
}

type GApplicationObjectStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GApplicationObjectStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 102, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GContainerConstraintsSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GContainerConstraintsSubDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GContainerConstraintsSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 103, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GMPEG4VisualSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GMPEG4VisualSubDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GMPEG4VisualSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 104, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTIFFPictureEssenceDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.04010601.00000000": {UL: "PictureCompression", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.04010502.01000000": {UL: "StoredHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010502.02000000": {UL: "StoredWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.07000000": {UL: "SampledHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.08000000": {UL: "SampledWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.09000000": {UL: "SampledXOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0a000000": {UL: "SampledYOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0b000000": {UL: "DisplayHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0c000000": {UL: "DisplayWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0d000000": {UL: "DisplayXOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010501.0e000000": {UL: "DisplayYOffset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.04010301.04000000": {UL: "FrameLayout", Length: 1, Decode: DecodeTLayoutType},
	"urn:smpte:ul:060e2b34.01010102.04010302.05000000": {UL: "VideoLineMap", Length: 0, Decode: DecodeTInt32Array},
	"urn:smpte:ul:060e2b34.01010101.04010101.01000000": {UL: "ImageAspectRatio", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010102.05200102.00000000": {UL: "AlphaTransparency", Length: 1, Decode: DecodeTAlphaTransparencyType},
	"urn:smpte:ul:060e2b34.01010102.04010201.01010200": {UL: "TransferCharacteristic", Length: 16, Decode: DecodeTTransferCharacteristicType},
	"urn:smpte:ul:060e2b34.01010109.04010201.01060100": {UL: "ColorPrimaries", Length: 16, Decode: DecodeTColorPrimariesType},
	"urn:smpte:ul:060e2b34.01010102.04010201.01030100": {UL: "CodingEquations", Length: 16, Decode: DecodeTCodingEquationsType},
	"urn:smpte:ul:060e2b34.01010102.04180101.00000000": {UL: "ImageAlignmentFactor", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04010301.06000000": {UL: "FieldDominance", Length: 1, Decode: DecodeTFieldNumber},
	"urn:smpte:ul:060e2b34.01010102.04180102.00000000": {UL: "ImageStartOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.04180103.00000000": {UL: "ImageEndOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.04050113.00000000": {UL: "SignalStandard", Length: 1, Decode: DecodeTSignalStandardType},
	"urn:smpte:ul:060e2b34.01010105.04010302.08000000": {UL: "StoredF2Offset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010105.04010302.07000000": {UL: "DisplayF2Offset", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010105.04010302.09000000": {UL: "ActiveFormatDescriptor", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010501.13000000": {UL: "ActiveHeight", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010501.14000000": {UL: "ActiveWidth", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010501.15000000": {UL: "ActiveXOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010501.16000000": {UL: "ActiveYOffset", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010302.0b000000": {UL: "AlternativeCenterCuts", Length: 0, Decode: DecodeTAUIDSet},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01010000": {UL: "MasteringDisplayPrimaries", Length: 12, Decode: DecodeTThreeColorPrimaries},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01020000": {UL: "MasteringDisplayWhitePointChromaticity", Length: 4, Decode: DecodeTColorPrimary},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01030000": {UL: "MasteringDisplayMaximumLuminance", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04200401.01040000": {UL: "MasteringDisplayMinimumLuminance", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GTIFFPictureEssenceDescriptorStruct struct {
	StoredHeight     uint32      // IsOptional:false
	StoredWidth      uint32      // IsOptional:false
	FrameLayout      TLayoutType // IsOptional:false
	VideoLineMap     TInt32Array // IsOptional:false
	ImageAspectRatio TRational   // IsOptional:false
	InstanceID       TUUID       // IsOptional:true

}

func (g *GTIFFPictureEssenceDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.StoredHeight)
	result = append(result, []byte{50, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 5, 2, 1, 0, 0, 0}, []byte{50, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.StoredWidth)
	result = append(result, []byte{50, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 5, 2, 2, 0, 0, 0}, []byte{50, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTLayoutType(g.FrameLayout)
	result = append(result, []byte{50, 12}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 3, 1, 4, 0, 0, 0}, []byte{50, 12})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTInt32Array(g.VideoLineMap)
	result = append(result, []byte{50, 13}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 4, 1, 3, 2, 5, 0, 0, 0}, []byte{50, 13})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.ImageAspectRatio)
	result = append(result, []byte{50, 14}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 1, 1, 1, 1, 0, 0, 0}, []byte{50, 14})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 105, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GMCALabelSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010e.01030701.01000000": {UL: "MCALabelDictionaryID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010e.01030701.05000000": {UL: "MCALinkID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.0101010e.01030701.02000000": {UL: "MCATagSymbol", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01030701.03000000": {UL: "MCATagName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.0103040a.00000000": {UL: "MCAChannelID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.03010102.03150000": {UL: "RFC5646SpokenLanguage", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.0101010e.01051000.00000000": {UL: "MCATitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01051100.00000000": {UL: "MCATitleVersion", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01051200.00000000": {UL: "MCATitleSubVersion", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01051300.00000000": {UL: "MCAEpisode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01040105.00000000": {UL: "MCAPartitionKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01040106.00000000": {UL: "MCAPartitionNumber", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.03020102.20000000": {UL: "MCAAudioContentKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.03020102.21000000": {UL: "MCAAudioElementKind", Length: 0, Decode: DecodeTUTF16String},
}

type GMCALabelSubDescriptorStruct struct {
	InstanceID           TUUID        // IsOptional:true
	MCALabelDictionaryID TAUID        // IsOptional:false
	MCALinkID            TUUID        // IsOptional:false
	MCATagSymbol         TUTF16String // IsOptional:false

}

func (g *GMCALabelSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MCALabelDictionaryID)
	code060e2b340101010e0103070101000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 1, 3, 7, 1, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0103070101000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.MCALinkID)
	code060e2b340101010e0103070105000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 1, 3, 7, 1, 5, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0103070105000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MCATagSymbol)
	code060e2b340101010e0103070102000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 1, 3, 7, 1, 2, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0103070102000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 106, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAudioChannelLabelSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010e.01030701.01000000": {UL: "MCALabelDictionaryID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010e.01030701.05000000": {UL: "MCALinkID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.0101010e.01030701.02000000": {UL: "MCATagSymbol", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01030701.03000000": {UL: "MCATagName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.0103040a.00000000": {UL: "MCAChannelID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.03010102.03150000": {UL: "RFC5646SpokenLanguage", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.0101010e.01051000.00000000": {UL: "MCATitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01051100.00000000": {UL: "MCATitleVersion", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01051200.00000000": {UL: "MCATitleSubVersion", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01051300.00000000": {UL: "MCAEpisode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01040105.00000000": {UL: "MCAPartitionKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01040106.00000000": {UL: "MCAPartitionNumber", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.03020102.20000000": {UL: "MCAAudioContentKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.03020102.21000000": {UL: "MCAAudioElementKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010e.01030701.06000000": {UL: "SoundfieldGroupLinkID", Length: 16, Decode: DecodeTUUID},
}

type GAudioChannelLabelSubDescriptorStruct struct {
	MCALabelDictionaryID TAUID        // IsOptional:false
	MCALinkID            TUUID        // IsOptional:false
	MCATagSymbol         TUTF16String // IsOptional:false
	InstanceID           TUUID        // IsOptional:true

}

func (g *GAudioChannelLabelSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.MCALabelDictionaryID)
	code060e2b340101010e0103070101000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 1, 3, 7, 1, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0103070101000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.MCALinkID)
	code060e2b340101010e0103070105000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 1, 3, 7, 1, 5, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0103070105000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MCATagSymbol)
	code060e2b340101010e0103070102000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 1, 3, 7, 1, 2, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0103070102000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 107, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GSoundfieldGroupLabelSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010e.01030701.01000000": {UL: "MCALabelDictionaryID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010e.01030701.05000000": {UL: "MCALinkID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.0101010e.01030701.02000000": {UL: "MCATagSymbol", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01030701.03000000": {UL: "MCATagName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.0103040a.00000000": {UL: "MCAChannelID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.03010102.03150000": {UL: "RFC5646SpokenLanguage", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.0101010e.01051000.00000000": {UL: "MCATitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01051100.00000000": {UL: "MCATitleVersion", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01051200.00000000": {UL: "MCATitleSubVersion", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01051300.00000000": {UL: "MCAEpisode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01040105.00000000": {UL: "MCAPartitionKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01040106.00000000": {UL: "MCAPartitionNumber", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.03020102.20000000": {UL: "MCAAudioContentKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.03020102.21000000": {UL: "MCAAudioElementKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010e.01030701.04000000": {UL: "GroupOfSoundfieldGroupsLinkID", Length: 0, Decode: DecodeTUUIDArray},
}

type GSoundfieldGroupLabelSubDescriptorStruct struct {
	MCALabelDictionaryID TAUID        // IsOptional:false
	MCALinkID            TUUID        // IsOptional:false
	MCATagSymbol         TUTF16String // IsOptional:false
	InstanceID           TUUID        // IsOptional:true

}

func (g *GSoundfieldGroupLabelSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.MCALabelDictionaryID)
	code060e2b340101010e0103070101000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 1, 3, 7, 1, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0103070101000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.MCALinkID)
	code060e2b340101010e0103070105000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 1, 3, 7, 1, 5, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0103070105000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MCATagSymbol)
	code060e2b340101010e0103070102000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 1, 3, 7, 1, 2, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0103070102000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 108, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GGroupOfSoundfieldGroupsLabelSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010e.01030701.01000000": {UL: "MCALabelDictionaryID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010e.01030701.05000000": {UL: "MCALinkID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.0101010e.01030701.02000000": {UL: "MCATagSymbol", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01030701.03000000": {UL: "MCATagName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.0103040a.00000000": {UL: "MCAChannelID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.03010102.03150000": {UL: "RFC5646SpokenLanguage", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.0101010e.01051000.00000000": {UL: "MCATitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01051100.00000000": {UL: "MCATitleVersion", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01051200.00000000": {UL: "MCATitleSubVersion", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01051300.00000000": {UL: "MCAEpisode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01040105.00000000": {UL: "MCAPartitionKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01040106.00000000": {UL: "MCAPartitionNumber", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.03020102.20000000": {UL: "MCAAudioContentKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.03020102.21000000": {UL: "MCAAudioElementKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GGroupOfSoundfieldGroupsLabelSubDescriptorStruct struct {
	MCALabelDictionaryID TAUID        // IsOptional:false
	MCALinkID            TUUID        // IsOptional:false
	MCATagSymbol         TUTF16String // IsOptional:false
	InstanceID           TUUID        // IsOptional:true

}

func (g *GGroupOfSoundfieldGroupsLabelSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.MCALabelDictionaryID)
	code060e2b340101010e0103070101000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 1, 3, 7, 1, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0103070101000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.MCALinkID)
	code060e2b340101010e0103070105000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 1, 3, 7, 1, 5, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0103070105000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MCATagSymbol)
	code060e2b340101010e0103070102000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 1, 3, 7, 1, 2, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0103070102000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 109, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAVCSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010e.04010606.01030000": {UL: "AVCConstantBPictureFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010e.04010606.01040000": {UL: "AVCCodedContentKind", Length: 1, Decode: DecodeTAVCContentScanningType},
	"urn:smpte:ul:060e2b34.0101010e.04010606.01060000": {UL: "AVCClosedGOPIndicator", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010e.04010606.01070000": {UL: "AVCIdenticalGOPIndicator", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010e.04010606.01080000": {UL: "AVCMaximumGOPSize", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010e.04010606.01090000": {UL: "AVCMaximumBPictureCount", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010e.04010606.010a0000": {UL: "AVCProfile", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010606.010b0000": {UL: "AVCMaximumBitRate", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010606.010c0000": {UL: "AVCProfileConstraint", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010606.010d0000": {UL: "AVCLevel", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010606.010e0000": {UL: "AVCDecodingDelay", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010606.010f0000": {UL: "AVCMaximumRefFrames", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010606.01100000": {UL: "AVCSequenceParameterSetFlag", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010606.01110000": {UL: "AVCPictureParameterSetFlag", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010606.01140000": {UL: "AVCAverageBitRate", Length: 4, Decode: DecodeTUInt32},
}

type GAVCSubDescriptorStruct struct {
	InstanceID       TUUID // IsOptional:true
	AVCDecodingDelay uint8 // IsOptional:false

}

func (g *GAVCSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.AVCDecodingDelay)
	code060e2b340101010e04010606010e0000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 4, 1, 6, 6, 1, 14, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e04010606010e0000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 110, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GEventTextDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010103.04030302.00000000": {UL: "DataEssenceCoding", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010e.03020108.01000000": {UL: "EventTextKind", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010d.03010102.02150000": {UL: "EventTextLanguageCode", Length: 0, Decode: DecodeTUTF16String},
}

type GEventTextDescriptorStruct struct {
	InstanceID            TUUID        // IsOptional:true
	EventTextKind         TAUID        // IsOptional:false
	EventTextLanguageCode TUTF16String // IsOptional:false

}

func (g *GEventTextDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.EventTextKind)
	code060e2b340101010e0302010801000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 3, 2, 1, 8, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0302010801000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.EventTextLanguageCode)
	code060e2b340101010d0301010202150000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 3, 1, 1, 2, 2, 21, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0301010202150000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 111, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GSTLDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010e.03020108.01000000": {UL: "EventTextKind", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010d.03010102.02150000": {UL: "EventTextLanguageCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.04030302.00000000": {UL: "DataEssenceCoding", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010e.07020102.02020000": {UL: "STLReferencePointTimecode", Length: 8, Decode: DecodeTPositionType},
}

type GSTLDescriptorStruct struct {
	EventTextKind             TAUID         // IsOptional:false
	EventTextLanguageCode     TUTF16String  // IsOptional:false
	InstanceID                TUUID         // IsOptional:true
	STLReferencePointTimecode TPositionType // IsOptional:false

}

func (g *GSTLDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.EventTextKind)
	code060e2b340101010e0302010801000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 3, 2, 1, 8, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0302010801000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.EventTextLanguageCode)
	code060e2b340101010d0301010202150000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 3, 1, 1, 2, 2, 21, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0301010202150000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPositionType(g.STLReferencePointTimecode)
	code060e2b340101010e0702010202020000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 7, 2, 1, 2, 2, 2, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0702010202020000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 112, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GSTLSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010e.03020108.02000000": {UL: "STLLineNumber", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010d.03010102.02150000": {UL: "EventTextLanguageCode", Length: 0, Decode: DecodeTUTF16String},
}

type GSTLSubDescriptorStruct struct {
	InstanceID            TUUID        // IsOptional:true
	STLLineNumber         uint8        // IsOptional:false
	EventTextLanguageCode TUTF16String // IsOptional:false

}

func (g *GSTLSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.STLLineNumber)
	code060e2b340101010e0302010802000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 3, 2, 1, 8, 2, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0302010802000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.EventTextLanguageCode)
	code060e2b340101010d0301010202150000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 3, 1, 1, 2, 2, 21, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0301010202150000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 113, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GOperationsStereoscopicSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010e.01030703.01000000": {UL: "StereoscopicEyeID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010e.01030703.02000000": {UL: "StereoscopicDataEssenceCoding", Length: 16, Decode: DecodeTAUID},
}

type GOperationsStereoscopicSubDescriptorStruct struct {
	InstanceID        TUUID // IsOptional:true
	StereoscopicEyeID TAUID // IsOptional:false

}

func (g *GOperationsStereoscopicSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.StereoscopicEyeID)
	code060e2b340101010e0103070301000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 1, 3, 7, 3, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0103070301000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 114, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAuxDataEssenceDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010103.04030302.00000000": {UL: "DataEssenceCoding", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GAuxDataEssenceDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GAuxDataEssenceDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 115, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GVC2SubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010e.04010607.01000000": {UL: "VC2MajorVersion", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010607.02000000": {UL: "VC2MinorVersion", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010607.03000000": {UL: "VC2Profile", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010607.04000000": {UL: "VC2Level", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010607.05000000": {UL: "VC2WaveletFilters", Length: 0, Decode: DecodeTVC2WaveletArray},
	"urn:smpte:ul:060e2b34.0101010e.04010607.06000000": {UL: "VC2SequenceHeadersIdentical", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010e.04010607.07000000": {UL: "VC2EditUnitsAreCompleteSequences", Length: 1, Decode: DecodeTBoolean},
}

type GVC2SubDescriptorStruct struct {
	InstanceID      TUUID // IsOptional:true
	VC2MajorVersion uint8 // IsOptional:false
	VC2MinorVersion uint8 // IsOptional:false
	VC2Profile      uint8 // IsOptional:false
	VC2Level        uint8 // IsOptional:false

}

func (g *GVC2SubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.VC2MajorVersion)
	code060e2b340101010e0401060701000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 4, 1, 6, 7, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0401060701000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.VC2MinorVersion)
	code060e2b340101010e0401060702000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 4, 1, 6, 7, 2, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0401060702000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.VC2Profile)
	code060e2b340101010e0401060703000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 4, 1, 6, 7, 3, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0401060703000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.VC2Level)
	code060e2b340101010e0401060704000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 4, 1, 6, 7, 4, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0401060704000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 116, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDMCVTTargetSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010e.05310201.00000000": {UL: "DMCVTApplicationIdentifier", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310202.00000000": {UL: "DMCVTApplicationVersionNumber", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310203.00000000": {UL: "DMCVTBackwardsVersion", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310209.00000000": {UL: "DMCVTTargetedSystemDisplayPrimaries", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.0531020a.00000000": {UL: "DMCVTTargetedSystemDisplayWhitePointChromaticity", Length: 0, Decode: DecodeTRationalArray},
	"urn:smpte:ul:060e2b34.0101010e.0531020b.00000000": {UL: "DMCVTTargetedSystemDisplayMaximumLuminance", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.0531020c.00000000": {UL: "DMCVTTargetedSystemDisplayMinimumLuminance", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.0101010e.05310227.00000000": {UL: "DMCVTTargetedSystemDisplaySignalFormat", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.05310236.00000000": {UL: "DMCVTTargetedSystemDisplayActualPeakLuminance", Length: 0, Decode: DecodeTUInt8Array},
	"urn:smpte:ul:060e2b34.0101010e.05310237.00000000": {UL: "DMCVTRowsInTargetedSystemDisplayActualPeakLuminance", Length: 1, Decode: DecodeTUInt8},
}

type GDMCVTTargetSubDescriptorStruct struct {
	InstanceID                    TUUID // IsOptional:true
	DMCVTApplicationIdentifier    uint8 // IsOptional:false
	DMCVTApplicationVersionNumber uint8 // IsOptional:false

}

func (g *GDMCVTTargetSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.DMCVTApplicationIdentifier)
	code060e2b340101010e0531020100000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 2, 1, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0531020100000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.DMCVTApplicationVersionNumber)
	code060e2b340101010e0531020200000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 5, 49, 2, 2, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0531020200000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 117, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GVC5BayerPictureEssenceSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010e.04010608.02000000": {UL: "VC5BayerComponentPattern", Length: 16, Decode: DecodeTRGBALayout},
	"urn:smpte:ul:060e2b34.0101010e.04010608.03000000": {UL: "VC5BayerComponentBlackLevel", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010608.04000000": {UL: "VC5BayerComponentWhiteLevel", Length: 4, Decode: DecodeTUInt32},
}

type GVC5BayerPictureEssenceSubDescriptorStruct struct {
	InstanceID               TUUID       // IsOptional:true
	VC5BayerComponentPattern TRGBALayout // IsOptional:false

}

func (g *GVC5BayerPictureEssenceSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRGBALayout(g.VC5BayerComponentPattern)
	code060e2b340101010e0401060802000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 4, 1, 6, 8, 2, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0401060802000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 118, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GVC5CDCIPictureEssenceSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010e.04010608.01000000": {UL: "VC5AlphaSampling", Length: 2, Decode: DecodeTUInt16},
}

type GVC5CDCIPictureEssenceSubDescriptorStruct struct {
	InstanceID       TUUID  // IsOptional:true
	VC5AlphaSampling uint16 // IsOptional:false

}

func (g *GVC5CDCIPictureEssenceSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.VC5AlphaSampling)
	code060e2b340101010e0401060801000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 4, 1, 6, 8, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0401060801000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 119, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAACSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010e.04020403.01040000": {UL: "AACSamplingFrequency", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04020403.01030000": {UL: "AACChannelConfiguration", Length: 1, Decode: DecodeTUInt8},
}

type GAACSubDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GAACSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 120, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GACESPictureSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010e.0401060a.01000000": {UL: "ACESAuthoringInformation", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.0401060a.02000000": {UL: "ACESMasteringDisplayPrimaries", Length: 12, Decode: DecodeTThreeColorPrimaries},
	"urn:smpte:ul:060e2b34.0101010e.0401060a.03000000": {UL: "ACESMasteringDisplayWhitePointChromaticity", Length: 4, Decode: DecodeTColorPrimary},
	"urn:smpte:ul:060e2b34.0101010e.0401060a.04000000": {UL: "ACESMasteringDisplayMaximumLuminance", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.0401060a.05000000": {UL: "ACESMasteringDisplayMinimumLuminance", Length: 4, Decode: DecodeTUInt32},
}

type GACESPictureSubDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GACESPictureSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 121, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTargetFrameSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010e.04010609.01000000": {UL: "TargetFrameAncillaryResourceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.0101010e.04010609.02000000": {UL: "MediaType", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.04010609.03000000": {UL: "TargetFrameIndex", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.0101010e.04010609.04000000": {UL: "TargetFrameTransferCharacteristic", Length: 16, Decode: DecodeTTransferCharacteristicType},
	"urn:smpte:ul:060e2b34.0101010e.04010609.05000000": {UL: "TargetFrameColorPrimaries", Length: 16, Decode: DecodeTColorPrimariesType},
	"urn:smpte:ul:060e2b34.0101010e.04010609.06000000": {UL: "TargetFrameComponentMaxRef", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010609.07000000": {UL: "TargetFrameComponentMinRef", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010609.08000000": {UL: "TargetFrameEssenceStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010609.09000000": {UL: "ACESPictureSubDescriptorInstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.0101010e.04010609.0a000000": {UL: "TargetFrameViewingEnvironment", Length: 16, Decode: DecodeTViewingEnvironmentType},
}

type GTargetFrameSubDescriptorStruct struct {
	InstanceID                        TUUID                       // IsOptional:true
	TargetFrameAncillaryResourceID    TUUID                       // IsOptional:false
	MediaType                         TUTF16String                // IsOptional:false
	TargetFrameIndex                  uint64                      // IsOptional:false
	TargetFrameTransferCharacteristic TTransferCharacteristicType // IsOptional:false
	TargetFrameColorPrimaries         TColorPrimariesType         // IsOptional:false
	TargetFrameComponentMaxRef        uint32                      // IsOptional:false
	TargetFrameComponentMinRef        uint32                      // IsOptional:false
	TargetFrameEssenceStreamID        uint32                      // IsOptional:false

}

func (g *GTargetFrameSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.TargetFrameAncillaryResourceID)
	code060e2b340101010e0401060901000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 4, 1, 6, 9, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0401060901000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MediaType)
	code060e2b340101010e0401060902000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 4, 1, 6, 9, 2, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0401060902000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.TargetFrameIndex)
	code060e2b340101010e0401060903000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 4, 1, 6, 9, 3, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0401060903000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTTransferCharacteristicType(g.TargetFrameTransferCharacteristic)
	code060e2b340101010e0401060904000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 4, 1, 6, 9, 4, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0401060904000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTColorPrimariesType(g.TargetFrameColorPrimaries)
	code060e2b340101010e0401060905000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 4, 1, 6, 9, 5, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0401060905000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.TargetFrameComponentMaxRef)
	code060e2b340101010e0401060906000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 4, 1, 6, 9, 6, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0401060906000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.TargetFrameComponentMinRef)
	code060e2b340101010e0401060907000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 4, 1, 6, 9, 7, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0401060907000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.TargetFrameEssenceStreamID)
	code060e2b340101010e0401060908000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 4, 1, 6, 9, 8, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0401060908000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 122, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GIABEssenceDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010105.04020301.01010000": {UL: "AudioSampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010104.04020301.04000000": {UL: "Locked", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.04020101.03000000": {UL: "AudioReferenceLevelCHANGED", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.01010101.04020101.01000000": {UL: "ElectrospatialFormulation", Length: 1, Decode: DecodeTElectroSpatialFormulation},
	"urn:smpte:ul:060e2b34.01010105.04020101.04000000": {UL: "ChannelCount", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.04020303.04000000": {UL: "QuantizationBits", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.04020701.00000000": {UL: "DialNorm", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.01010102.04020402.00000000": {UL: "SoundCompression", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010e.04020101.07000000": {UL: "ReferenceAudioAlignmentLevel", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.0101010e.04020101.06000000": {UL: "ReferenceImageEditRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GIABEssenceDescriptorStruct struct {
	AudioSampleRate  TRational // IsOptional:false
	ChannelCount     uint32    // IsOptional:false
	QuantizationBits uint32    // IsOptional:false
	InstanceID       TUUID     // IsOptional:true

}

func (g *GIABEssenceDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTRational(g.AudioSampleRate)
	result = append(result, []byte{61, 3}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 4, 2, 3, 1, 1, 1, 0, 0}, []byte{61, 3})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.ChannelCount)
	result = append(result, []byte{61, 7}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 4, 2, 1, 1, 4, 0, 0, 0}, []byte{61, 7})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.QuantizationBits)
	result = append(result, []byte{61, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 2, 3, 3, 4, 0, 0, 0}, []byte{61, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 123, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GIABSoundfieldLabelSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010e.01030701.01000000": {UL: "MCALabelDictionaryID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010e.01030701.05000000": {UL: "MCALinkID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.0101010e.01030701.02000000": {UL: "MCATagSymbol", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01030701.03000000": {UL: "MCATagName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.0103040a.00000000": {UL: "MCAChannelID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.03010102.03150000": {UL: "RFC5646SpokenLanguage", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.0101010e.01051000.00000000": {UL: "MCATitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01051100.00000000": {UL: "MCATitleVersion", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01051200.00000000": {UL: "MCATitleSubVersion", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01051300.00000000": {UL: "MCAEpisode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01040105.00000000": {UL: "MCAPartitionKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.01040106.00000000": {UL: "MCAPartitionNumber", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.03020102.20000000": {UL: "MCAAudioContentKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010e.03020102.21000000": {UL: "MCAAudioElementKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GIABSoundfieldLabelSubDescriptorStruct struct {
	MCALabelDictionaryID TAUID        // IsOptional:false
	MCALinkID            TUUID        // IsOptional:false
	MCATagSymbol         TUTF16String // IsOptional:false
	InstanceID           TUUID        // IsOptional:true

}

func (g *GIABSoundfieldLabelSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.MCALabelDictionaryID)
	code060e2b340101010e0103070101000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 1, 3, 7, 1, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0103070101000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.MCALinkID)
	code060e2b340101010e0103070105000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 1, 3, 7, 1, 5, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0103070105000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MCATagSymbol)
	code060e2b340101010e0103070102000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 1, 3, 7, 1, 2, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0103070102000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 124, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GOPDefinition = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.01011503.00000000": {UL: "DefinitionObjectIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.01070102.03010000": {UL: "DefinitionObjectName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.03020301.02010000": {UL: "DefinitionObjectDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GOPDefinitionStruct struct {
	DefinitionObjectIdentification TAUID        // IsOptional:false
	DefinitionObjectName           TUTF16String // IsOptional:false
	InstanceID                     TUUID        // IsOptional:true

}

func (g *GOPDefinitionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.DefinitionObjectIdentification)
	result = append(result, []byte{27, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 1, 21, 3, 0, 0, 0, 0}, []byte{27, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.DefinitionObjectName)
	result = append(result, []byte{27, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 7, 1, 2, 3, 1, 0, 0}, []byte{27, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 125, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GCompressionDefinition = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.01011503.00000000": {UL: "DefinitionObjectIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.01070102.03010000": {UL: "DefinitionObjectName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.03020301.02010000": {UL: "DefinitionObjectDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GCompressionDefinitionStruct struct {
	DefinitionObjectIdentification TAUID        // IsOptional:false
	DefinitionObjectName           TUTF16String // IsOptional:false
	InstanceID                     TUUID        // IsOptional:true

}

func (g *GCompressionDefinitionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.DefinitionObjectIdentification)
	result = append(result, []byte{27, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 1, 21, 3, 0, 0, 0, 0}, []byte{27, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.DefinitionObjectName)
	result = append(result, []byte{27, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 7, 1, 2, 3, 1, 0, 0}, []byte{27, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 126, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAbstractObject = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
}

type GAbstractObjectStruct struct {
	InstanceID TUUID // IsOptional:false

}

func (g *GAbstractObjectStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 127, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GHEVCSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010e.04010606.02030000": {UL: "HEVCConstantBPictureFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010e.04010606.02040000": {UL: "HEVCCodedContentKind", Length: 1, Decode: DecodeTHEVCCodedContentType},
	"urn:smpte:ul:060e2b34.0101010e.04010606.02060000": {UL: "HEVCClosedGOPIndicator", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010e.04010606.02070000": {UL: "HEVCIdenticalGOPIndicator", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010e.04010606.02080000": {UL: "HEVCMaximumGOPSize", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010e.04010606.02090000": {UL: "HEVCMaximumBPictureCount", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010e.04010606.020a0000": {UL: "HEVCProfile", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010606.020b0000": {UL: "HEVCMaximumBitRate", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010606.020c0000": {UL: "HEVCProfileConstraint", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.0101010e.04010606.020d0000": {UL: "HEVCLevel", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010606.020e0000": {UL: "HEVCDecodingDelay", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010606.020f0000": {UL: "HEVCMaximumRefFrames", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010606.02100000": {UL: "HEVCSequenceParameterSetFlag", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010606.02110000": {UL: "HEVCPictureParameterSetFlag", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010606.02120000": {UL: "HEVCTier", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010606.02130000": {UL: "HEVCVideoParameterSetFlag", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010606.02140000": {UL: "HEVCAverageBitRate", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04010606.02150000": {UL: "HEVCCTUSize", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010606.02160000": {UL: "HEVCTileUniformSpacingFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010e.04010606.02170000": {UL: "HEVCTileColumnsMinus1", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010606.02180000": {UL: "HEVCTileRowsMinus1", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.0101010e.04010606.02190000": {UL: "HEVCTileWidthMinus1", Length: 0, Decode: DecodeTUInt16Array},
	"urn:smpte:ul:060e2b34.0101010e.04010606.021a0000": {UL: "HEVCTileHeightMinus1", Length: 0, Decode: DecodeTUInt16Array},
	"urn:smpte:ul:060e2b34.0101010e.04010606.021b0000": {UL: "HEVCNumberOfPPSs", Length: 1, Decode: DecodeTUInt8},
}

type GHEVCSubDescriptorStruct struct {
	InstanceID        TUUID // IsOptional:true
	HEVCDecodingDelay uint8 // IsOptional:false

}

func (g *GHEVCSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.HEVCDecodingDelay)
	code060e2b340101010e04010606020e0000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 4, 1, 6, 6, 2, 14, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e04010606020e0000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 1, 1, 129, 1}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GClassDefinition = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.01000000": {UL: "ParentClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010107.02000000": {UL: "Properties", Length: 0, Decode: DecodeTPropertyDefinitionStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010107.03000000": {UL: "IsConcrete", Length: 1, Decode: DecodeTBoolean},
}

type GClassDefinitionStruct struct {
	InstanceID                   TUUID          // IsOptional:true
	MetaDefinitionIdentification TAUID          // IsOptional:false
	MetaDefinitionName           TUTF16String   // IsOptional:false
	ParentClass                  TWeakReference // IsOptional:false
	IsConcrete                   TBoolean       // IsOptional:false

}

func (g *GClassDefinitionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.ParentClass)
	code060e2b34010101020601010701000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010701000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTBoolean(g.IsConcrete)
	code060e2b34010101020601010703000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 3, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010703000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 1, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GPropertyDefinition = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.04000000": {UL: "PropertyType", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03010202.01000000": {UL: "IsOptional", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010102.06010107.05000000": {UL: "LocalIdentification", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010102.06010107.06000000": {UL: "IsUniqueIdentifier", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010d.06010107.22000000": {UL: "MemberOf", Length: 0, Decode: DecodeTWeakReference},
}

type GPropertyDefinitionStruct struct {
	InstanceID                   TUUID        // IsOptional:true
	MetaDefinitionIdentification TAUID        // IsOptional:false
	MetaDefinitionName           TUTF16String // IsOptional:false
	PropertyType                 TAUID        // IsOptional:false
	IsOptional                   TBoolean     // IsOptional:false

}

func (g *GPropertyDefinitionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.PropertyType)
	code060e2b34010101020601010704000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 4, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010704000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTBoolean(g.IsOptional)
	code060e2b34010101020301020201000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 1, 2, 2, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020301020201000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 2, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTypeDefinition = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
}

type GTypeDefinitionStruct struct {
	InstanceID                   TUUID        // IsOptional:true
	MetaDefinitionIdentification TAUID        // IsOptional:false
	MetaDefinitionName           TUTF16String // IsOptional:false

}

func (g *GTypeDefinitionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 3, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTypeDefinitionInteger = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.03010203.01000000": {UL: "Size", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.01010102.03010203.02000000": {UL: "IsSigned", Length: 1, Decode: DecodeTBoolean},
}

type GTypeDefinitionIntegerStruct struct {
	InstanceID                   TUUID        // IsOptional:true
	MetaDefinitionIdentification TAUID        // IsOptional:false
	MetaDefinitionName           TUTF16String // IsOptional:false
	Size                         uint8        // IsOptional:false
	IsSigned                     TBoolean     // IsOptional:false

}

func (g *GTypeDefinitionIntegerStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt8(g.Size)
	code060e2b34010101020301020301000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 1, 2, 3, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020301020301000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTBoolean(g.IsSigned)
	code060e2b34010101020301020302000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 1, 2, 3, 2, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020301020302000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 4, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTypeDefinitionStrongObjectReference = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.09000000": {UL: "ReferencedType", Length: 0, Decode: DecodeTWeakReference},
}

type GTypeDefinitionStrongObjectReferenceStruct struct {
	InstanceID                   TUUID          // IsOptional:true
	MetaDefinitionIdentification TAUID          // IsOptional:false
	MetaDefinitionName           TUTF16String   // IsOptional:false
	ReferencedType               TWeakReference // IsOptional:false

}

func (g *GTypeDefinitionStrongObjectReferenceStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.ReferencedType)
	code060e2b34010101020601010709000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 9, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010709000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 5, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTypeDefinitionWeakObjectReference = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.0a000000": {UL: "WeakReferencedType", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.03010203.0b000000": {UL: "TargetSet", Length: 0, Decode: DecodeTAUIDArray},
}

type GTypeDefinitionWeakObjectReferenceStruct struct {
	InstanceID                   TUUID          // IsOptional:true
	MetaDefinitionIdentification TAUID          // IsOptional:false
	MetaDefinitionName           TUTF16String   // IsOptional:false
	WeakReferencedType           TWeakReference // IsOptional:false
	TargetSet                    TAUIDArray     // IsOptional:false

}

func (g *GTypeDefinitionWeakObjectReferenceStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.WeakReferencedType)
	code060e2b3401010102060101070a000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 10, 0, 0, 0}, []byte{})
	result = append(result, code060e2b3401010102060101070a000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUIDArray(g.TargetSet)
	code060e2b3401010102030102030b000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 1, 2, 3, 11, 0, 0, 0}, []byte{})
	result = append(result, code060e2b3401010102030102030b000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 6, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTypeDefinitionEnumeration = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.0b000000": {UL: "ElementType", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.03010203.04000000": {UL: "ElementNames", Length: 0, Decode: DecodeTUTF16StringArray},
	"urn:smpte:ul:060e2b34.01010102.03010203.05000000": {UL: "ElementValues", Length: 0, Decode: DecodeTInt64Array},
}

type GTypeDefinitionEnumerationStruct struct {
	InstanceID                   TUUID             // IsOptional:true
	MetaDefinitionIdentification TAUID             // IsOptional:false
	MetaDefinitionName           TUTF16String      // IsOptional:false
	ElementType                  TWeakReference    // IsOptional:false
	ElementNames                 TUTF16StringArray // IsOptional:false
	ElementValues                TInt64Array       // IsOptional:false

}

func (g *GTypeDefinitionEnumerationStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.ElementType)
	code060e2b3401010102060101070b000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 11, 0, 0, 0}, []byte{})
	result = append(result, code060e2b3401010102060101070b000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16StringArray(g.ElementNames)
	code060e2b34010101020301020304000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 1, 2, 3, 4, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020301020304000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTInt64Array(g.ElementValues)
	code060e2b34010101020301020305000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 1, 2, 3, 5, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020301020305000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 7, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTypeDefinitionFixedArray = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.0c000000": {UL: "FixedArrayElementType", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.03010203.03000000": {UL: "ElementCount", Length: 4, Decode: DecodeTUInt32},
}

type GTypeDefinitionFixedArrayStruct struct {
	InstanceID                   TUUID          // IsOptional:true
	MetaDefinitionIdentification TAUID          // IsOptional:false
	MetaDefinitionName           TUTF16String   // IsOptional:false
	FixedArrayElementType        TWeakReference // IsOptional:false
	ElementCount                 uint32         // IsOptional:false

}

func (g *GTypeDefinitionFixedArrayStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.FixedArrayElementType)
	code060e2b3401010102060101070c000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 12, 0, 0, 0}, []byte{})
	result = append(result, code060e2b3401010102060101070c000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.ElementCount)
	code060e2b34010101020301020303000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 1, 2, 3, 3, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020301020303000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 8, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTypeDefinitionVariableArray = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.0d000000": {UL: "VariableArrayElementType", Length: 0, Decode: DecodeTWeakReference},
}

type GTypeDefinitionVariableArrayStruct struct {
	InstanceID                   TUUID          // IsOptional:true
	MetaDefinitionIdentification TAUID          // IsOptional:false
	MetaDefinitionName           TUTF16String   // IsOptional:false
	VariableArrayElementType     TWeakReference // IsOptional:false

}

func (g *GTypeDefinitionVariableArrayStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.VariableArrayElementType)
	code060e2b3401010102060101070d000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 13, 0, 0, 0}, []byte{})
	result = append(result, code060e2b3401010102060101070d000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 9, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTypeDefinitionSet = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.0e000000": {UL: "SetElementType", Length: 0, Decode: DecodeTWeakReference},
}

type GTypeDefinitionSetStruct struct {
	InstanceID                   TUUID          // IsOptional:true
	MetaDefinitionIdentification TAUID          // IsOptional:false
	MetaDefinitionName           TUTF16String   // IsOptional:false
	SetElementType               TWeakReference // IsOptional:false

}

func (g *GTypeDefinitionSetStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.SetElementType)
	code060e2b3401010102060101070e000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 14, 0, 0, 0}, []byte{})
	result = append(result, code060e2b3401010102060101070e000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 10, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTypeDefinitionString = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.0f000000": {UL: "StringElementType", Length: 0, Decode: DecodeTWeakReference},
}

type GTypeDefinitionStringStruct struct {
	InstanceID                   TUUID          // IsOptional:true
	MetaDefinitionIdentification TAUID          // IsOptional:false
	MetaDefinitionName           TUTF16String   // IsOptional:false
	StringElementType            TWeakReference // IsOptional:false

}

func (g *GTypeDefinitionStringStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.StringElementType)
	code060e2b3401010102060101070f000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 15, 0, 0, 0}, []byte{})
	result = append(result, code060e2b3401010102060101070f000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 11, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTypeDefinitionStream = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
}

type GTypeDefinitionStreamStruct struct {
	InstanceID                   TUUID        // IsOptional:true
	MetaDefinitionIdentification TAUID        // IsOptional:false
	MetaDefinitionName           TUTF16String // IsOptional:false

}

func (g *GTypeDefinitionStreamStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 12, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTypeDefinitionRecord = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.11000000": {UL: "MemberTypes", Length: 0, Decode: DecodeTTypeDefinitionWeakReferenceVector},
	"urn:smpte:ul:060e2b34.01010102.03010203.06000000": {UL: "MemberNames", Length: 0, Decode: DecodeTUTF16StringArray},
}

type GTypeDefinitionRecordStruct struct {
	InstanceID                   TUUID                              // IsOptional:true
	MetaDefinitionIdentification TAUID                              // IsOptional:false
	MetaDefinitionName           TUTF16String                       // IsOptional:false
	MemberTypes                  TTypeDefinitionWeakReferenceVector // IsOptional:false
	MemberNames                  TUTF16StringArray                  // IsOptional:false

}

func (g *GTypeDefinitionRecordStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTTypeDefinitionWeakReferenceVector(g.MemberTypes)
	code060e2b34010101020601010711000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 17, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010711000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16StringArray(g.MemberNames)
	code060e2b34010101020301020306000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 1, 2, 3, 6, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020301020306000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 13, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTypeDefinitionRename = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.12000000": {UL: "RenamedType", Length: 0, Decode: DecodeTWeakReference},
}

type GTypeDefinitionRenameStruct struct {
	InstanceID                   TUUID          // IsOptional:true
	MetaDefinitionIdentification TAUID          // IsOptional:false
	MetaDefinitionName           TUTF16String   // IsOptional:false
	RenamedType                  TWeakReference // IsOptional:false

}

func (g *GTypeDefinitionRenameStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.RenamedType)
	code060e2b34010101020601010712000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 18, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010712000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 14, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTypeDefinitionExtendibleEnumeration = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.03010203.07000000": {UL: "ExtendibleEnumerationElementNames", Length: 0, Decode: DecodeTUTF16StringArray},
	"urn:smpte:ul:060e2b34.01010102.03010203.08000000": {UL: "ExtendibleEnumerationElementValues", Length: 0, Decode: DecodeTAUIDArray},
}

type GTypeDefinitionExtendibleEnumerationStruct struct {
	InstanceID                   TUUID        // IsOptional:true
	MetaDefinitionIdentification TAUID        // IsOptional:false
	MetaDefinitionName           TUTF16String // IsOptional:false

}

func (g *GTypeDefinitionExtendibleEnumerationStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 32, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTypeDefinitionIndirect = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
}

type GTypeDefinitionIndirectStruct struct {
	InstanceID                   TUUID        // IsOptional:true
	MetaDefinitionIdentification TAUID        // IsOptional:false
	MetaDefinitionName           TUTF16String // IsOptional:false

}

func (g *GTypeDefinitionIndirectStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 33, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTypeDefinitionOpaque = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
}

type GTypeDefinitionOpaqueStruct struct {
	InstanceID                   TUUID        // IsOptional:true
	MetaDefinitionIdentification TAUID        // IsOptional:false
	MetaDefinitionName           TUTF16String // IsOptional:false

}

func (g *GTypeDefinitionOpaqueStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 34, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTypeDefinitionCharacter = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
}

type GTypeDefinitionCharacterStruct struct {
	InstanceID                   TUUID        // IsOptional:true
	MetaDefinitionIdentification TAUID        // IsOptional:false
	MetaDefinitionName           TUTF16String // IsOptional:false

}

func (g *GTypeDefinitionCharacterStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 35, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GMetaDefinition = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
}

type GMetaDefinitionStruct struct {
	InstanceID                   TUUID        // IsOptional:true
	MetaDefinitionIdentification TAUID        // IsOptional:false
	MetaDefinitionName           TUTF16String // IsOptional:false

}

func (g *GMetaDefinitionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 36, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GMetaDictionary = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.06010107.07000000": {UL: "ClassDefinitions", Length: 0, Decode: DecodeTClassDefinitionStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.06010107.08000000": {UL: "TypeDefinitions", Length: 0, Decode: DecodeTTypeDefinitionStrongReferenceSet},
}

type GMetaDictionaryStruct struct {
}

func (g *GMetaDictionaryStruct) Encode() ([]byte, error) {
	var result []byte

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 37, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GExtensionScheme = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.0101010d.06010107.1b000000": {UL: "ExtensionSchemeID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010d.06010107.1c000000": {UL: "SymbolSpaceURI", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.06010107.1d000000": {UL: "PreferredPrefix", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.06010107.1e000000": {UL: "ExtensionDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.06010107.1f000000": {UL: "MetaDefinitions", Length: 0, Decode: DecodeTMetaDefinitionStrongReferenceSet},
}

type GExtensionSchemeStruct struct {
	InstanceID        TUUID        // IsOptional:false
	ExtensionSchemeID TAUID        // IsOptional:false
	SymbolSpaceURI    TUTF16String // IsOptional:false

}

func (g *GExtensionSchemeStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.ExtensionSchemeID)
	code060e2b340101010d060101071b000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 6, 1, 1, 7, 27, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d060101071b000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.SymbolSpaceURI)
	code060e2b340101010d060101071c000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 6, 1, 1, 7, 28, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d060101071c000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 38, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GPropertyAliasDefinition = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.06010107.04000000": {UL: "PropertyType", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03010202.01000000": {UL: "IsOptional", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010102.06010107.05000000": {UL: "LocalIdentification", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010102.06010107.06000000": {UL: "IsUniqueIdentifier", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010d.06010107.22000000": {UL: "MemberOf", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010107.13000000": {UL: "MetaDefinitionIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.03020401.02010000": {UL: "MetaDefinitionName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.06010107.14010000": {UL: "MetaDefinitionDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.06010107.20000000": {UL: "OriginalProperty", Length: 0, Decode: DecodeTWeakReference},
}

type GPropertyAliasDefinitionStruct struct {
	PropertyType                 TAUID          // IsOptional:false
	IsOptional                   TBoolean       // IsOptional:false
	InstanceID                   TUUID          // IsOptional:true
	MetaDefinitionIdentification TAUID          // IsOptional:false
	MetaDefinitionName           TUTF16String   // IsOptional:false
	OriginalProperty             TWeakReference // IsOptional:false

}

func (g *GPropertyAliasDefinitionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.PropertyType)
	code060e2b34010101020601010704000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 4, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010704000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTBoolean(g.IsOptional)
	code060e2b34010101020301020201000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 1, 2, 2, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020301020201000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MetaDefinitionIdentification)
	code060e2b34010101020601010713000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 7, 19, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020601010713000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.MetaDefinitionName)
	code060e2b34010101020302040102010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 3, 2, 4, 1, 2, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101020302040102010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.OriginalProperty)
	code060e2b340101010d0601010720000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 6, 1, 1, 7, 32, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0601010720000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 39, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GExtendibleEnumerationElement = map[string]Group{
	"urn:smpte:ul:060e2b34.01010102.01011503.00000000": {UL: "DefinitionObjectIdentification", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010102.01070102.03010000": {UL: "DefinitionObjectName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010102.03020301.02010000": {UL: "DefinitionObjectDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010d.06010107.21000000": {UL: "ElementOf", Length: 0, Decode: DecodeTTypeDefinitionExtendibleEnumerationWeakReferenceSet},
}

type GExtendibleEnumerationElementStruct struct {
	DefinitionObjectIdentification TAUID        // IsOptional:false
	DefinitionObjectName           TUTF16String // IsOptional:false
	InstanceID                     TUUID        // IsOptional:true

}

func (g *GExtendibleEnumerationElementStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.DefinitionObjectIdentification)
	result = append(result, []byte{27, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 1, 21, 3, 0, 0, 0, 0}, []byte{27, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.DefinitionObjectName)
	result = append(result, []byte{27, 2}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 1, 7, 1, 2, 3, 1, 0, 0}, []byte{27, 2})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 2, 40, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GRoot = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.0101010a.06010107.16000000": {UL: "RootMetaDictionary", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.0101010a.06010107.17000000": {UL: "RootPreface", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.0101010a.06010107.18000000": {UL: "RootObjectDirectory", Length: 0, Decode: DecodeTDataValue},
	"urn:smpte:ul:060e2b34.0101010a.06010107.19000000": {UL: "RootFormatVersion", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.06010107.1a000000": {UL: "RootExtensions", Length: 0, Decode: DecodeTExtensionSchemeStrongReferenceSet},
}

type GRootStruct struct {
	InstanceID  TUUID            // IsOptional:true
	RootPreface TStrongReference // IsOptional:false

}

func (g *GRootStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTStrongReference(g.RootPreface)
	code060e2b340101010a0601010717000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 10, 6, 1, 1, 7, 23, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010a0601010717000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 1, 1, 3, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GPartitionPack = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03010201.06000000": {UL: "MajorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010104.03010201.07000000": {UL: "MinorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.03010201.09000000": {UL: "KAGSize", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06101003.01000000": {UL: "ThisPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101002.01000000": {UL: "PreviousPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101005.01000000": {UL: "FooterPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060901.00000000": {UL: "HeaderByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060902.00000000": {UL: "IndexByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030405.00000000": {UL: "IndexStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06080102.01030000": {UL: "BodyOffset", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030404.00000000": {UL: "EssenceStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.01020203.00000000": {UL: "OperationalPattern", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010105.01020210.02010000": {UL: "EssenceContainers", Length: 0, Decode: DecodeTAUIDSet},
}

type GPartitionPackStruct struct {
	MajorVersion       uint16   // IsOptional:false
	MinorVersion       uint16   // IsOptional:false
	KAGSize            uint32   // IsOptional:false
	ThisPartition      uint64   // IsOptional:false
	PreviousPartition  uint64   // IsOptional:false
	FooterPartition    uint64   // IsOptional:false
	HeaderByteCount    uint64   // IsOptional:false
	IndexByteCount     uint64   // IsOptional:false
	IndexStreamID      uint32   // IsOptional:false
	BodyOffset         uint64   // IsOptional:false
	EssenceStreamID    uint32   // IsOptional:false
	OperationalPattern TAUID    // IsOptional:false
	EssenceContainers  TAUIDSet // IsOptional:false

}

func (g *GPartitionPackStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt16(g.MajorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 6, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.MinorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 7, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.KAGSize)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 3, 1, 2, 1, 9, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.ThisPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 3, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.PreviousPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 2, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.FooterPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 5, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.HeaderByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 1, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.IndexByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.IndexStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 5, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.BodyOffset)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 8, 1, 2, 1, 3, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 4, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.OperationalPattern)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 3, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUIDSet(g.EssenceContainers)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 16, 2, 1, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 2, 1, 1, 1, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GHeaderPartitionPack = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03010201.06000000": {UL: "MajorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010104.03010201.07000000": {UL: "MinorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.03010201.09000000": {UL: "KAGSize", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06101003.01000000": {UL: "ThisPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101002.01000000": {UL: "PreviousPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101005.01000000": {UL: "FooterPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060901.00000000": {UL: "HeaderByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060902.00000000": {UL: "IndexByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030405.00000000": {UL: "IndexStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06080102.01030000": {UL: "BodyOffset", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030404.00000000": {UL: "EssenceStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.01020203.00000000": {UL: "OperationalPattern", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010105.01020210.02010000": {UL: "EssenceContainers", Length: 0, Decode: DecodeTAUIDSet},
}

type GHeaderPartitionPackStruct struct {
	MajorVersion       uint16   // IsOptional:false
	MinorVersion       uint16   // IsOptional:false
	KAGSize            uint32   // IsOptional:false
	ThisPartition      uint64   // IsOptional:false
	PreviousPartition  uint64   // IsOptional:false
	FooterPartition    uint64   // IsOptional:false
	HeaderByteCount    uint64   // IsOptional:false
	IndexByteCount     uint64   // IsOptional:false
	IndexStreamID      uint32   // IsOptional:false
	BodyOffset         uint64   // IsOptional:false
	EssenceStreamID    uint32   // IsOptional:false
	OperationalPattern TAUID    // IsOptional:false
	EssenceContainers  TAUIDSet // IsOptional:false

}

func (g *GHeaderPartitionPackStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt16(g.MajorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 6, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.MinorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 7, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.KAGSize)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 3, 1, 2, 1, 9, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.ThisPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 3, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.PreviousPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 2, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.FooterPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 5, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.HeaderByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 1, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.IndexByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.IndexStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 5, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.BodyOffset)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 8, 1, 2, 1, 3, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 4, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.OperationalPattern)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 3, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUIDSet(g.EssenceContainers)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 16, 2, 1, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 2, 1, 1, 2, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GHeaderPartitionOpenIncomplete = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03010201.06000000": {UL: "MajorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010104.03010201.07000000": {UL: "MinorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.03010201.09000000": {UL: "KAGSize", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06101003.01000000": {UL: "ThisPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101002.01000000": {UL: "PreviousPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101005.01000000": {UL: "FooterPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060901.00000000": {UL: "HeaderByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060902.00000000": {UL: "IndexByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030405.00000000": {UL: "IndexStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06080102.01030000": {UL: "BodyOffset", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030404.00000000": {UL: "EssenceStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.01020203.00000000": {UL: "OperationalPattern", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010105.01020210.02010000": {UL: "EssenceContainers", Length: 0, Decode: DecodeTAUIDSet},
}

type GHeaderPartitionOpenIncompleteStruct struct {
	MajorVersion       uint16   // IsOptional:false
	MinorVersion       uint16   // IsOptional:false
	KAGSize            uint32   // IsOptional:false
	ThisPartition      uint64   // IsOptional:false
	PreviousPartition  uint64   // IsOptional:false
	FooterPartition    uint64   // IsOptional:false
	HeaderByteCount    uint64   // IsOptional:false
	IndexByteCount     uint64   // IsOptional:false
	IndexStreamID      uint32   // IsOptional:false
	BodyOffset         uint64   // IsOptional:false
	EssenceStreamID    uint32   // IsOptional:false
	OperationalPattern TAUID    // IsOptional:false
	EssenceContainers  TAUIDSet // IsOptional:false

}

func (g *GHeaderPartitionOpenIncompleteStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt16(g.MajorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 6, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.MinorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 7, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.KAGSize)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 3, 1, 2, 1, 9, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.ThisPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 3, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.PreviousPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 2, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.FooterPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 5, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.HeaderByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 1, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.IndexByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.IndexStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 5, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.BodyOffset)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 8, 1, 2, 1, 3, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 4, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.OperationalPattern)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 3, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUIDSet(g.EssenceContainers)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 16, 2, 1, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 2, 1, 1, 2, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GHeaderPartitionClosedIncomplete = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03010201.06000000": {UL: "MajorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010104.03010201.07000000": {UL: "MinorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.03010201.09000000": {UL: "KAGSize", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06101003.01000000": {UL: "ThisPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101002.01000000": {UL: "PreviousPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101005.01000000": {UL: "FooterPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060901.00000000": {UL: "HeaderByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060902.00000000": {UL: "IndexByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030405.00000000": {UL: "IndexStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06080102.01030000": {UL: "BodyOffset", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030404.00000000": {UL: "EssenceStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.01020203.00000000": {UL: "OperationalPattern", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010105.01020210.02010000": {UL: "EssenceContainers", Length: 0, Decode: DecodeTAUIDSet},
}

type GHeaderPartitionClosedIncompleteStruct struct {
	MajorVersion       uint16   // IsOptional:false
	MinorVersion       uint16   // IsOptional:false
	KAGSize            uint32   // IsOptional:false
	ThisPartition      uint64   // IsOptional:false
	PreviousPartition  uint64   // IsOptional:false
	FooterPartition    uint64   // IsOptional:false
	HeaderByteCount    uint64   // IsOptional:false
	IndexByteCount     uint64   // IsOptional:false
	IndexStreamID      uint32   // IsOptional:false
	BodyOffset         uint64   // IsOptional:false
	EssenceStreamID    uint32   // IsOptional:false
	OperationalPattern TAUID    // IsOptional:false
	EssenceContainers  TAUIDSet // IsOptional:false

}

func (g *GHeaderPartitionClosedIncompleteStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt16(g.MajorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 6, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.MinorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 7, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.KAGSize)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 3, 1, 2, 1, 9, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.ThisPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 3, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.PreviousPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 2, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.FooterPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 5, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.HeaderByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 1, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.IndexByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.IndexStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 5, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.BodyOffset)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 8, 1, 2, 1, 3, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 4, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.OperationalPattern)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 3, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUIDSet(g.EssenceContainers)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 16, 2, 1, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 2, 1, 1, 2, 2, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GHeaderPartitionOpenComplete = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03010201.06000000": {UL: "MajorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010104.03010201.07000000": {UL: "MinorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.03010201.09000000": {UL: "KAGSize", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06101003.01000000": {UL: "ThisPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101002.01000000": {UL: "PreviousPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101005.01000000": {UL: "FooterPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060901.00000000": {UL: "HeaderByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060902.00000000": {UL: "IndexByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030405.00000000": {UL: "IndexStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06080102.01030000": {UL: "BodyOffset", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030404.00000000": {UL: "EssenceStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.01020203.00000000": {UL: "OperationalPattern", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010105.01020210.02010000": {UL: "EssenceContainers", Length: 0, Decode: DecodeTAUIDSet},
}

type GHeaderPartitionOpenCompleteStruct struct {
	MajorVersion       uint16   // IsOptional:false
	MinorVersion       uint16   // IsOptional:false
	KAGSize            uint32   // IsOptional:false
	ThisPartition      uint64   // IsOptional:false
	PreviousPartition  uint64   // IsOptional:false
	FooterPartition    uint64   // IsOptional:false
	HeaderByteCount    uint64   // IsOptional:false
	IndexByteCount     uint64   // IsOptional:false
	IndexStreamID      uint32   // IsOptional:false
	BodyOffset         uint64   // IsOptional:false
	EssenceStreamID    uint32   // IsOptional:false
	OperationalPattern TAUID    // IsOptional:false
	EssenceContainers  TAUIDSet // IsOptional:false

}

func (g *GHeaderPartitionOpenCompleteStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt16(g.MajorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 6, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.MinorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 7, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.KAGSize)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 3, 1, 2, 1, 9, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.ThisPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 3, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.PreviousPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 2, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.FooterPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 5, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.HeaderByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 1, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.IndexByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.IndexStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 5, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.BodyOffset)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 8, 1, 2, 1, 3, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 4, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.OperationalPattern)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 3, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUIDSet(g.EssenceContainers)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 16, 2, 1, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 2, 1, 1, 2, 3, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GHeaderPartitionClosedComplete = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03010201.06000000": {UL: "MajorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010104.03010201.07000000": {UL: "MinorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.03010201.09000000": {UL: "KAGSize", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06101003.01000000": {UL: "ThisPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101002.01000000": {UL: "PreviousPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101005.01000000": {UL: "FooterPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060901.00000000": {UL: "HeaderByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060902.00000000": {UL: "IndexByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030405.00000000": {UL: "IndexStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06080102.01030000": {UL: "BodyOffset", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030404.00000000": {UL: "EssenceStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.01020203.00000000": {UL: "OperationalPattern", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010105.01020210.02010000": {UL: "EssenceContainers", Length: 0, Decode: DecodeTAUIDSet},
}

type GHeaderPartitionClosedCompleteStruct struct {
	MajorVersion       uint16   // IsOptional:false
	MinorVersion       uint16   // IsOptional:false
	KAGSize            uint32   // IsOptional:false
	ThisPartition      uint64   // IsOptional:false
	PreviousPartition  uint64   // IsOptional:false
	FooterPartition    uint64   // IsOptional:false
	HeaderByteCount    uint64   // IsOptional:false
	IndexByteCount     uint64   // IsOptional:false
	IndexStreamID      uint32   // IsOptional:false
	BodyOffset         uint64   // IsOptional:false
	EssenceStreamID    uint32   // IsOptional:false
	OperationalPattern TAUID    // IsOptional:false
	EssenceContainers  TAUIDSet // IsOptional:false

}

func (g *GHeaderPartitionClosedCompleteStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt16(g.MajorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 6, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.MinorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 7, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.KAGSize)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 3, 1, 2, 1, 9, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.ThisPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 3, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.PreviousPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 2, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.FooterPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 5, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.HeaderByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 1, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.IndexByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.IndexStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 5, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.BodyOffset)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 8, 1, 2, 1, 3, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 4, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.OperationalPattern)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 3, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUIDSet(g.EssenceContainers)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 16, 2, 1, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 2, 1, 1, 2, 4, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GBodyPartitionPack = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03010201.06000000": {UL: "MajorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010104.03010201.07000000": {UL: "MinorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.03010201.09000000": {UL: "KAGSize", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06101003.01000000": {UL: "ThisPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101002.01000000": {UL: "PreviousPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101005.01000000": {UL: "FooterPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060901.00000000": {UL: "HeaderByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060902.00000000": {UL: "IndexByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030405.00000000": {UL: "IndexStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06080102.01030000": {UL: "BodyOffset", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030404.00000000": {UL: "EssenceStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.01020203.00000000": {UL: "OperationalPattern", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010105.01020210.02010000": {UL: "EssenceContainers", Length: 0, Decode: DecodeTAUIDSet},
}

type GBodyPartitionPackStruct struct {
	MajorVersion       uint16   // IsOptional:false
	MinorVersion       uint16   // IsOptional:false
	KAGSize            uint32   // IsOptional:false
	ThisPartition      uint64   // IsOptional:false
	PreviousPartition  uint64   // IsOptional:false
	FooterPartition    uint64   // IsOptional:false
	HeaderByteCount    uint64   // IsOptional:false
	IndexByteCount     uint64   // IsOptional:false
	IndexStreamID      uint32   // IsOptional:false
	BodyOffset         uint64   // IsOptional:false
	EssenceStreamID    uint32   // IsOptional:false
	OperationalPattern TAUID    // IsOptional:false
	EssenceContainers  TAUIDSet // IsOptional:false

}

func (g *GBodyPartitionPackStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt16(g.MajorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 6, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.MinorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 7, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.KAGSize)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 3, 1, 2, 1, 9, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.ThisPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 3, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.PreviousPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 2, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.FooterPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 5, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.HeaderByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 1, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.IndexByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.IndexStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 5, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.BodyOffset)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 8, 1, 2, 1, 3, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 4, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.OperationalPattern)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 3, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUIDSet(g.EssenceContainers)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 16, 2, 1, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 2, 1, 1, 3, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GBodyPartitionOpenIncomplete = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03010201.06000000": {UL: "MajorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010104.03010201.07000000": {UL: "MinorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.03010201.09000000": {UL: "KAGSize", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06101003.01000000": {UL: "ThisPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101002.01000000": {UL: "PreviousPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101005.01000000": {UL: "FooterPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060901.00000000": {UL: "HeaderByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060902.00000000": {UL: "IndexByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030405.00000000": {UL: "IndexStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06080102.01030000": {UL: "BodyOffset", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030404.00000000": {UL: "EssenceStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.01020203.00000000": {UL: "OperationalPattern", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010105.01020210.02010000": {UL: "EssenceContainers", Length: 0, Decode: DecodeTAUIDSet},
}

type GBodyPartitionOpenIncompleteStruct struct {
	MajorVersion       uint16   // IsOptional:false
	MinorVersion       uint16   // IsOptional:false
	KAGSize            uint32   // IsOptional:false
	ThisPartition      uint64   // IsOptional:false
	PreviousPartition  uint64   // IsOptional:false
	FooterPartition    uint64   // IsOptional:false
	HeaderByteCount    uint64   // IsOptional:false
	IndexByteCount     uint64   // IsOptional:false
	IndexStreamID      uint32   // IsOptional:false
	BodyOffset         uint64   // IsOptional:false
	EssenceStreamID    uint32   // IsOptional:false
	OperationalPattern TAUID    // IsOptional:false
	EssenceContainers  TAUIDSet // IsOptional:false

}

func (g *GBodyPartitionOpenIncompleteStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt16(g.MajorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 6, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.MinorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 7, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.KAGSize)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 3, 1, 2, 1, 9, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.ThisPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 3, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.PreviousPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 2, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.FooterPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 5, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.HeaderByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 1, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.IndexByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.IndexStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 5, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.BodyOffset)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 8, 1, 2, 1, 3, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 4, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.OperationalPattern)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 3, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUIDSet(g.EssenceContainers)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 16, 2, 1, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 2, 1, 1, 3, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GBodyPartitionClosedIncomplete = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03010201.06000000": {UL: "MajorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010104.03010201.07000000": {UL: "MinorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.03010201.09000000": {UL: "KAGSize", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06101003.01000000": {UL: "ThisPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101002.01000000": {UL: "PreviousPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101005.01000000": {UL: "FooterPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060901.00000000": {UL: "HeaderByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060902.00000000": {UL: "IndexByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030405.00000000": {UL: "IndexStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06080102.01030000": {UL: "BodyOffset", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030404.00000000": {UL: "EssenceStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.01020203.00000000": {UL: "OperationalPattern", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010105.01020210.02010000": {UL: "EssenceContainers", Length: 0, Decode: DecodeTAUIDSet},
}

type GBodyPartitionClosedIncompleteStruct struct {
	MajorVersion       uint16   // IsOptional:false
	MinorVersion       uint16   // IsOptional:false
	KAGSize            uint32   // IsOptional:false
	ThisPartition      uint64   // IsOptional:false
	PreviousPartition  uint64   // IsOptional:false
	FooterPartition    uint64   // IsOptional:false
	HeaderByteCount    uint64   // IsOptional:false
	IndexByteCount     uint64   // IsOptional:false
	IndexStreamID      uint32   // IsOptional:false
	BodyOffset         uint64   // IsOptional:false
	EssenceStreamID    uint32   // IsOptional:false
	OperationalPattern TAUID    // IsOptional:false
	EssenceContainers  TAUIDSet // IsOptional:false

}

func (g *GBodyPartitionClosedIncompleteStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt16(g.MajorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 6, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.MinorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 7, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.KAGSize)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 3, 1, 2, 1, 9, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.ThisPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 3, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.PreviousPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 2, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.FooterPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 5, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.HeaderByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 1, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.IndexByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.IndexStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 5, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.BodyOffset)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 8, 1, 2, 1, 3, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 4, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.OperationalPattern)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 3, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUIDSet(g.EssenceContainers)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 16, 2, 1, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 2, 1, 1, 3, 2, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GBodyPartitionOpenComplete = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03010201.06000000": {UL: "MajorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010104.03010201.07000000": {UL: "MinorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.03010201.09000000": {UL: "KAGSize", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06101003.01000000": {UL: "ThisPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101002.01000000": {UL: "PreviousPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101005.01000000": {UL: "FooterPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060901.00000000": {UL: "HeaderByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060902.00000000": {UL: "IndexByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030405.00000000": {UL: "IndexStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06080102.01030000": {UL: "BodyOffset", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030404.00000000": {UL: "EssenceStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.01020203.00000000": {UL: "OperationalPattern", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010105.01020210.02010000": {UL: "EssenceContainers", Length: 0, Decode: DecodeTAUIDSet},
}

type GBodyPartitionOpenCompleteStruct struct {
	MajorVersion       uint16   // IsOptional:false
	MinorVersion       uint16   // IsOptional:false
	KAGSize            uint32   // IsOptional:false
	ThisPartition      uint64   // IsOptional:false
	PreviousPartition  uint64   // IsOptional:false
	FooterPartition    uint64   // IsOptional:false
	HeaderByteCount    uint64   // IsOptional:false
	IndexByteCount     uint64   // IsOptional:false
	IndexStreamID      uint32   // IsOptional:false
	BodyOffset         uint64   // IsOptional:false
	EssenceStreamID    uint32   // IsOptional:false
	OperationalPattern TAUID    // IsOptional:false
	EssenceContainers  TAUIDSet // IsOptional:false

}

func (g *GBodyPartitionOpenCompleteStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt16(g.MajorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 6, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.MinorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 7, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.KAGSize)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 3, 1, 2, 1, 9, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.ThisPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 3, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.PreviousPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 2, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.FooterPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 5, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.HeaderByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 1, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.IndexByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.IndexStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 5, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.BodyOffset)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 8, 1, 2, 1, 3, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 4, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.OperationalPattern)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 3, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUIDSet(g.EssenceContainers)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 16, 2, 1, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 2, 1, 1, 3, 3, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GBodyPartitionClosedComplete = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03010201.06000000": {UL: "MajorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010104.03010201.07000000": {UL: "MinorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.03010201.09000000": {UL: "KAGSize", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06101003.01000000": {UL: "ThisPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101002.01000000": {UL: "PreviousPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101005.01000000": {UL: "FooterPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060901.00000000": {UL: "HeaderByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060902.00000000": {UL: "IndexByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030405.00000000": {UL: "IndexStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06080102.01030000": {UL: "BodyOffset", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030404.00000000": {UL: "EssenceStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.01020203.00000000": {UL: "OperationalPattern", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010105.01020210.02010000": {UL: "EssenceContainers", Length: 0, Decode: DecodeTAUIDSet},
}

type GBodyPartitionClosedCompleteStruct struct {
	MajorVersion       uint16   // IsOptional:false
	MinorVersion       uint16   // IsOptional:false
	KAGSize            uint32   // IsOptional:false
	ThisPartition      uint64   // IsOptional:false
	PreviousPartition  uint64   // IsOptional:false
	FooterPartition    uint64   // IsOptional:false
	HeaderByteCount    uint64   // IsOptional:false
	IndexByteCount     uint64   // IsOptional:false
	IndexStreamID      uint32   // IsOptional:false
	BodyOffset         uint64   // IsOptional:false
	EssenceStreamID    uint32   // IsOptional:false
	OperationalPattern TAUID    // IsOptional:false
	EssenceContainers  TAUIDSet // IsOptional:false

}

func (g *GBodyPartitionClosedCompleteStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt16(g.MajorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 6, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.MinorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 7, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.KAGSize)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 3, 1, 2, 1, 9, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.ThisPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 3, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.PreviousPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 2, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.FooterPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 5, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.HeaderByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 1, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.IndexByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.IndexStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 5, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.BodyOffset)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 8, 1, 2, 1, 3, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 4, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.OperationalPattern)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 3, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUIDSet(g.EssenceContainers)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 16, 2, 1, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 2, 1, 1, 3, 4, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GGenericStreamPartition = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03010201.06000000": {UL: "MajorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010104.03010201.07000000": {UL: "MinorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.03010201.09000000": {UL: "KAGSize", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06101003.01000000": {UL: "ThisPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101002.01000000": {UL: "PreviousPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101005.01000000": {UL: "FooterPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060901.00000000": {UL: "HeaderByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060902.00000000": {UL: "IndexByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030405.00000000": {UL: "IndexStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06080102.01030000": {UL: "BodyOffset", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030404.00000000": {UL: "EssenceStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.01020203.00000000": {UL: "OperationalPattern", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010105.01020210.02010000": {UL: "EssenceContainers", Length: 0, Decode: DecodeTAUIDSet},
}

type GGenericStreamPartitionStruct struct {
	MajorVersion       uint16   // IsOptional:false
	MinorVersion       uint16   // IsOptional:false
	KAGSize            uint32   // IsOptional:false
	ThisPartition      uint64   // IsOptional:false
	PreviousPartition  uint64   // IsOptional:false
	FooterPartition    uint64   // IsOptional:false
	HeaderByteCount    uint64   // IsOptional:false
	IndexByteCount     uint64   // IsOptional:false
	IndexStreamID      uint32   // IsOptional:false
	BodyOffset         uint64   // IsOptional:false
	EssenceStreamID    uint32   // IsOptional:false
	OperationalPattern TAUID    // IsOptional:false
	EssenceContainers  TAUIDSet // IsOptional:false

}

func (g *GGenericStreamPartitionStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt16(g.MajorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 6, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.MinorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 7, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.KAGSize)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 3, 1, 2, 1, 9, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.ThisPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 3, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.PreviousPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 2, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.FooterPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 5, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.HeaderByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 1, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.IndexByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.IndexStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 5, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.BodyOffset)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 8, 1, 2, 1, 3, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 4, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.OperationalPattern)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 3, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUIDSet(g.EssenceContainers)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 16, 2, 1, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 2, 1, 1, 3, 17, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GFooterPartitionPack = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03010201.06000000": {UL: "MajorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010104.03010201.07000000": {UL: "MinorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.03010201.09000000": {UL: "KAGSize", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06101003.01000000": {UL: "ThisPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101002.01000000": {UL: "PreviousPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101005.01000000": {UL: "FooterPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060901.00000000": {UL: "HeaderByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060902.00000000": {UL: "IndexByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030405.00000000": {UL: "IndexStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06080102.01030000": {UL: "BodyOffset", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030404.00000000": {UL: "EssenceStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.01020203.00000000": {UL: "OperationalPattern", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010105.01020210.02010000": {UL: "EssenceContainers", Length: 0, Decode: DecodeTAUIDSet},
}

type GFooterPartitionPackStruct struct {
	MajorVersion       uint16   // IsOptional:false
	MinorVersion       uint16   // IsOptional:false
	KAGSize            uint32   // IsOptional:false
	ThisPartition      uint64   // IsOptional:false
	PreviousPartition  uint64   // IsOptional:false
	FooterPartition    uint64   // IsOptional:false
	HeaderByteCount    uint64   // IsOptional:false
	IndexByteCount     uint64   // IsOptional:false
	IndexStreamID      uint32   // IsOptional:false
	BodyOffset         uint64   // IsOptional:false
	EssenceStreamID    uint32   // IsOptional:false
	OperationalPattern TAUID    // IsOptional:false
	EssenceContainers  TAUIDSet // IsOptional:false

}

func (g *GFooterPartitionPackStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt16(g.MajorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 6, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.MinorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 7, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.KAGSize)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 3, 1, 2, 1, 9, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.ThisPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 3, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.PreviousPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 2, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.FooterPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 5, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.HeaderByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 1, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.IndexByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.IndexStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 5, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.BodyOffset)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 8, 1, 2, 1, 3, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 4, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.OperationalPattern)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 3, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUIDSet(g.EssenceContainers)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 16, 2, 1, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 2, 1, 1, 4, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GFooterPartitionClosedIncomplete = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03010201.06000000": {UL: "MajorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010104.03010201.07000000": {UL: "MinorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.03010201.09000000": {UL: "KAGSize", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06101003.01000000": {UL: "ThisPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101002.01000000": {UL: "PreviousPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101005.01000000": {UL: "FooterPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060901.00000000": {UL: "HeaderByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060902.00000000": {UL: "IndexByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030405.00000000": {UL: "IndexStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06080102.01030000": {UL: "BodyOffset", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030404.00000000": {UL: "EssenceStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.01020203.00000000": {UL: "OperationalPattern", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010105.01020210.02010000": {UL: "EssenceContainers", Length: 0, Decode: DecodeTAUIDSet},
}

type GFooterPartitionClosedIncompleteStruct struct {
	MajorVersion       uint16   // IsOptional:false
	MinorVersion       uint16   // IsOptional:false
	KAGSize            uint32   // IsOptional:false
	ThisPartition      uint64   // IsOptional:false
	PreviousPartition  uint64   // IsOptional:false
	FooterPartition    uint64   // IsOptional:false
	HeaderByteCount    uint64   // IsOptional:false
	IndexByteCount     uint64   // IsOptional:false
	IndexStreamID      uint32   // IsOptional:false
	BodyOffset         uint64   // IsOptional:false
	EssenceStreamID    uint32   // IsOptional:false
	OperationalPattern TAUID    // IsOptional:false
	EssenceContainers  TAUIDSet // IsOptional:false

}

func (g *GFooterPartitionClosedIncompleteStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt16(g.MajorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 6, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.MinorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 7, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.KAGSize)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 3, 1, 2, 1, 9, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.ThisPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 3, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.PreviousPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 2, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.FooterPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 5, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.HeaderByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 1, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.IndexByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.IndexStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 5, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.BodyOffset)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 8, 1, 2, 1, 3, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 4, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.OperationalPattern)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 3, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUIDSet(g.EssenceContainers)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 16, 2, 1, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 2, 1, 1, 4, 2, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GFooterPartitionClosedComplete = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03010201.06000000": {UL: "MajorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010104.03010201.07000000": {UL: "MinorVersion", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.03010201.09000000": {UL: "KAGSize", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06101003.01000000": {UL: "ThisPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101002.01000000": {UL: "PreviousPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.06101005.01000000": {UL: "FooterPartition", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060901.00000000": {UL: "HeaderByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.04060902.00000000": {UL: "IndexByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030405.00000000": {UL: "IndexStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.06080102.01030000": {UL: "BodyOffset", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010104.01030404.00000000": {UL: "EssenceStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.01020203.00000000": {UL: "OperationalPattern", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010105.01020210.02010000": {UL: "EssenceContainers", Length: 0, Decode: DecodeTAUIDSet},
}

type GFooterPartitionClosedCompleteStruct struct {
	MajorVersion       uint16   // IsOptional:false
	MinorVersion       uint16   // IsOptional:false
	KAGSize            uint32   // IsOptional:false
	ThisPartition      uint64   // IsOptional:false
	PreviousPartition  uint64   // IsOptional:false
	FooterPartition    uint64   // IsOptional:false
	HeaderByteCount    uint64   // IsOptional:false
	IndexByteCount     uint64   // IsOptional:false
	IndexStreamID      uint32   // IsOptional:false
	BodyOffset         uint64   // IsOptional:false
	EssenceStreamID    uint32   // IsOptional:false
	OperationalPattern TAUID    // IsOptional:false
	EssenceContainers  TAUIDSet // IsOptional:false

}

func (g *GFooterPartitionClosedCompleteStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt16(g.MajorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 6, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.MinorVersion)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 3, 1, 2, 1, 7, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.KAGSize)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 3, 1, 2, 1, 9, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.ThisPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 3, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.PreviousPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 2, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.FooterPartition)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 16, 16, 5, 1, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.HeaderByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 1, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.IndexByteCount)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 4, 6, 9, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.IndexStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 5, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.BodyOffset)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 6, 8, 1, 2, 1, 3, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceStreamID)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 4, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.OperationalPattern)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 3, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUIDSet(g.EssenceContainers)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 1, 2, 2, 16, 2, 1, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 2, 1, 1, 4, 4, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GPrimerPack = map[string]Group{
	"urn:smpte:ul:060e2b34.01010105.06010107.15000000": {UL: "LocalTagEntries", Length: 0, Decode: DecodeTLocalTagEntryBatch},
}

type GPrimerPackStruct struct {
	LocalTagEntries TLocalTagEntryBatch // IsOptional:false

}

func (g *GPrimerPackStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTLocalTagEntryBatch(g.LocalTagEntries)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 5, 6, 1, 1, 7, 21, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 2, 1, 1, 5, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GIndexTableSegment = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010105.05300406.00000000": {UL: "IndexEditRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010105.07020103.010a0000": {UL: "IndexStartPosition", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.01010105.07020201.01020000": {UL: "IndexDuration", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010104.04060201.00000000": {UL: "EditUnitByteCount", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.01030405.00000000": {UL: "IndexStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.01030404.00000000": {UL: "EssenceStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.04040401.01000000": {UL: "SliceCount", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.01010105.04040401.07000000": {UL: "PositionTableCount", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.01010105.04040401.06000000": {UL: "DeltaEntryArray", Length: 0, Decode: DecodeTDeltaEntryArray},
	"urn:smpte:ul:060e2b34.01010105.04040402.05000000": {UL: "IndexEntryArray", Length: 0, Decode: DecodeTIndexEntryArray},
	"urn:smpte:ul:060e2b34.0101010a.04060204.00000000": {UL: "ExtStartOffset", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.0101010a.04060205.00000000": {UL: "VBEByteCount", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.0101010e.04040501.00000000": {UL: "SingleIndexLocation", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010e.04060206.00000000": {UL: "SingleEssenceLocation", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.0101010e.04040502.00000000": {UL: "ForwardIndexDirection", Length: 1, Decode: DecodeTBoolean},
}

type GIndexTableSegmentStruct struct {
	InstanceID         TUUID         // IsOptional:false
	IndexEditRate      TRational     // IsOptional:false
	IndexStartPosition TPositionType // IsOptional:false
	IndexDuration      TLengthType   // IsOptional:false
	EssenceStreamID    uint32        // IsOptional:false

}

func (g *GIndexTableSegmentStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.IndexEditRate)
	result = append(result, []byte{63, 11}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 5, 48, 4, 6, 0, 0, 0, 0}, []byte{63, 11})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPositionType(g.IndexStartPosition)
	result = append(result, []byte{63, 12}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 7, 2, 1, 3, 1, 10, 0, 0}, []byte{63, 12})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTLengthType(g.IndexDuration)
	result = append(result, []byte{63, 13}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 7, 2, 2, 1, 1, 2, 0, 0}, []byte{63, 13})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.EssenceStreamID)
	result = append(result, []byte{63, 7}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 4, 1, 3, 4, 4, 0, 0, 0, 0}, []byte{63, 7})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 2, 1, 1, 16, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GRandomIndexPack = map[string]Group{}

type GRandomIndexPackStruct struct {
}

var GEncryptedTriplet = map[string]Group{
	"urn:smpte:ul:060e2b34.01010109.06010106.03000000": {UL: "CryptographicContextLink", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010109.06090201.03000000": {UL: "PlaintextOffset", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010109.06010102.03000000": {UL: "SourceKey", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010109.04061002.00000000": {UL: "SourceLength", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010109.02090301.03000000": {UL: "EncryptedSourceValue", Length: 0, Decode: DecodeTDataValue},
	"urn:smpte:ul:060e2b34.01010109.06010106.02000000": {UL: "EncryptedTrackFileID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010109.06100500.00000000": {UL: "TripletSequenceNumber", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010109.02090302.02000000": {UL: "MIC", Length: 0, Decode: DecodeTDataValue},
}

type GEncryptedTripletStruct struct {
	CryptographicContextLink TUUID      // IsOptional:false
	PlaintextOffset          uint64     // IsOptional:false
	SourceKey                TAUID      // IsOptional:false
	SourceLength             uint64     // IsOptional:false
	EncryptedSourceValue     TDataValue // IsOptional:false

}

func (g *GEncryptedTripletStruct) Encode() ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.CryptographicContextLink)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 9, 6, 1, 1, 6, 3, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.PlaintextOffset)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 9, 6, 9, 2, 1, 3, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.SourceKey)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 9, 6, 1, 1, 2, 3, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt64(g.SourceLength)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 9, 4, 6, 16, 2, 0, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTDataValue(g.EncryptedSourceValue)
	result = append(result, []byte{6, 14, 43, 52, 1, 1, 1, 9, 2, 9, 3, 1, 3, 0, 0, 0}...)
	BERField = BEREncode(len(field))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 2, 1, 1, 13, 1, 3, 1, 2, 126, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDescriptiveObject = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
}

type GDescriptiveObjectStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GDescriptiveObjectStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 0, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDescriptiveFramework = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
}

type GDescriptiveFrameworkStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GDescriptiveFrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GProductionFramework = map[string]Group{
	"urn:smpte:ul:060e2b34.01010105.06010104.05400c00": {UL: "CaptionsDescriptionObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401900": {UL: "ContractObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.02401d00": {UL: "PictureFormatObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010105.06010104.02402100": {UL: "ProjectObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010107.03010102.02130000": {UL: "FrameworkExtendedTextLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010105.03020102.15010000": {UL: "FrameworkThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.01050f01.00000000": {UL: "FrameworkTitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010107.03010102.03110000": {UL: "PrimaryExtendedSpokenLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010107.03010102.03120000": {UL: "SecondaryExtendedSpokenLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010107.03010102.03130000": {UL: "OriginalExtendedSpokenLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010105.06010104.060c0000": {UL: "MetadataServerLocators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400400": {UL: "TitlesObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400d00": {UL: "AnnotationObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401300": {UL: "ParticipantObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.02402200": {UL: "ContactsListObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010105.06010104.03401600": {UL: "Locations", Length: 0, Decode: DecodeTLocationGlobalReferenceSet},
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010104.05010101.01000000": {UL: "IntegrationIndication", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400600": {UL: "IdentificationObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400500": {UL: "GroupRelationshipObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400800": {UL: "BrandingObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400900": {UL: "EventObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400b00": {UL: "AwardObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400e01": {UL: "ProductionSettingPeriodObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
}

type GProductionFrameworkStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GProductionFrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 1, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GClipFramework = map[string]Group{
	"urn:smpte:ul:060e2b34.01010105.06010104.05400c00": {UL: "CaptionsDescriptionObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401900": {UL: "ContractObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.02401d00": {UL: "PictureFormatObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010105.06010104.02402100": {UL: "ProjectObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010107.03010102.02130000": {UL: "FrameworkExtendedTextLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010105.03020102.15010000": {UL: "FrameworkThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.01050f01.00000000": {UL: "FrameworkTitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010107.03010102.03110000": {UL: "PrimaryExtendedSpokenLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010107.03010102.03120000": {UL: "SecondaryExtendedSpokenLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010107.03010102.03130000": {UL: "OriginalExtendedSpokenLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010105.06010104.060c0000": {UL: "MetadataServerLocators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400400": {UL: "TitlesObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400d00": {UL: "AnnotationObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401300": {UL: "ParticipantObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.02402200": {UL: "ContactsListObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010105.06010104.03401600": {UL: "Locations", Length: 0, Decode: DecodeTLocationGlobalReferenceSet},
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.03020504.00000000": {UL: "ClipKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010104.01050c00.00000000": {UL: "ClipNumber", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.01010107.01011509.00000000": {UL: "ExtendedClipID", Length: 32, Decode: DecodeTUMID},
	"urn:smpte:ul:060e2b34.01010107.07020110.01040000": {UL: "ClipCreationDateTime", Length: 8, Decode: DecodeTTimeStamp},
	"urn:smpte:ul:060e2b34.01010101.01050700.00000000": {UL: "TakeNumber", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010104.03020503.00000000": {UL: "SlateInformation", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400f00": {UL: "ScriptingObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401102": {UL: "ClipShotObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401e00": {UL: "DeviceParametersObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.02402000": {UL: "ProcessingObject", Length: 0, Decode: DecodeTStrongReference},
}

type GClipFrameworkStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GClipFrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 1, 2, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GSceneFramework = map[string]Group{
	"urn:smpte:ul:060e2b34.01010107.03010102.02130000": {UL: "FrameworkExtendedTextLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010105.03020102.15010000": {UL: "FrameworkThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.01050f01.00000000": {UL: "FrameworkTitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010107.03010102.03110000": {UL: "PrimaryExtendedSpokenLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010107.03010102.03120000": {UL: "SecondaryExtendedSpokenLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010107.03010102.03130000": {UL: "OriginalExtendedSpokenLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010105.06010104.060c0000": {UL: "MetadataServerLocators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400400": {UL: "TitlesObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400d00": {UL: "AnnotationObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401300": {UL: "ParticipantObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.02402200": {UL: "ContactsListObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010105.06010104.03401600": {UL: "Locations", Length: 0, Decode: DecodeTLocationGlobalReferenceSet},
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.01050600.00000000": {UL: "SceneNumber", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400e02": {UL: "SceneSettingPeriodObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401101": {UL: "SceneShotObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
}

type GSceneFrameworkStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GSceneFrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 1, 3, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTitles = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010103.01050201.00000000": {UL: "MainTitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.01050301.00000000": {UL: "SecondaryTitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010104.01050a01.00000000": {UL: "WorkingTitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010104.01050b01.00000000": {UL: "OriginalTitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.01050801.00000000": {UL: "VersionTitle", Length: 0, Decode: DecodeTUTF16String},
}

type GTitlesStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GTitlesStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 16, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDMS1Identification = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03020102.02010000": {UL: "ThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010104.01080100.00000000": {UL: "IdentifierKind", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.01010104.01080200.00000000": {UL: "IdentifierValue", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.01010105.01020202.00000000": {UL: "IdentificationLocator", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010105.020a0101.00000000": {UL: "IdentificationIssuingAuthority", Length: 0, Decode: DecodeTUTF16String},
}

type GDMS1IdentificationStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GDMS1IdentificationStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 17, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GGroupRelationship = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03020102.02010000": {UL: "ThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.02020301.00000000": {UL: "ProgrammingGroupKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.02020601.00000000": {UL: "ProgrammingGroupTitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.03020106.08010000": {UL: "GroupSynopsis", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.06100100.00000000": {UL: "PositionInSequence", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010105.06100400.00000000": {UL: "TotalNumberInSequence", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010104.02020400.00000000": {UL: "EpisodicStartNumber", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010104.02020500.00000000": {UL: "EpisodicEndNumber", Length: 2, Decode: DecodeTUInt16},
}

type GGroupRelationshipStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GGroupRelationshipStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 18, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GBranding = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.01050d01.00000000": {UL: "BrandMainTitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.01050e01.00000000": {UL: "BrandOriginalTitle", Length: 0, Decode: DecodeTUTF16String},
}

type GBrandingStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GBrandingStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 19, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDMS1Event = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03020102.02010000": {UL: "ThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010104.05010102.01000000": {UL: "EventIndication", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.07020102.07020000": {UL: "EventStartDateTime", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.01010101.07020102.09020000": {UL: "EventEndDateTime", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400a00": {UL: "PublicationObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010108.06010104.05400d01": {UL: "EventAnnotationObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
}

type GDMS1EventStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GDMS1EventStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 20, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GPublication = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010104.02100201.01010000": {UL: "PublishingOrganizationName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010104.02100201.02010000": {UL: "PublishingServiceName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010104.02100201.03010000": {UL: "PublishingMediumName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010104.02100201.04010000": {UL: "PublishingRegionName", Length: 0, Decode: DecodeTUTF16String},
}

type GPublicationStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GPublicationStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 20, 2, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAward = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03020102.02010000": {UL: "ThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010104.03020201.03010000": {UL: "FestivalName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.07020102.07100100": {UL: "FestivalDateTime", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.01010104.03020201.04010000": {UL: "AwardName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010104.03020201.05010000": {UL: "AwardCategory", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010108.03020201.06010000": {UL: "NominationCategory", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.06010104.03401301": {UL: "AwardParticipants", Length: 0, Decode: DecodeTParticipantGlobalReferenceSet},
}

type GAwardStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GAwardStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 21, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GCaptionsDescription = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03020102.02010000": {UL: "ThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010107.03010102.02120000": {UL: "ExtendedCaptionsLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010104.04030101.01000000": {UL: "CaptionKind", Length: 0, Decode: DecodeTUTF16String},
}

type GCaptionsDescriptionStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GCaptionsDescriptionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 22, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDMS1Annotation = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03020102.02010000": {UL: "ThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.03020106.0e010000": {UL: "AnnotationKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.03020106.09010000": {UL: "AnnotationSynopsis", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.03020106.0a010000": {UL: "AnnotationDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.03020106.0f010000": {UL: "RelatedMaterialDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401000": {UL: "ClassificationObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.02402301": {UL: "AnnotationCueWordsObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010105.06010104.060d0000": {UL: "RelatedMaterialLocators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010107.06010104.03401303": {UL: "AnnotationParticipants", Length: 0, Decode: DecodeTParticipantGlobalReferenceSet},
}

type GDMS1AnnotationStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GDMS1AnnotationStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 23, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GSettingPeriod = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03020102.02010000": {UL: "ThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010104.07020108.02000000": {UL: "SettingDateTime", Length: 8, Decode: DecodeTTimeStamp},
	"urn:smpte:ul:060e2b34.01010104.07020108.01010000": {UL: "TimePeriodKeyword", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.07020108.03010000": {UL: "SettingPeriodDescription", Length: 0, Decode: DecodeTUTF16String},
}

type GSettingPeriodStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GSettingPeriodStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 23, 2, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GScripting = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03020102.02010000": {UL: "ThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.03020106.0b010000": {UL: "ScriptingKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.03020106.0c010000": {UL: "ScriptingText", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010108.06010104.060e0000": {UL: "ScriptingLocators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
}

type GScriptingStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GScriptingStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 23, 3, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GClassification = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03020102.02010000": {UL: "ThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.03020102.04000000": {UL: "ContentClassification", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401f01": {UL: "ClassificationNameValueObjects", Length: 0, Decode: DecodeTNameValueStrongReferenceSet},
}

type GClassificationStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GClassificationStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 23, 4, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GShot = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.07020103.01090000": {UL: "ShotStartPosition", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.01010105.07020201.02040000": {UL: "ShotDuration", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010105.01070107.00000000": {UL: "ShotTrackIDs", Length: 0, Decode: DecodeTUInt32Set},
	"urn:smpte:ul:060e2b34.01010105.03020106.0d010000": {UL: "ShotDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010107.03020501.01000000": {UL: "ShotCommentKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010107.03020502.01000000": {UL: "ShotComment", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.06010104.02402302": {UL: "ShotCueWordsObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401200": {UL: "KeyPointObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
}

type GShotStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GShotStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 23, 5, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GKeypoint = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03020102.02010000": {UL: "ThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010104.03020102.10010000": {UL: "KeypointKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010104.03020102.11010000": {UL: "KeypointValue", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010104.07020103.01070000": {UL: "KeypointPosition", Length: 8, Decode: DecodeTUInt64},
}

type GKeypointStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GKeypointStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 23, 6, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GCueWords = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010104.03020102.0d010000": {UL: "InCueWords", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010104.03020102.0e010000": {UL: "OutCueWords", Length: 0, Decode: DecodeTUTF16String},
}

type GCueWordsStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GCueWordsStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 23, 8, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GParticipant = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03020102.02010000": {UL: "ThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010108.01011540.01010000": {UL: "ParticipantID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010103.02300102.01010000": {UL: "ContributionStatus", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.02300501.01000000": {UL: "JobFunction", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.02300501.02000000": {UL: "JobFunctionCode", Length: 0, Decode: DecodeTJobFunctionCode},
	"urn:smpte:ul:060e2b34.01010103.02300502.01000000": {UL: "RoleName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.06010104.03401400": {UL: "Persons", Length: 0, Decode: DecodeTParticipantGlobalReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.03401501": {UL: "ParticipantOrganizations", Length: 0, Decode: DecodeTOrganizationGlobalReferenceSet},
}

type GParticipantStruct struct {
	InstanceID    TUUID // IsOptional:true
	ParticipantID TUUID // IsOptional:false

}

func (g *GParticipantStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.ParticipantID)
	code060e2b34010101080101154001010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 8, 1, 1, 21, 64, 1, 1, 0, 0}, []byte{})
	result = append(result, code060e2b34010101080101154001010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 24, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GContactsList = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401400": {UL: "PersonObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401500": {UL: "OrganizationObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401600": {UL: "LocationObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
}

type GContactsListStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GContactsListStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 25, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GPerson = map[string]Group{
	"urn:smpte:ul:060e2b34.01010108.01011540.01020000": {UL: "ContactID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401f02": {UL: "ContactNameValueObjects", Length: 0, Decode: DecodeTNameValueStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401700": {UL: "AddressObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010104.03020102.02010000": {UL: "ThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010103.02300603.01010100": {UL: "FamilyName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.02300603.01020100": {UL: "FirstGivenName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010104.02300603.01080100": {UL: "OtherGivenNames", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.02300603.010a0100": {UL: "LinkingName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010104.02300603.01050100": {UL: "Salutation", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.02300603.010b0100": {UL: "NameSuffix", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010104.02300603.01060100": {UL: "HonorsQualifications", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.02300603.010c0100": {UL: "FormerFamilyName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.02300603.01070100": {UL: "PersonDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010104.02300603.01090100": {UL: "AlternateName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.02300603.010d0100": {UL: "Nationality", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.02300603.010e0100": {UL: "Citizenship", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.06010104.03401502": {UL: "PersonOrganizations", Length: 0, Decode: DecodeTOrganizationGlobalReferenceSet},
}

type GPersonStruct struct {
	ContactID  TUUID // IsOptional:false
	InstanceID TUUID // IsOptional:true

}

func (g *GPersonStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.ContactID)
	code060e2b34010101080101154001020000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 8, 1, 1, 21, 64, 1, 2, 0, 0}, []byte{})
	result = append(result, code060e2b34010101080101154001020000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 26, 2, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GOrganization = map[string]Group{
	"urn:smpte:ul:060e2b34.01010108.01011540.01020000": {UL: "ContactID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401f02": {UL: "ContactNameValueObjects", Length: 0, Decode: DecodeTNameValueStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401700": {UL: "AddressObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010104.03020102.02010000": {UL: "ThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010103.02300201.01000000": {UL: "OrganizationKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.02300603.03010100": {UL: "OrganizationMainName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010104.010a0201.01000000": {UL: "OrganizationCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.02300602.01000000": {UL: "ContactDepartment", Length: 0, Decode: DecodeTUTF16String},
}

type GOrganizationStruct struct {
	ContactID  TUUID // IsOptional:false
	InstanceID TUUID // IsOptional:true

}

func (g *GOrganizationStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.ContactID)
	code060e2b34010101080101154001020000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 8, 1, 1, 21, 64, 1, 2, 0, 0}, []byte{})
	result = append(result, code060e2b34010101080101154001020000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 26, 3, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GLocation = map[string]Group{
	"urn:smpte:ul:060e2b34.01010108.01011540.01020000": {UL: "ContactID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401f02": {UL: "ContactNameValueObjects", Length: 0, Decode: DecodeTNameValueStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401700": {UL: "AddressObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010104.03020102.02010000": {UL: "ThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010104.07012002.03010000": {UL: "LocationKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010104.07012002.02010000": {UL: "LocationDescription", Length: 0, Decode: DecodeTUTF16String},
}

type GLocationStruct struct {
	ContactID  TUUID // IsOptional:false
	InstanceID TUUID // IsOptional:true

}

func (g *GLocationStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.ContactID)
	code060e2b34010101080101154001020000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 8, 1, 1, 21, 64, 1, 2, 0, 0}, []byte{})
	result = append(result, code060e2b34010101080101154001020000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 26, 4, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAddress = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010103.07012001.04010101": {UL: "RoomSuiteNumber", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.07012001.04011101": {UL: "RoomSuiteName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.07012001.04011201": {UL: "BuildingName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010107.07012001.04011401": {UL: "PlaceName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.07012001.04010201": {UL: "StreetNumber", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.07012001.04010301": {UL: "StreetName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.07012001.04010401": {UL: "PostalTown", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.07012001.04010501": {UL: "City", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.07012001.04010601": {UL: "StateProvinceCounty", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.07012001.04010701": {UL: "PostalCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.07012001.04010801": {UL: "Country", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010107.07012001.04011500": {UL: "GeographicalCoordinates", Length: 12, Decode: DecodeTS330M_Spatial},
	"urn:smpte:ul:060e2b34.01010107.07012001.04011601": {UL: "AstronomicalBodyName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401800": {UL: "CommunicationsObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010107.06010104.05401f04": {UL: "AddressNameValueObjects", Length: 0, Decode: DecodeTNameValueStrongReferenceSet},
}

type GAddressStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GAddressStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 27, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GCommunications = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010104.07012001.10030400": {UL: "CentralTelephoneNumber", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.01010101.07012001.10030100": {UL: "TelephoneNumber", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.01010104.07012001.10030500": {UL: "MobileTelephoneNumber", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.01010101.07012001.10030200": {UL: "FaxNumber", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.01010103.07012001.10030301": {UL: "EmailAddress", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.07012001.10030601": {UL: "ContactWebPage", Length: 0, Decode: DecodeTUTF16String},
}

type GCommunicationsStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GCommunicationsStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 27, 2, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GContract = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03020102.02010000": {UL: "ThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.02010200.00000000": {UL: "SupplyContractNumber", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401a00": {UL: "RightsObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.03401302": {UL: "ContractParticipants", Length: 0, Decode: DecodeTParticipantGlobalReferenceSet},
}

type GContractStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GContractStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 28, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GRights = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03020102.02010000": {UL: "ThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010103.02050102.01000000": {UL: "CopyrightOwner", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.02050301.01000000": {UL: "Rightsholder", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.02050302.01000000": {UL: "RightsManagementAuthority", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.07012001.03050100": {UL: "RegionAreaOfIPLicense", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.02050201.01000000": {UL: "IntellectualPropertyDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.02050403.01000000": {UL: "RightsCondition", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010108.02050404.01000000": {UL: "RightsComment", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.02050202.01000000": {UL: "IntellectualPropertyRight", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010104.07020120.02000000": {UL: "RightsStartDateTime", Length: 8, Decode: DecodeTTimeStamp},
	"urn:smpte:ul:060e2b34.01010104.07020120.03000000": {UL: "RightsStopDateTime", Length: 8, Decode: DecodeTTimeStamp},
	"urn:smpte:ul:060e2b34.01010101.02050401.00000000": {UL: "MaxNumberOfUsages", Length: 2, Decode: DecodeTUInt16},
}

type GRightsStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GRightsStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 28, 2, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GPictureFormat = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.04010101.03000000": {UL: "ViewportAspectRatio", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010103.04010101.08000000": {UL: "PerceivedDisplayFormat", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.01010103.03020106.04010000": {UL: "ColorDescriptor", Length: 0, Decode: DecodeTUTF16String},
}

type GPictureFormatStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GPictureFormatStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 29, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDeviceParameters = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03020102.02010000": {UL: "ThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.01012008.01000000": {UL: "DeviceKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.01012001.00000000": {UL: "DeviceDesignation", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.01010105.0101200c.00000000": {UL: "DeviceAssetNumber", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.01010102.01012005.00000000": {UL: "IEEEDeviceIdentifier", Length: 6, Decode: DecodeTUInt8Array6},
	"urn:smpte:ul:060e2b34.01010102.010a0101.01010000": {UL: "DeviceManufacturerName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.01012003.00000000": {UL: "DeviceModel", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.01010101.01012004.00000000": {UL: "DeviceSerialNumber", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.01010105.03030310.01010000": {UL: "DeviceUsageDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401f03": {UL: "DeviceParametersNameValueObjects", Length: 0, Decode: DecodeTNameValueStrongReferenceSet},
}

type GDeviceParametersStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GDeviceParametersStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 30, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GNameValue = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.0301020a.01010000": {UL: "ItemName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.0301020a.02010000": {UL: "ItemValue", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010104.01020201.00000000": {UL: "SMPTEUniversalLabelLocator", Length: 16, Decode: DecodeTAUID},
}

type GNameValueStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GNameValueStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 31, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GProcessing = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.05010103.00000000": {UL: "QualityFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010103.03020302.02010000": {UL: "DescriptiveComment", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010103.05010104.00000000": {UL: "LogoFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010104.05010107.01000000": {UL: "GraphicUsage", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.05010301.00000000": {UL: "SimpleFlagging", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.05010302.01000000": {UL: "GenerationCopyNumber", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.05010303.01000000": {UL: "GenerationCloneNumber", Length: 2, Decode: DecodeTUInt16},
}

type GProcessingStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GProcessingStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 32, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GProject = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010102.01030106.00000000": {UL: "ProjectNumber", Length: 0, Decode: DecodeTISO7},
	"urn:smpte:ul:060e2b34.01010105.01030108.01000000": {UL: "ProjectName", Length: 0, Decode: DecodeTUTF16String},
}

type GProjectStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GProjectStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 32, 2, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDMS1Framework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010107.03010102.02130000": {UL: "FrameworkExtendedTextLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010105.03020102.15010000": {UL: "FrameworkThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.01050f01.00000000": {UL: "FrameworkTitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010107.03010102.03110000": {UL: "PrimaryExtendedSpokenLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010107.03010102.03120000": {UL: "SecondaryExtendedSpokenLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010107.03010102.03130000": {UL: "OriginalExtendedSpokenLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010105.06010104.060c0000": {UL: "MetadataServerLocators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400400": {UL: "TitlesObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400d00": {UL: "AnnotationObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401300": {UL: "ParticipantObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.02402200": {UL: "ContactsListObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010105.06010104.03401600": {UL: "Locations", Length: 0, Decode: DecodeTLocationGlobalReferenceSet},
}

type GDMS1FrameworkStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GDMS1FrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 127, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GProductionClipFramework = map[string]Group{
	"urn:smpte:ul:060e2b34.01010107.03010102.02130000": {UL: "FrameworkExtendedTextLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010105.03020102.15010000": {UL: "FrameworkThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010105.01050f01.00000000": {UL: "FrameworkTitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010107.03010102.03110000": {UL: "PrimaryExtendedSpokenLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010107.03010102.03120000": {UL: "SecondaryExtendedSpokenLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010107.03010102.03130000": {UL: "OriginalExtendedSpokenLanguageCode", Length: 0, Decode: DecodeTISO639_Ext},
	"urn:smpte:ul:060e2b34.01010105.06010104.060c0000": {UL: "MetadataServerLocators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400400": {UL: "TitlesObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400d00": {UL: "AnnotationObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401300": {UL: "ParticipantObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.02402200": {UL: "ContactsListObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010105.06010104.03401600": {UL: "Locations", Length: 0, Decode: DecodeTLocationGlobalReferenceSet},
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05400c00": {UL: "CaptionsDescriptionObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401900": {UL: "ContractObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.02401d00": {UL: "PictureFormatObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010105.06010104.02402100": {UL: "ProjectObject", Length: 0, Decode: DecodeTStrongReference},
}

type GProductionClipFrameworkStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GProductionClipFrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 127, 2, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDMS1Object = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GDMS1ObjectStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GDMS1ObjectStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 127, 16, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTextLanguage = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GTextLanguageStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GTextLanguageStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 127, 17, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GThesaurus = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010104.03020102.02010000": {UL: "ThesaurusName", Length: 0, Decode: DecodeTUTF16String},
}

type GThesaurusStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GThesaurusStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 127, 18, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GContact = map[string]Group{
	"urn:smpte:ul:060e2b34.01010104.03020102.02010000": {UL: "ThesaurusName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010108.01011540.01020000": {UL: "ContactID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401f02": {UL: "ContactNameValueObjects", Length: 0, Decode: DecodeTNameValueStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.06010104.05401700": {UL: "AddressObjects", Length: 0, Decode: DecodeTDescriptiveObjectStrongReferenceSet},
}

type GContactStruct struct {
	InstanceID TUUID // IsOptional:true
	ContactID  TUUID // IsOptional:false

}

func (g *GContactStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.ContactID)
	code060e2b34010101080101154001020000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 8, 1, 1, 21, 64, 1, 2, 0, 0}, []byte{})
	result = append(result, code060e2b34010101080101154001020000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 1, 127, 26, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GCryptographicFramework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010109.06010104.020d0000": {UL: "CryptographicContextObject", Length: 0, Decode: DecodeTStrongReference},
}

type GCryptographicFrameworkStruct struct {
	InstanceID                 TUUID            // IsOptional:true
	CryptographicContextObject TStrongReference // IsOptional:false

}

func (g *GCryptographicFrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTStrongReference(g.CryptographicContextObject)
	code060e2b340101010906010104020d0000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 9, 6, 1, 1, 4, 2, 13, 0, 0}, []byte{})
	result = append(result, code060e2b340101010906010104020d0000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 2, 1, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GCryptographicContext = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010109.01011511.00000000": {UL: "CryptographicContextID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010109.06010102.02000000": {UL: "SourceContainerFormat", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010109.02090301.01000000": {UL: "CipherAlgorithm", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010109.02090301.02000000": {UL: "CryptographicKeyID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010109.02090302.01000000": {UL: "MICAlgorithm", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07040300": {UL: "MICCarriage", Length: 16, Decode: DecodeTAUID},
}

type GCryptographicContextStruct struct {
	InstanceID             TUUID // IsOptional:true
	CryptographicContextID TUUID // IsOptional:false
	SourceContainerFormat  TAUID // IsOptional:false
	CipherAlgorithm        TAUID // IsOptional:false
	CryptographicKeyID     TUUID // IsOptional:false
	MICAlgorithm           TAUID // IsOptional:false

}

func (g *GCryptographicContextStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.CryptographicContextID)
	code060e2b34010101090101151100000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 9, 1, 1, 21, 17, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101090101151100000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.SourceContainerFormat)
	code060e2b34010101090601010202000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 9, 6, 1, 1, 2, 2, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101090601010202000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.CipherAlgorithm)
	code060e2b34010101090209030101000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 9, 2, 9, 3, 1, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101090209030101000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.CryptographicKeyID)
	code060e2b34010101090209030102000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 9, 2, 9, 3, 1, 2, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101090209030102000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.MICAlgorithm)
	code060e2b34010101090209030201000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 9, 2, 9, 3, 2, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101090209030201000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 2, 2, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDMS_AS_03_Framework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d010401.03010200": {UL: "AS_03_Identifier", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010401.03010100": {UL: "AS_03_IdentifierKind", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010401.03010300": {UL: "AS_03_ShimName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010401.03010400": {UL: "AS_03_SignalStandard", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010401.03010500": {UL: "AS_03_IntendedAFD", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010401.03010600": {UL: "AS_03_SlateTitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010401.03010700": {UL: "AS_03_NOLACode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010401.03010800": {UL: "AS_03_Rating", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010401.03010900": {UL: "AS_03_NielsenStreamIdentifier", Length: 0, Decode: DecodeTUTF16String},
}

type GDMS_AS_03_FrameworkStruct struct {
	InstanceID           TUUID        // IsOptional:true
	AS_03_Identifier     TUTF16String // IsOptional:false
	AS_03_IdentifierKind TUTF16String // IsOptional:false
	AS_03_ShimName       TUTF16String // IsOptional:false
	AS_03_SignalStandard TUTF16String // IsOptional:false
	AS_03_IntendedAFD    TUTF16String // IsOptional:false

}

func (g *GDMS_AS_03_FrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_03_Identifier)
	code060e2b34010101010d01040103010200 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 1, 4, 1, 3, 1, 2, 0}, []byte{})
	result = append(result, code060e2b34010101010d01040103010200...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_03_IdentifierKind)
	code060e2b34010101010d01040103010100 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 1, 4, 1, 3, 1, 1, 0}, []byte{})
	result = append(result, code060e2b34010101010d01040103010100...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_03_ShimName)
	code060e2b34010101010d01040103010300 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 1, 4, 1, 3, 1, 3, 0}, []byte{})
	result = append(result, code060e2b34010101010d01040103010300...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_03_SignalStandard)
	code060e2b34010101010d01040103010400 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 1, 4, 1, 3, 1, 4, 0}, []byte{})
	result = append(result, code060e2b34010101010d01040103010400...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_03_IntendedAFD)
	code060e2b34010101010d01040103010500 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 1, 4, 1, 3, 1, 5, 0}, []byte{})
	result = append(result, code060e2b34010101010d01040103010500...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 3, 1, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTextBasedFramework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010d.06010104.05410100": {UL: "TextBasedObject", Length: 0, Decode: DecodeTStrongReference},
}

type GTextBasedFrameworkStruct struct {
	InstanceID      TUUID            // IsOptional:true
	TextBasedObject TStrongReference // IsOptional:false

}

func (g *GTextBasedFrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTStrongReference(g.TextBasedObject)
	code060e2b340101010d0601010405410100 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 6, 1, 1, 4, 5, 65, 1, 0}, []byte{})
	result = append(result, code060e2b340101010d0601010405410100...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 4, 1, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GGenericStreamTextBasedSet = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.04060806.00000000": {UL: "TextBasedMetadataPayloadSchemeID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010d.04090202.00000000": {UL: "TextMIMEMediaType", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.03010102.02140000": {UL: "RFC5646TextLanguageCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.03020106.03020000": {UL: "TextDataDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010d.01030408.00000000": {UL: "GenericStreamID", Length: 4, Decode: DecodeTUInt32},
}

type GGenericStreamTextBasedSetStruct struct {
	TextBasedMetadataPayloadSchemeID TAUID        // IsOptional:false
	TextMIMEMediaType                TUTF16String // IsOptional:false
	RFC5646TextLanguageCode          TUTF16String // IsOptional:false
	InstanceID                       TUUID        // IsOptional:true
	GenericStreamID                  uint32       // IsOptional:false

}

func (g *GGenericStreamTextBasedSetStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.TextBasedMetadataPayloadSchemeID)
	code060e2b340101010d0406080600000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 4, 6, 8, 6, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0406080600000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.TextMIMEMediaType)
	code060e2b340101010d0409020200000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 4, 9, 2, 2, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0409020200000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.RFC5646TextLanguageCode)
	code060e2b340101010d0301010202140000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 3, 1, 1, 2, 2, 20, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0301010202140000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt32(g.GenericStreamID)
	code060e2b340101010d0103040800000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 4, 8, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0103040800000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 4, 2, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GUTF8TextBasedSet = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.04060806.00000000": {UL: "TextBasedMetadataPayloadSchemeID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010d.04090202.00000000": {UL: "TextMIMEMediaType", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.03010102.02140000": {UL: "RFC5646TextLanguageCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.03020106.03020000": {UL: "TextDataDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010d.03010220.03010000": {UL: "UTF8TextData", Length: 0, Decode: DecodeTUTF8String},
}

type GUTF8TextBasedSetStruct struct {
	TextBasedMetadataPayloadSchemeID TAUID        // IsOptional:false
	TextMIMEMediaType                TUTF16String // IsOptional:false
	RFC5646TextLanguageCode          TUTF16String // IsOptional:false
	InstanceID                       TUUID        // IsOptional:true
	UTF8TextData                     TUTF8String  // IsOptional:false

}

func (g *GUTF8TextBasedSetStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.TextBasedMetadataPayloadSchemeID)
	code060e2b340101010d0406080600000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 4, 6, 8, 6, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0406080600000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.TextMIMEMediaType)
	code060e2b340101010d0409020200000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 4, 9, 2, 2, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0409020200000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.RFC5646TextLanguageCode)
	code060e2b340101010d0301010202140000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 3, 1, 1, 2, 2, 20, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0301010202140000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF8String(g.UTF8TextData)
	code060e2b340101010d0301022003010000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 3, 1, 2, 32, 3, 1, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0301022003010000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 4, 2, 2, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GUTF16TextBasedSet = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.04060806.00000000": {UL: "TextBasedMetadataPayloadSchemeID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010d.04090202.00000000": {UL: "TextMIMEMediaType", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.03010102.02140000": {UL: "RFC5646TextLanguageCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.03020106.03020000": {UL: "TextDataDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010d.03010220.03020000": {UL: "UTF16TextData", Length: 0, Decode: DecodeTUTF16String},
}

type GUTF16TextBasedSetStruct struct {
	TextBasedMetadataPayloadSchemeID TAUID        // IsOptional:false
	TextMIMEMediaType                TUTF16String // IsOptional:false
	RFC5646TextLanguageCode          TUTF16String // IsOptional:false
	InstanceID                       TUUID        // IsOptional:true
	UTF16TextData                    TUTF16String // IsOptional:false

}

func (g *GUTF16TextBasedSetStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.TextBasedMetadataPayloadSchemeID)
	code060e2b340101010d0406080600000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 4, 6, 8, 6, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0406080600000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.TextMIMEMediaType)
	code060e2b340101010d0409020200000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 4, 9, 2, 2, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0409020200000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.RFC5646TextLanguageCode)
	code060e2b340101010d0301010202140000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 3, 1, 1, 2, 2, 20, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0301010202140000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.UTF16TextData)
	code060e2b340101010d0301022003020000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 3, 1, 2, 32, 3, 2, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0301022003020000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 4, 2, 3, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GTextBasedObject = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010d.04060806.00000000": {UL: "TextBasedMetadataPayloadSchemeID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010d.04090202.00000000": {UL: "TextMIMEMediaType", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.03010102.02140000": {UL: "RFC5646TextLanguageCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.03020106.03020000": {UL: "TextDataDescription", Length: 0, Decode: DecodeTUTF16String},
}

type GTextBasedObjectStruct struct {
	InstanceID                       TUUID        // IsOptional:true
	TextBasedMetadataPayloadSchemeID TAUID        // IsOptional:false
	TextMIMEMediaType                TUTF16String // IsOptional:false
	RFC5646TextLanguageCode          TUTF16String // IsOptional:false

}

func (g *GTextBasedObjectStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.TextBasedMetadataPayloadSchemeID)
	code060e2b340101010d0406080600000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 4, 6, 8, 6, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0406080600000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.TextMIMEMediaType)
	code060e2b340101010d0409020200000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 4, 9, 2, 2, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0409020200000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.RFC5646TextLanguageCode)
	code060e2b340101010d0301010202140000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 3, 1, 1, 2, 2, 20, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0301010202140000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 4, 3, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GEIDRFramework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010e.01011514.00000000": {UL: "EIDRDMSEssenceID", Length: 0, Decode: DecodeTCanonicalEIDRIdentifierType},
}

type GEIDRFrameworkStruct struct {
	InstanceID       TUUID                        // IsOptional:true
	EIDRDMSEssenceID TCanonicalEIDRIdentifierType // IsOptional:false

}

func (g *GEIDRFrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTCanonicalEIDRIdentifierType(g.EIDRDMSEssenceID)
	code060e2b340101010e0101151400000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 14, 1, 1, 21, 20, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010e0101151400000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 4, 1, 5, 1, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDM_Segmentation_Framework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GDM_Segmentation_FrameworkStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GDM_Segmentation_FrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 7, 1, 1, 1, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDMS_AS_10_Core_Framework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0a010101": {UL: "AS_10_Shim_Name", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0a010102": {UL: "AS_10_Type", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0a010103": {UL: "AS_10_Main_Title", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0a010104": {UL: "AS_10_Sub_Title", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0a010105": {UL: "AS_10_Title_Description", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0a010106": {UL: "AS_10_Organization_Name", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0a010107": {UL: "AS_10_Person_Name", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0a010108": {UL: "AS_10_Location_Description", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0a010109": {UL: "AS_10_Common_Spanning_ID", Length: 32, Decode: DecodeTUMID},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0a01010a": {UL: "AS_10_Spanning_Number", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0a01010b": {UL: "AS_10_Cumulative_Duration", Length: 8, Decode: DecodeTPositionType},
}

type GDMS_AS_10_Core_FrameworkStruct struct {
	InstanceID      TUUID        // IsOptional:true
	AS_10_Shim_Name TUTF16String // IsOptional:false

}

func (g *GDMS_AS_10_Core_FrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_10_Shim_Name)
	code060e2b34010101010d0107010a010101 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 1, 7, 1, 10, 1, 1, 1}, []byte{})
	result = append(result, code060e2b34010101010d0107010a010101...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 7, 1, 10, 1, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDM_AS_11_Core_Framework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0b010101": {UL: "AS_11_Series_Title", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0b010102": {UL: "AS_11_Programme_Title", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0b010103": {UL: "AS_11_Episode_Title_Number", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0b010104": {UL: "AS_11_Shim_Name", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0b01010a": {UL: "AS_11_Shim_Version", Length: 2, Decode: DecodeTVersionType},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0b010105": {UL: "AS_11_Audio_Track_Layout", Length: 1, Decode: DecodeTAS_11_Audio_Track_Layout_Enum},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0b010106": {UL: "AS_11_Primary_Audio_Language", Length: 0, Decode: DecodeTISO_639_2_Language_Code},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0b010107": {UL: "AS_11_Closed_Captions_Present", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0b010108": {UL: "AS_11_Closed_Captions_Type", Length: 1, Decode: DecodeTAS_11_Captions_Type_Enum},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0b010109": {UL: "AS_11_Caption_Language", Length: 0, Decode: DecodeTISO_639_2_Language_Code},
}

type GDM_AS_11_Core_FrameworkStruct struct {
	InstanceID                    TUUID                          // IsOptional:true
	AS_11_Series_Title            TUTF16String                   // IsOptional:false
	AS_11_Programme_Title         TUTF16String                   // IsOptional:false
	AS_11_Episode_Title_Number    TUTF16String                   // IsOptional:false
	AS_11_Shim_Name               TUTF16String                   // IsOptional:false
	AS_11_Shim_Version            TVersionType                   // IsOptional:false
	AS_11_Audio_Track_Layout      TAS_11_Audio_Track_Layout_Enum // IsOptional:false
	AS_11_Primary_Audio_Language  TISO_639_2_Language_Code       // IsOptional:false
	AS_11_Closed_Captions_Present TBoolean                       // IsOptional:false

}

func (g *GDM_AS_11_Core_FrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_11_Series_Title)
	code060e2b34010101010d0107010b010101 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 1, 7, 1, 11, 1, 1, 1}, []byte{})
	result = append(result, code060e2b34010101010d0107010b010101...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_11_Programme_Title)
	code060e2b34010101010d0107010b010102 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 1, 7, 1, 11, 1, 1, 2}, []byte{})
	result = append(result, code060e2b34010101010d0107010b010102...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_11_Episode_Title_Number)
	code060e2b34010101010d0107010b010103 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 1, 7, 1, 11, 1, 1, 3}, []byte{})
	result = append(result, code060e2b34010101010d0107010b010103...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_11_Shim_Name)
	code060e2b34010101010d0107010b010104 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 1, 7, 1, 11, 1, 1, 4}, []byte{})
	result = append(result, code060e2b34010101010d0107010b010104...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTVersionType(g.AS_11_Shim_Version)
	code060e2b34010101010d0107010b01010a := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 1, 7, 1, 11, 1, 1, 10}, []byte{})
	result = append(result, code060e2b34010101010d0107010b01010a...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAS_11_Audio_Track_Layout_Enum(g.AS_11_Audio_Track_Layout)
	code060e2b34010101010d0107010b010105 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 1, 7, 1, 11, 1, 1, 5}, []byte{})
	result = append(result, code060e2b34010101010d0107010b010105...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTISO_639_2_Language_Code(g.AS_11_Primary_Audio_Language)
	code060e2b34010101010d0107010b010106 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 1, 7, 1, 11, 1, 1, 6}, []byte{})
	result = append(result, code060e2b34010101010d0107010b010106...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTBoolean(g.AS_11_Closed_Captions_Present)
	code060e2b34010101010d0107010b010107 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 1, 7, 1, 11, 1, 1, 7}, []byte{})
	result = append(result, code060e2b34010101010d0107010b010107...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 7, 1, 11, 1, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDM_AS_11_Segmentation_Framework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0b020101": {UL: "AS_11_Part_Number", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0b020102": {UL: "AS_11_Part_Total", Length: 2, Decode: DecodeTUInt16},
}

type GDM_AS_11_Segmentation_FrameworkStruct struct {
	InstanceID        TUUID  // IsOptional:true
	AS_11_Part_Number uint16 // IsOptional:false
	AS_11_Part_Total  uint16 // IsOptional:false

}

func (g *GDM_AS_11_Segmentation_FrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.AS_11_Part_Number)
	code060e2b34010101010d0107010b020101 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 1, 7, 1, 11, 2, 1, 1}, []byte{})
	result = append(result, code060e2b34010101010d0107010b020101...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.AS_11_Part_Total)
	code060e2b34010101010d0107010b020102 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 1, 7, 1, 11, 2, 1, 2}, []byte{})
	result = append(result, code060e2b34010101010d0107010b020102...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 7, 1, 11, 2, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDMS_AS_12_Framework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0c010101": {UL: "AS_12_ShimName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d010701.0c010102": {UL: "AS_12_Slate", Length: 0, Decode: DecodeTStrongReference},
}

type GDMS_AS_12_FrameworkStruct struct {
	InstanceID     TUUID            // IsOptional:true
	AS_12_ShimName TUTF16String     // IsOptional:false
	AS_12_Slate    TStrongReference // IsOptional:false

}

func (g *GDMS_AS_12_FrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_12_ShimName)
	code060e2b34010101010d0107010c010101 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 1, 7, 1, 12, 1, 1, 1}, []byte{})
	result = append(result, code060e2b34010101010d0107010c010101...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTStrongReference(g.AS_12_Slate)
	code060e2b34010101010d0107010c010102 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 1, 7, 1, 12, 1, 1, 2}, []byte{})
	result = append(result, code060e2b34010101010d0107010c010102...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 7, 1, 12, 1, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAS_12_DescriptiveObject = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GAS_12_DescriptiveObjectStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GAS_12_DescriptiveObjectStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 1, 7, 1, 12, 1, 2, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GEBUCoreMainFramework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020101.01000000": {UL: "documentLocator", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020101.02000000": {UL: "documentId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020101.03000000": {UL: "coreMetadataObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020101.04000000": {UL: "metadataSchemaInformationObject", Length: 0, Decode: DecodeTStrongReference},
}

type GEBUCoreMainFrameworkStruct struct {
	InstanceID         TUUID            // IsOptional:true
	coreMetadataObject TStrongReference // IsOptional:false

}

func (g *GEBUCoreMainFrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTStrongReference(g.coreMetadataObject)
	code060e2b34010101010d02010103000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 2, 1, 1, 3, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101010d02010103000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 1, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GcoreMetadata = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.01000000": {UL: "identifierObjects", Length: 0, Decode: DecodeTidentifierStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.02000000": {UL: "titleObjects", Length: 0, Decode: DecodeTtitleStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.03000000": {UL: "alternativeTitleObjects", Length: 0, Decode: DecodeTalternativeTitleStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.04000000": {UL: "creatorEntityObjects", Length: 0, Decode: DecodeTentityStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.05000000": {UL: "subjectObjects", Length: 0, Decode: DecodeTsubjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.06000000": {UL: "descriptionObjects", Length: 0, Decode: DecodeTdescriptionStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.07000000": {UL: "publisherEntityObjects", Length: 0, Decode: DecodeTentityStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.08000000": {UL: "contributorEntityObjects", Length: 0, Decode: DecodeTentityStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.09000000": {UL: "dateObjects", Length: 0, Decode: DecodeTdateStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.0a000000": {UL: "typeObjects", Length: 0, Decode: DecodeTtypeStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.0b000000": {UL: "languageObjects", Length: 0, Decode: DecodeTlanguageStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.0c000000": {UL: "coverageObjects", Length: 0, Decode: DecodeTcoverageStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.0d000000": {UL: "rightsObjects", Length: 0, Decode: DecodeTrightsStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.0e000000": {UL: "ratingObjects", Length: 0, Decode: DecodeTratingStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.0f000000": {UL: "versionObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020102.10000000": {UL: "publicationHistoryObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020102.11000000": {UL: "planningObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020102.12000000": {UL: "customRelationObjects", Length: 0, Decode: DecodeTcustomRelationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.13000000": {UL: "basicRelationObjects", Length: 0, Decode: DecodeTbasicRelationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.14000000": {UL: "formatObjects", Length: 0, Decode: DecodeTformatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.15000000": {UL: "partObjects", Length: 0, Decode: DecodeTpartStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.16000000": {UL: "audienceRatingObjects", Length: 0, Decode: DecodeTaudienceStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020102.17000000": {UL: "eventObjects", Length: 0, Decode: DecodeTeventStrongReferenceSet},
}

type GcoreMetadataStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GcoreMetadataStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 2, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GmetadataSchemaInformation = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020103.01000000": {UL: "metadataSchema", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020103.02000000": {UL: "metadataSchemaVersion", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020103.03000000": {UL: "metadataFrameworkTextLanguageCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020103.04000000": {UL: "metadataNamespacePrefix", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020103.05000000": {UL: "metadataNamespace", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020103.06000000": {UL: "metadataProviderEntityObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020103.07000000": {UL: "metadataDateLastModified", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d020103.08000000": {UL: "metadataTimeLastModified", Length: 4, Decode: DecodeTTimeStruct},
}

type GmetadataSchemaInformationStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GmetadataSchemaInformationStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 3, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gidentifier = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020104.01000000": {UL: "identifierValue", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020104.02000000": {UL: "identifierNote", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020104.03000000": {UL: "identifierTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020104.04000000": {UL: "identifierFormatGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020104.05000000": {UL: "identifierAttributorEntityObject", Length: 0, Decode: DecodeTStrongReference},
}

type GidentifierStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GidentifierStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 4, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gtitle = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020105.01000000": {UL: "titleAttributionDate", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020105.02000000": {UL: "titleNote", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020105.03000000": {UL: "titleValueObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020105.04000000": {UL: "titleLength", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010101.0d020105.05000000": {UL: "titleGeographicalScope", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020105.06000000": {UL: "titleGeographicalExclusionScope", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020105.07000000": {UL: "titleTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GtitleStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtitleStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 5, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GalternativeTitle = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020106.01000000": {UL: "alternativeTitleAttributionDate", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020106.02000000": {UL: "alternativeTitleNote", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020106.03000000": {UL: "alternativeTitleValueObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020106.04000000": {UL: "alternativeTitleTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020106.05000000": {UL: "alternativeTitleStatusGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020106.06000000": {UL: "alternativeTitleLength", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010101.0d020106.07000000": {UL: "alternativeTitleGeographicalScope", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020106.08000000": {UL: "alternativeTitleGeographicalExclusionScope", Length: 0, Decode: DecodeTUTF16String},
}

type GalternativeTitleStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GalternativeTitleStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 6, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gsubject = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020108.01000000": {UL: "subjectCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020108.02000000": {UL: "subjectNote", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020108.03000000": {UL: "subjectValueObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020108.04000000": {UL: "subjectDefinitionObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020108.05000000": {UL: "subjectTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020108.06000000": {UL: "subjectAttributorEntityObject", Length: 0, Decode: DecodeTStrongReference},
}

type GsubjectStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GsubjectStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 8, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gdescription = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020109.01000000": {UL: "descriptionNote", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020109.02000000": {UL: "descriptionValueObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020109.03000000": {UL: "descriptionTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020109.04000000": {UL: "descriptionAttributorEntityObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020109.05000000": {UL: "descriptionLength", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010101.0d020109.06000000": {UL: "descriptionGeographicalScope", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020109.07000000": {UL: "descriptionGeographicalExclusionScope", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020109.08000000": {UL: "descriptionAttributionDate", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d020109.09000000": {UL: "descriptionCastFlag", Length: 1, Decode: DecodeTBoolean},
}

type GdescriptionStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GdescriptionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 9, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gdate = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02010c.01000000": {UL: "dateCreated", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d02010c.02000000": {UL: "yearCreated", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d02010c.03000000": {UL: "dateIssued", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d02010c.04000000": {UL: "yearIssued", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d02010c.05000000": {UL: "dateModified", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d02010c.06000000": {UL: "yearModified", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d02010c.07000000": {UL: "dateDigitized", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d02010c.08000000": {UL: "yearDigitized", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d02010c.09000000": {UL: "dateReleased", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d02010c.0a000000": {UL: "yearReleased", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d02010c.0b000000": {UL: "dateCopyrighted", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d02010c.0c000000": {UL: "yearCopyrighted", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d02010c.0d000000": {UL: "dateNote", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02010c.0e000000": {UL: "alternativeDateObjects", Length: 0, Decode: DecodeTdateTypeStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02010c.0f000000": {UL: "precision", Length: 0, Decode: DecodeTUTF16String},
}

type GdateStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GdateStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 12, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GdateType = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02010d.01000000": {UL: "dateValue", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d02010d.02000000": {UL: "textualDateObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02010d.03000000": {UL: "dateTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02010d.04000000": {UL: "dateFormatGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GdateTypeStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GdateTypeStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 13, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gtype = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02010e.01000000": {UL: "typeNote", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02010e.02000000": {UL: "typeValueObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02010e.03000000": {UL: "objectTypeObjects", Length: 0, Decode: DecodeTobjectTypeStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02010e.04000000": {UL: "genreObjects", Length: 0, Decode: DecodeTgenreStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02010e.05000000": {UL: "targetAudienceObjects", Length: 0, Decode: DecodeTtargetAudienceStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02010e.06000000": {UL: "typeTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02010e.07000000": {UL: "audienceLevelObjects", Length: 0, Decode: DecodeTaudienceStrongReferenceSet},
}

type GtypeStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtypeStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 14, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GobjectType = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02010f.01000000": {UL: "objectTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GobjectTypeStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GobjectTypeStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 15, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Ggenre = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020110.01000000": {UL: "genreTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020110.02000000": {UL: "genreLevel", Length: 0, Decode: DecodeTUTF16String},
}

type GgenreStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GgenreStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 16, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GtargetAudience = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020111.01000000": {UL: "targetAudienceReason", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020111.02000000": {UL: "targetAudienceLinkToLogo", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020111.03000000": {UL: "targetAudienceNotRatedFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020111.04000000": {UL: "targetAudienceAdultContentFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020111.05000000": {UL: "targetAudienceTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020111.06000000": {UL: "targetAudienceRegionObjects", Length: 0, Decode: DecodeTregionStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020111.07000000": {UL: "targetAudienceExclusionRegionObjects", Length: 0, Decode: DecodeTregionStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020111.08000000": {UL: "targetAudienceFormatGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GtargetAudienceStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtargetAudienceStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 17, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Glanguage = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020112.01000000": {UL: "languageCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020112.02000000": {UL: "languageValueObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020112.03000000": {UL: "languageNote", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020112.04000000": {UL: "languagePurposeObject", Length: 0, Decode: DecodeTStrongReference},
}

type GlanguageStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GlanguageStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 18, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gcoverage = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020113.01000000": {UL: "coverageValueObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020113.02000000": {UL: "spatialObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020113.03000000": {UL: "temporalObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020113.04000000": {UL: "coverageTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GcoverageStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GcoverageStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 19, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gspatial = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020114.01000000": {UL: "locationObjects", Length: 0, Decode: DecodeTlocationStrongReferenceSet},
}

type GspatialStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GspatialStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 20, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Glocation = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020115.01000000": {UL: "locationID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020115.02000000": {UL: "locationCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020115.03000000": {UL: "locationDefinitionNote", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020115.04000000": {UL: "locationNameObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020115.05000000": {UL: "locationRegionObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020115.06000000": {UL: "locationTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020115.07000000": {UL: "locationCoordinatesObject", Length: 0, Decode: DecodeTStrongReference},
}

type GlocationStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GlocationStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 21, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gcoordinates = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020116.01000000": {UL: "posX", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020116.02000000": {UL: "posY", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020116.03000000": {UL: "coordinatesFormatGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GcoordinatesStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GcoordinatesStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 22, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gtemporal = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020117.01000000": {UL: "temporalDefinitionNote", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020117.02000000": {UL: "periodOfTimeObjects", Length: 0, Decode: DecodeTperiodOfTimeStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020117.03000000": {UL: "temporalTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GtemporalStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtemporalStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 23, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GperiodOfTime = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020118.01000000": {UL: "periodID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020118.02000000": {UL: "periodStartYear", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d020118.03000000": {UL: "periodStartDate", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d020118.04000000": {UL: "periodStartTime", Length: 4, Decode: DecodeTTimeStruct},
	"urn:smpte:ul:060e2b34.01010101.0d020118.05000000": {UL: "periodEndYear", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d020118.06000000": {UL: "periodEndDate", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d020118.07000000": {UL: "periodEndTime", Length: 4, Decode: DecodeTTimeStruct},
	"urn:smpte:ul:060e2b34.01010101.0d020118.08000000": {UL: "periodNameObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
}

type GperiodOfTimeStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GperiodOfTimeStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 24, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Grights = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020119.01000000": {UL: "rightsID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020119.02000000": {UL: "rightsLink", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020119.03000000": {UL: "rightsClearanceFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020119.04000000": {UL: "rightsNote", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020119.05000000": {UL: "rightsValueObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020119.06000000": {UL: "exploitationIssuesObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020119.07000000": {UL: "copyrightStatementObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020119.09000000": {UL: "rightsHolderEntityObjects", Length: 0, Decode: DecodeTentityStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020119.0a000000": {UL: "rightsContactObjects", Length: 0, Decode: DecodeTcontactStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020119.0b000000": {UL: "rightsTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020119.0c000000": {UL: "rightsAttributedIDObjects", Length: 0, Decode: DecodeTidentifierStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020119.0d000000": {UL: "rightsFormatReferenceObjects", Length: 0, Decode: DecodeTIDRefStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020119.0e000000": {UL: "processingRestrictionFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020119.0f000000": {UL: "disclaimerObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020119.10000000": {UL: "rightsCoverageObjects", Length: 0, Decode: DecodeTcoverageStrongReferenceSet},
}

type GrightsStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GrightsStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 25, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gversion = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02011a.01000000": {UL: "versionValueObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02011a.02000000": {UL: "versionTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GversionStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GversionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 26, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Grating = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02011b.01000000": {UL: "ratingReason", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02011b.02000000": {UL: "ratingLinkToLogo", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02011b.03000000": {UL: "ratingNotRatedFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d02011b.04000000": {UL: "ratingAdultContentFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d02011b.05000000": {UL: "ratingValueObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02011b.06000000": {UL: "ratingScaleMinValueObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02011b.07000000": {UL: "ratingScaleMaxValueObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02011b.08000000": {UL: "ratingTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02011b.09000000": {UL: "ratingFormatGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02011b.0a000000": {UL: "ratingProviderEntityObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02011b.0c000000": {UL: "ratingSystem", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02011b.0d000000": {UL: "ratingEnvironment", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02011b.0e000000": {UL: "ratingLink", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02011b.0f000000": {UL: "ratingExclusionRegionObjects", Length: 0, Decode: DecodeTregionStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02011b.10000000": {UL: "ratingRegionObjects", Length: 0, Decode: DecodeTregionStrongReferenceSet},
}

type GratingStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GratingStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 27, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GpublicationEvent = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02011c.01000000": {UL: "publicationEventName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02011c.02000000": {UL: "publicationEventId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02011c.03000000": {UL: "firstShowingFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d02011c.04000000": {UL: "lastShowingFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d02011c.05000000": {UL: "publicationDate", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d02011c.06000000": {UL: "publicationTime", Length: 4, Decode: DecodeTTimeStruct},
	"urn:smpte:ul:060e2b34.01010101.0d02011c.07000000": {UL: "scheduleDate", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d02011c.08000000": {UL: "freePublicationFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d02011c.09000000": {UL: "livePublicationFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d02011c.0a000000": {UL: "publicationNote", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02011c.0b000000": {UL: "publicationFormatReferenceObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02011c.0c000000": {UL: "publicationRightsReferenceObjects", Length: 0, Decode: DecodeTIDRefStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02011c.0d000000": {UL: "publicationRegionObjects", Length: 0, Decode: DecodeTregionStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02011c.0e000000": {UL: "publicationMediumObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02011c.0f000000": {UL: "publicationChannelObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02011c.10000000": {UL: "publicationServiceObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02011c.11000000": {UL: "liveProductionFlag", Length: 1, Decode: DecodeTBoolean},
}

type GpublicationEventStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GpublicationEventStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 28, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GpublicationHistory = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02011d.01000000": {UL: "publicationEventObjects", Length: 0, Decode: DecodeTpublicationEventStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02011d.02000000": {UL: "publicationHistoryId", Length: 0, Decode: DecodeTUTF16String},
}

type GpublicationHistoryStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GpublicationHistoryStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 29, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GpublicationChannel = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02011e.01000000": {UL: "publicationChannelName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02011e.02000000": {UL: "publicationChannelId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02011e.03000000": {UL: "publicationChannelLinkToLogo", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02011e.04000000": {UL: "publicationChannelTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GpublicationChannelStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GpublicationChannelStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 30, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GpublicationMedium = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02011f.01000000": {UL: "publicationMediumName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02011f.02000000": {UL: "publicationMediumId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02011f.03000000": {UL: "publicationMediumTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GpublicationMediumStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GpublicationMediumStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 31, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GpublicationService = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020120.01000000": {UL: "publicationServiceName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020120.02000000": {UL: "publicationServiceLinkToLogo", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020120.03000000": {UL: "publicationServiceSourceObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020120.04000000": {UL: "publicationServiceId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020120.05000000": {UL: "publicationServiceTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GpublicationServiceStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GpublicationServiceStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 32, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gentity = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020121.01000000": {UL: "entityID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020121.02000000": {UL: "entityContactObjects", Length: 0, Decode: DecodeTcontactStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020121.03000000": {UL: "entityOrganizationObjects", Length: 0, Decode: DecodeTorganizationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020121.04000000": {UL: "entityRoleObjects", Length: 0, Decode: DecodeTroleStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020121.05000000": {UL: "entityAwardObjects", Length: 0, Decode: DecodeTawardStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020121.06000000": {UL: "entityEventObjects", Length: 0, Decode: DecodeTeventStrongReferenceSet},
}

type GentityStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GentityStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 33, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gcontact = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020122.01000000": {UL: "contactID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020122.02000000": {UL: "familiyName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020122.03000000": {UL: "givenName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020122.04000000": {UL: "salutation", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020122.05000000": {UL: "suffix", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020122.06000000": {UL: "occupation", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020122.07000000": {UL: "username", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020122.08000000": {UL: "guestFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020122.09000000": {UL: "contactNameObjects", Length: 0, Decode: DecodeTcompoundNameStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020122.0a000000": {UL: "contactTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020122.0b000000": {UL: "contactDetailsObjects", Length: 0, Decode: DecodeTdetailsStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020122.0c000000": {UL: "contactRelatedContactObjects", Length: 0, Decode: DecodeTcontactStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020122.0d000000": {UL: "stageNameObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020122.0e000000": {UL: "genderObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020122.0f000000": {UL: "contactRelatedInformationLinkObjects", Length: 0, Decode: DecodeTbasicLinkStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020122.10000000": {UL: "otherGivenName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020122.11000000": {UL: "birthDate", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d020122.12000000": {UL: "deathDate", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d020122.13000000": {UL: "birthPlace", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020122.14000000": {UL: "nationality", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020122.15000000": {UL: "nickname", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020122.16000000": {UL: "skill", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020122.17000000": {UL: "contactLastUpdate", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d020122.18000000": {UL: "deathPlace", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020122.19000000": {UL: "affiliationObjects", Length: 0, Decode: DecodeTaffiliationStrongReferenceSet},
}

type GcontactStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GcontactStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 34, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gorganization = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020123.01000000": {UL: "organizationID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020123.02000000": {UL: "organizationLinkToLogo", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020123.03000000": {UL: "organizationCodeObjects", Length: 0, Decode: DecodeTidentifierStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020123.04000000": {UL: "organizationRelatedInformationLinkObjects", Length: 0, Decode: DecodeTbasicLinkStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020123.05000000": {UL: "organizationNameObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020123.06000000": {UL: "organizationDepartmentObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020123.07000000": {UL: "organizationTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020123.08000000": {UL: "organizationDetailsObjects", Length: 0, Decode: DecodeTdetailsStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020123.09000000": {UL: "organizationRelatedContactObjects", Length: 0, Decode: DecodeTcontactStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020123.0a000000": {UL: "organizationDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020123.0b000000": {UL: "organizationNationality", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020123.0c000000": {UL: "organizationLastUpdate", Length: 4, Decode: DecodeTDateStruct},
}

type GorganizationStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GorganizationStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 35, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gdepartment = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020124.01000000": {UL: "departmentID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020124.02000000": {UL: "departmentName", Length: 0, Decode: DecodeTUTF16String},
}

type GdepartmentStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GdepartmentStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 36, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gdetails = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020125.01000000": {UL: "webAddress", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020125.02000000": {UL: "telephoneNumber", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020125.03000000": {UL: "mobileTelephoneNumber", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020125.04000000": {UL: "emailAddress", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020125.05000000": {UL: "detailsTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020125.06000000": {UL: "addressObject", Length: 0, Decode: DecodeTStrongReference},
}

type GdetailsStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GdetailsStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 37, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gaddress = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020126.01000000": {UL: "deliveryCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020126.02000000": {UL: "townCityObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020126.03000000": {UL: "countyStateObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020126.04000000": {UL: "countryObjects", Length: 0, Decode: DecodeTcountryTypeStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020126.05000000": {UL: "addressLineObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
}

type GaddressStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaddressStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 38, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gregion = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020127.01000000": {UL: "countryObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020127.02000000": {UL: "countryRegionObject", Length: 0, Decode: DecodeTStrongReference},
}

type GregionStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GregionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 39, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GcompoundName = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020128.01000000": {UL: "compoundNameValue", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020128.02000000": {UL: "compoundNameTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020128.03000000": {UL: "compoundNameFormatGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GcompoundNameStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GcompoundNameStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 40, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Grole = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020129.01000000": {UL: "costCenterReference", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020129.02000000": {UL: "roleTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GroleStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GroleStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 41, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GcountryType = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02012a.01000000": {UL: "countryTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GcountryTypeStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GcountryTypeStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 42, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GcustomRelation = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.01010000": {UL: "customRelationByName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.01020000": {UL: "customRelationLink", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.01030000": {UL: "runningOrderNumber", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.01040000": {UL: "totalNumberOfGroupMembers", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.01050000": {UL: "orderedGroupFlag", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.01060000": {UL: "customRelationNote", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.01070000": {UL: "customRelationTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.01080000": {UL: "customRelationIdentifierObject", Length: 0, Decode: DecodeTStrongReference},
}

type GcustomRelationStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GcustomRelationStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 43, 1, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GbasicRelation = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.02010000": {UL: "isVersionOf", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.02020000": {UL: "hasVersion", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.02030000": {UL: "isReplacedBy", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.02040000": {UL: "replaces", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.02050000": {UL: "isRequiredBy", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.02060000": {UL: "requires", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.02070000": {UL: "isPartOf", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.02080000": {UL: "hasPart", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.02090000": {UL: "isReferencedBy", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.020a0000": {UL: "references", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.020b0000": {UL: "isFormatOf", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.020c0000": {UL: "hasFormat", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.020d0000": {UL: "isEpisodeOf", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.020e0000": {UL: "isMemberOf", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.020f0000": {UL: "hasMember", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.02100000": {UL: "hasEpisode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.02110000": {UL: "isSeasonOf", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.02120000": {UL: "hasSeason", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.02130000": {UL: "isNextInSequence", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.02140000": {UL: "followsInSequence", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.02150000": {UL: "isRelatedTo", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.02160000": {UL: "sameAs", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.02170000": {UL: "hasSeries", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012b.02180000": {UL: "isSeriesOf", Length: 0, Decode: DecodeTUTF16String},
}

type GbasicRelationStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GbasicRelationStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 43, 2, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gplanning = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02012c.01000000": {UL: "planningEventObjects", Length: 0, Decode: DecodeTpublicationEventStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02012c.02000000": {UL: "planningId", Length: 0, Decode: DecodeTUTF16String},
}

type GplanningStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GplanningStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 44, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GtypeGroup = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.01010000": {UL: "typeGroupThesaurus", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.01020000": {UL: "typeGroupLabel", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.01030000": {UL: "typeGroupLink", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.01040000": {UL: "typeGroupUL", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.01050000": {UL: "typeGroupDefinition", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.01060000": {UL: "typeGroupLanguageCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.01070000": {UL: "typeGroupNamespace", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.01080000": {UL: "typeGroupSource", Length: 0, Decode: DecodeTUTF16String},
}

type GtypeGroupStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtypeGroupStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 45, 1, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GformatGroup = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.02010000": {UL: "formatGroupThesaurus", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.02020000": {UL: "formatGroupLabel", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.02030000": {UL: "formatGroupLink", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.02040000": {UL: "formatGroupUL", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.02050000": {UL: "formatGroupDefinition", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.02060000": {UL: "formatGroupLanguageCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.02070000": {UL: "formatGroupNamespace", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.02080000": {UL: "formatGroupSource", Length: 0, Decode: DecodeTUTF16String},
}

type GformatGroupStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GformatGroupStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 45, 2, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GstatusGroup = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.03010000": {UL: "statusGroupThesaurus", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.03020000": {UL: "statusGroupLabel", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.03030000": {UL: "statusGroupLink", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.03040000": {UL: "statusGroupUL", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.03050000": {UL: "statusGroupDefinition", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.03060000": {UL: "statusGroupLanguageCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.03070000": {UL: "statusGroupNamespace", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012d.03080000": {UL: "statusGroupSource", Length: 0, Decode: DecodeTUTF16String},
}

type GstatusGroupStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GstatusGroupStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 45, 3, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GtextualAnnotation = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02012e.01000000": {UL: "text", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02012e.02000000": {UL: "textLanguageCode", Length: 0, Decode: DecodeTUTF16String},
}

type GtextualAnnotationStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtextualAnnotationStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 46, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GbasicLink = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02012f.01000000": {UL: "basicLinkUri", Length: 0, Decode: DecodeTUTF16String},
}

type GbasicLinkStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GbasicLinkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 47, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gformat = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.01000000": {UL: "formatID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020130.02000000": {UL: "formatVersionID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020130.03000000": {UL: "formatName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020130.04000000": {UL: "formatDefinition", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020130.05000000": {UL: "formatYearCreated", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d020130.06000000": {UL: "formatDateCreated", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d020130.07000000": {UL: "formatOverallDurationTimeObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020130.08000000": {UL: "formatEditRateObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020130.09000000": {UL: "formatContainerFormatObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020130.0b000000": {UL: "formatPackageInfoObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020130.0c000000": {UL: "formatAudioFormatObjects", Length: 0, Decode: DecodeTaudioFormatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.0d000000": {UL: "formatVideoFormatObjects", Length: 0, Decode: DecodeTvideoFormatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.0e000000": {UL: "formatImageFormatObjects", Length: 0, Decode: DecodeTimageFormatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.0f000000": {UL: "formatDataFormatObjects", Length: 0, Decode: DecodeTdataFormatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.10000000": {UL: "formatSigningFormatObjects", Length: 0, Decode: DecodeTsigningFormatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.11000000": {UL: "formatTechnicalAttributeStringObjects", Length: 0, Decode: DecodeTtechnicalAttributeStringStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.12000000": {UL: "formatTechnicalAttributeInt8Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt8StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.13000000": {UL: "formatTechnicalAttributeInt16Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt16StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.14000000": {UL: "formatTechnicalAttributeInt32Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt32StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.15000000": {UL: "formatTechnicalAttributeInt64Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt64StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.16000000": {UL: "formatTechnicalAttributeUInt8Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt8StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.17000000": {UL: "formatTechnicalAttributeUInt16Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt16StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.18000000": {UL: "formatTechnicalAttributeUInt32Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt32StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.19000000": {UL: "formatTechnicalAttributeUInt64Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt64StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.1a000000": {UL: "formatTechnicalAttributeFloatObjects", Length: 0, Decode: DecodeTtechnicalAttributeFloatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.1b000000": {UL: "formatTechnicalAttributeRationalObjects", Length: 0, Decode: DecodeTtechnicalAttributeRationalStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.1c000000": {UL: "formatTechnicalAttributeAnyURIObjects", Length: 0, Decode: DecodeTtechnicalAttributeAnyURIStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.1d000000": {UL: "formatTechnicalAttributeBooleanObjects", Length: 0, Decode: DecodeTtechnicalAttributeBooleanStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.1e000000": {UL: "formatDateModifiedObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020130.1f000000": {UL: "formatValueObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020130.20000000": {UL: "formatTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020130.21000000": {UL: "formatAudioFormatExtendedObjects", Length: 0, Decode: DecodeTaudioFormatExtendedStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.22000000": {UL: "formatStartTimeObjects", Length: 0, Decode: DecodeTtimeStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.23000000": {UL: "formatEndTimeObjects", Length: 0, Decode: DecodeTtimeStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.24000000": {UL: "formatDurationTimeObjects", Length: 0, Decode: DecodeTtimeStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.25000000": {UL: "formatMetadataFormatObjects", Length: 0, Decode: DecodeTmetadataFormatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.26000000": {UL: "formatTimecodeFormatObjects", Length: 0, Decode: DecodeTtimecodeFormatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020130.27000000": {UL: "formatMediumObjects", Length: 0, Decode: DecodeTmediumStrongReferenceSet},
}

type GformatStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GformatStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 48, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GvideoFormat = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020131.01000000": {UL: "videoFormatID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020131.02000000": {UL: "videoFormatVersionId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020131.03000000": {UL: "videoFormatName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020131.04000000": {UL: "videoFormatDefinition", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020131.05000000": {UL: "videoBitRateObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020131.06000000": {UL: "videoMaxBitRateObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020131.07000000": {UL: "videoBitRateMode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020131.08000000": {UL: "videoScanningFormat", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020131.09000000": {UL: "videoScanningOrder", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020131.0a000000": {UL: "videoActiveLines", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.0d020131.0b000000": {UL: "videoNoiseFilterFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020131.0c000000": {UL: "videoNoiseFilterObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020131.0d000000": {UL: "video3DFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020131.0e000000": {UL: "videoAspectRatioObjects", Length: 0, Decode: DecodeTaspectRatioStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020131.0f000000": {UL: "videoFrameRateObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020131.10000000": {UL: "videoHeightObjects", Length: 0, Decode: DecodeTheightStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020131.11000000": {UL: "videoWidthObjects", Length: 0, Decode: DecodeTwidthStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020131.12000000": {UL: "videoEncodingObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020131.13000000": {UL: "videoCodecObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020131.14000000": {UL: "videoTrackObjects", Length: 0, Decode: DecodeTtrackStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020131.15000000": {UL: "videoPresenceFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020131.16000000": {UL: "videoRegionDelimXObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020131.17000000": {UL: "videoRegionDelimYObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020131.18000000": {UL: "videoFormatProfile", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020131.19000000": {UL: "videoFormatProfileLevel", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020131.1a000000": {UL: "videoNote", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020131.1b000000": {UL: "videoTechnicalAttributeStringObjects", Length: 0, Decode: DecodeTtechnicalAttributeStringStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020131.1c000000": {UL: "videoTechnicalAttributeInt8Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt8StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020131.1d000000": {UL: "videoTechnicalAttributeInt16Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt16StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020131.1e000000": {UL: "videoTechnicalAttributeInt32Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt32StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020131.1f000000": {UL: "videoTechnicalAttributeInt64Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt64StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020131.20000000": {UL: "videoTechnicalAttributeUInt8Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt8StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020131.21000000": {UL: "videoTechnicalAttributeUInt16Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt16StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020131.22000000": {UL: "videoTechnicalAttributeUInt32Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt32StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020131.23000000": {UL: "videoTechnicalAttributeUInt64Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt64StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020131.24000000": {UL: "videoTechnicalAttributeFloatObjects", Length: 0, Decode: DecodeTtechnicalAttributeFloatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020131.25000000": {UL: "videoTechnicalAttributeRationalObjects", Length: 0, Decode: DecodeTtechnicalAttributeRationalStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020131.26000000": {UL: "videoTechnicalAttributeAnyURIObjects", Length: 0, Decode: DecodeTtechnicalAttributeAnyURIStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020131.27000000": {UL: "videoTechnicalAttributeBooleanObjects", Length: 0, Decode: DecodeTtechnicalAttributeBooleanStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020131.28000000": {UL: "videoFilterObjects", Length: 0, Decode: DecodeTfilterStrongReferenceSet},
}

type GvideoFormatStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GvideoFormatStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 49, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GimageFormat = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020132.01000000": {UL: "imageFormatID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020132.02000000": {UL: "imageFormatVersionId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020132.03000000": {UL: "imageFormatName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020132.04000000": {UL: "imageFormatDefinition", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020132.05000000": {UL: "imageOrientation", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020132.06000000": {UL: "imageAspectRatioObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020132.07000000": {UL: "imageEncodingObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020132.08000000": {UL: "imageCodecObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020132.09000000": {UL: "imageHeightObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020132.0a000000": {UL: "imageWidthObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020132.0b000000": {UL: "imagePresenceFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020132.0c000000": {UL: "imageRegionDelimXObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020132.0d000000": {UL: "imageRegionDelimYObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020132.0e000000": {UL: "imageFormatProfile", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020132.0f000000": {UL: "imageFormatProfileLevel", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020132.10000000": {UL: "imageNote", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020132.11000000": {UL: "imageTechnicalAttributeStringObjects", Length: 0, Decode: DecodeTtechnicalAttributeStringStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020132.12000000": {UL: "imageTechnicalAttributeInt8Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt8StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020132.13000000": {UL: "imageTechnicalAttributeInt16Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt16StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020132.14000000": {UL: "imageTechnicalAttributeInt32Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt32StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020132.15000000": {UL: "imageTechnicalAttributeInt64Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt64StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020132.16000000": {UL: "imageTechnicalAttributeUInt8Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt8StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020132.17000000": {UL: "imageTechnicalAttributeUInt16Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt16StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020132.18000000": {UL: "imageTechnicalAttributeUInt32Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt32StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020132.19000000": {UL: "imageTechnicalAttributeUInt64Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt64StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020132.1a000000": {UL: "imageTechnicalAttributeFloatObjects", Length: 0, Decode: DecodeTtechnicalAttributeFloatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020132.1b000000": {UL: "imageTechnicalAttributeRationalObjects", Length: 0, Decode: DecodeTtechnicalAttributeRationalStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020132.1c000000": {UL: "imageTechnicalAttributeAnyURIObjects", Length: 0, Decode: DecodeTtechnicalAttributeAnyURIStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020132.1d000000": {UL: "imageTechnicalAttributeBooleanObjects", Length: 0, Decode: DecodeTtechnicalAttributeBooleanStrongReferenceSet},
}

type GimageFormatStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GimageFormatStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 50, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioFormat = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020133.01000000": {UL: "audioFormatID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020133.02000000": {UL: "audioFormatVersionId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020133.03000000": {UL: "audioFormatName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020133.04000000": {UL: "audioFormatDefinition", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020133.05000000": {UL: "audioTrackConfiguration", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020133.06000000": {UL: "audioSamplingSize", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010101.0d020133.07000000": {UL: "audioSamplingType", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020133.08000000": {UL: "audioTotalNumberOfChannels", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010101.0d020133.09000000": {UL: "audioBitRateObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020133.0a000000": {UL: "audioMaxBitRateObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020133.0b000000": {UL: "audioBitRateMode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020133.0c000000": {UL: "audioSamplingRateObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020133.0d000000": {UL: "audioEncodingObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020133.0e000000": {UL: "audioCodecObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020133.0f000000": {UL: "audioTrackObjects", Length: 0, Decode: DecodeTtrackStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020133.10000000": {UL: "audioPresenceFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020133.11000000": {UL: "audioFormatProfile", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020133.12000000": {UL: "audioFormatProfileLevel", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020133.13000000": {UL: "audioNote", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020133.14000000": {UL: "audioTechnicalAttributeStringObjects", Length: 0, Decode: DecodeTtechnicalAttributeStringStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020133.15000000": {UL: "audioTechnicalAttributeInt8Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt8StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020133.16000000": {UL: "audioTechnicalAttributeInt16Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt16StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020133.17000000": {UL: "audioTechnicalAttributeInt32Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt32StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020133.18000000": {UL: "audioTechnicalAttributeInt64Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt64StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020133.19000000": {UL: "audioTechnicalAttributeUInt8Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt8StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020133.1a000000": {UL: "audioTechnicalAttributeUInt16Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt16StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020133.1b000000": {UL: "audioTechnicalAttributeUInt32Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt32StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020133.1c000000": {UL: "audioTechnicalAttributeUInt64Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt64StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020133.1d000000": {UL: "audioTechnicalAttributeFloatObjects", Length: 0, Decode: DecodeTtechnicalAttributeFloatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020133.1e000000": {UL: "audioTechnicalAttributeRationalObjects", Length: 0, Decode: DecodeTtechnicalAttributeRationalStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020133.1f000000": {UL: "audioTechnicalAttributeAnyURIObjects", Length: 0, Decode: DecodeTtechnicalAttributeAnyURIStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020133.20000000": {UL: "audioTechnicalAttributeBooleanObjects", Length: 0, Decode: DecodeTtechnicalAttributeBooleanStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020133.21000000": {UL: "audioDescriptionPresenceFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020133.22000000": {UL: "audioFilterObjects", Length: 0, Decode: DecodeTfilterStrongReferenceSet},
}

type GaudioFormatStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioFormatStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 51, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gtrack = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020134.01000000": {UL: "trackID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020134.02000000": {UL: "trackName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020134.03000000": {UL: "trackLanguageCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020134.04000000": {UL: "trackTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GtrackStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtrackStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 52, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GdataFormat = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020135.01000000": {UL: "dataFormatID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020135.02000000": {UL: "dataFormatVersionID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020135.03000000": {UL: "dataFormatName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020135.04000000": {UL: "dataFormatDefinition", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020135.05000000": {UL: "dataTrackId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020135.06000000": {UL: "dataTrackName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020135.07000000": {UL: "dataTrackLanguageCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020135.08000000": {UL: "dataPresenceFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020135.09000000": {UL: "captioningObjects", Length: 0, Decode: DecodeTcaptioningStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020135.0a000000": {UL: "subtitlingObjects", Length: 0, Decode: DecodeTsubtitlingStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020135.0b000000": {UL: "ancillaryDataObjects", Length: 0, Decode: DecodeTancillaryDataStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020135.0c000000": {UL: "dataCodecObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020135.0d000000": {UL: "dataFormatProfile", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020135.0e000000": {UL: "dataFormatProfileLevel", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020135.0f000000": {UL: "dataNote", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020135.10000000": {UL: "dataTechnicalAttributeStringObjects", Length: 0, Decode: DecodeTtechnicalAttributeStringStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020135.11000000": {UL: "dataTechnicalAttributeInt8Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt8StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020135.12000000": {UL: "dataTechnicalAttributeInt16Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt16StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020135.13000000": {UL: "dataTechnicalAttributeInt32Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt32StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020135.14000000": {UL: "dataTechnicalAttributeInt64Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt64StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020135.15000000": {UL: "dataTechnicalAttributeUInt8Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt8StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020135.16000000": {UL: "dataTechnicalAttributeUInt16Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt16StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020135.17000000": {UL: "dataTechnicalAttributeUInt32Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt32StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020135.18000000": {UL: "dataTechnicalAttributeUInt64Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt64StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020135.19000000": {UL: "dataTechnicalAttributeFloatObjects", Length: 0, Decode: DecodeTtechnicalAttributeFloatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020135.1a000000": {UL: "dataTechnicalAttributeRationalObjects", Length: 0, Decode: DecodeTtechnicalAttributeRationalStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020135.1b000000": {UL: "dataTechnicalAttributeAnyURIObjects", Length: 0, Decode: DecodeTtechnicalAttributeAnyURIStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020135.1c000000": {UL: "dataTechnicalAttributeBooleanObjects", Length: 0, Decode: DecodeTtechnicalAttributeBooleanStrongReferenceSet},
}

type GdataFormatStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GdataFormatStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 53, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gcaptioning = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020136.01000000": {UL: "captioningFormatID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020136.02000000": {UL: "captioningFormatName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020136.03000000": {UL: "captioningSourceUri", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020136.04000000": {UL: "captioningTrackID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020136.05000000": {UL: "captioningTrackName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020136.06000000": {UL: "captioningLanguageCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020136.07000000": {UL: "closedCaptioningFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020136.08000000": {UL: "captioningTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020136.09000000": {UL: "captioningFormatGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020136.0a000000": {UL: "captioningPresenceFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020136.0b000000": {UL: "captioningFormatProfile", Length: 0, Decode: DecodeTUTF16String},
}

type GcaptioningStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GcaptioningStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 54, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gsubtitling = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020137.01000000": {UL: "subtitlingFormatID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020137.02000000": {UL: "subtitlingFormatName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020137.03000000": {UL: "subtitlingSourceUri", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020137.04000000": {UL: "subtitlingTrackID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020137.05000000": {UL: "subtitlingTrackName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020137.06000000": {UL: "subtitlingLanguageCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020137.07000000": {UL: "closedSubtitlingFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020137.08000000": {UL: "subtitlingTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020137.09000000": {UL: "subtitlingFormatGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020137.0a000000": {UL: "subtitlingPresenceFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020137.0b000000": {UL: "subtitlingFormatProfile", Length: 0, Decode: DecodeTUTF16String},
}

type GsubtitlingStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GsubtitlingStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 55, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GancillaryData = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020138.01000000": {UL: "ancillaryDataFormatId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020138.02000000": {UL: "ancillaryDataFormatName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020138.03000000": {UL: "DID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020138.04000000": {UL: "SDID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020138.05000000": {UL: "lineNumber", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010101.0d020138.06000000": {UL: "ANCWrappingTypeObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020138.07000000": {UL: "ancillaryDataFormatProfile", Length: 0, Decode: DecodeTUTF16String},
}

type GancillaryDataStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GancillaryDataStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 56, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GsigningFormat = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020139.01000000": {UL: "signingFormatID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020139.02000000": {UL: "signingFormatVersionID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020139.03000000": {UL: "signingFormatName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020139.04000000": {UL: "signingTrackID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020139.05000000": {UL: "signingTrackName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020139.06000000": {UL: "signingTrackLanguageCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020139.07000000": {UL: "signingSourceUri", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020139.08000000": {UL: "signingTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020139.09000000": {UL: "signingFormatGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020139.0a000000": {UL: "signingPresenceFlag", Length: 1, Decode: DecodeTBoolean},
}

type GsigningFormatStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GsigningFormatStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 57, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GtechnicalAttributeString = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.01010000": {UL: "technicalAttributeStringValue", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.01020000": {UL: "technicalAttributeStringTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.01030000": {UL: "technicalAttributeStringFormatGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GtechnicalAttributeStringStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtechnicalAttributeStringStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 58, 1, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GtechnicalAttributeInt8 = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.02010000": {UL: "technicalAttributeInt8Value", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.02020000": {UL: "technicalAttributeInt8TypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.02030000": {UL: "technicalAttributeInt8Unit", Length: 0, Decode: DecodeTUTF16String},
}

type GtechnicalAttributeInt8Struct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtechnicalAttributeInt8Struct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 58, 2, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GtechnicalAttributeInt16 = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.03010000": {UL: "technicalAttributeInt16Value", Length: 2, Decode: DecodeTInt16},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.03020000": {UL: "technicalAttributeInt16TypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.03030000": {UL: "technicalAttributeInt16Unit", Length: 0, Decode: DecodeTUTF16String},
}

type GtechnicalAttributeInt16Struct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtechnicalAttributeInt16Struct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 58, 3, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GtechnicalAttributeInt32 = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.04010000": {UL: "technicalAttributeInt32Value", Length: 4, Decode: DecodeTInt32},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.04020000": {UL: "technicalAttributeInt32TypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.04030000": {UL: "technicalAttributeInt32Unit", Length: 0, Decode: DecodeTUTF16String},
}

type GtechnicalAttributeInt32Struct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtechnicalAttributeInt32Struct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 58, 4, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GtechnicalAttributeInt64 = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.05010000": {UL: "technicalAttributeInt64Value", Length: 8, Decode: DecodeTInt64},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.05020000": {UL: "technicalAttributeInt64TypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.05030000": {UL: "technicalAttributeInt64Unit", Length: 0, Decode: DecodeTUTF16String},
}

type GtechnicalAttributeInt64Struct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtechnicalAttributeInt64Struct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 58, 5, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GtechnicalAttributeUInt8 = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.06010000": {UL: "technicalAttributeUInt8Value", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.06020000": {UL: "technicalAttributeUInt8TypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.06030000": {UL: "technicalAttributeUInt8Unit", Length: 0, Decode: DecodeTUTF16String},
}

type GtechnicalAttributeUInt8Struct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtechnicalAttributeUInt8Struct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 58, 6, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GtechnicalAttributeUInt16 = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.07010000": {UL: "technicalAttributeUInt16Value", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.07020000": {UL: "technicalAttributeUInt16TypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.07030000": {UL: "technicalAttributeUInt16Unit", Length: 0, Decode: DecodeTUTF16String},
}

type GtechnicalAttributeUInt16Struct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtechnicalAttributeUInt16Struct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 58, 7, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GtechnicalAttributeUInt32 = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.08010000": {UL: "technicalAttributeUInt32Value", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.08020000": {UL: "technicalAttributeUInt32TypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.08030000": {UL: "technicalAttributeUInt32Unit", Length: 0, Decode: DecodeTUTF16String},
}

type GtechnicalAttributeUInt32Struct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtechnicalAttributeUInt32Struct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 58, 8, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GtechnicalAttributeUInt64 = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.09010000": {UL: "technicalAttributeUInt64Value", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.09020000": {UL: "technicalAttributeUInt64TypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.09030000": {UL: "technicalAttributeUInt64Unit", Length: 0, Decode: DecodeTUTF16String},
}

type GtechnicalAttributeUInt64Struct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtechnicalAttributeUInt64Struct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 58, 9, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GtechnicalAttributeFloat = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.0a010000": {UL: "technicalAttributeFloatValue", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.0a020000": {UL: "technicalAttributeFloatTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.0a030000": {UL: "technicalAttributeFloatUnit", Length: 0, Decode: DecodeTUTF16String},
}

type GtechnicalAttributeFloatStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtechnicalAttributeFloatStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 58, 10, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GtechnicalAttributeRational = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.0b010000": {UL: "technicalAttributeRationalTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.0b020000": {UL: "technicalAttributeRationalValueObject", Length: 0, Decode: DecodeTStrongReference},
}

type GtechnicalAttributeRationalStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtechnicalAttributeRationalStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 58, 11, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GtechnicalAttributeAnyURI = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.0c010000": {UL: "technicalAttributeAnyURIValue", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.0c020000": {UL: "technicalAttributeAnyURITypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GtechnicalAttributeAnyURIStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtechnicalAttributeAnyURIStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 58, 12, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GtechnicalAttributeBoolean = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.0d010000": {UL: "technicalAttributeBooleanValue", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d02013a.0d020000": {UL: "technicalAttributeBooleanTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GtechnicalAttributeBooleanStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtechnicalAttributeBooleanStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 58, 13, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gdimension = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02013b.01000000": {UL: "dimensionValue", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010101.0d02013b.02000000": {UL: "dimensionUnit", Length: 0, Decode: DecodeTUTF16String},
}

type GdimensionStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GdimensionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 59, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GpackageInfo = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02013c.01000000": {UL: "packageSize", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.0d02013c.02000000": {UL: "packageName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02013c.03000000": {UL: "packageLocatorObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02013c.04000000": {UL: "mimeTypeObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02013c.05000000": {UL: "hashObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02013c.06000000": {UL: "packageOverallBitRateObject", Length: 0, Decode: DecodeTStrongReference},
}

type GpackageInfoStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GpackageInfoStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 60, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gmedium = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02013d.01000000": {UL: "mediumID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02013d.02000000": {UL: "mediumTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GmediumStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GmediumStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 61, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gcodec = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02013e.01000000": {UL: "codecName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02013e.02000000": {UL: "codecVendor", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02013e.03000000": {UL: "codecVersion", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02013e.04000000": {UL: "codecfamily", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02013e.05000000": {UL: "codecIdentifier", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02013e.06000000": {UL: "codecUrl", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02013e.07000000": {UL: "codecTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GcodecStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GcodecStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 62, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Grational = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02013f.01000000": {UL: "nominalValue", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010101.0d02013f.02000000": {UL: "factorNumerator", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010101.0d02013f.03000000": {UL: "factorDenominator", Length: 8, Decode: DecodeTUInt64},
}

type GrationalStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GrationalStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 63, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaspectRatio = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020140.01000000": {UL: "aspectRatioNumerator", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010101.0d020140.02000000": {UL: "aspectRatioDenominator", Length: 8, Decode: DecodeTUInt64},
	"urn:smpte:ul:060e2b34.01010101.0d020140.03000000": {UL: "aspectRatioTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GaspectRatioStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaspectRatioStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 64, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gheight = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020141.01000000": {UL: "heightValueObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020141.02000000": {UL: "heightTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GheightStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GheightStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 65, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gwidth = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020142.01000000": {UL: "widthValueObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020142.02000000": {UL: "widthTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GwidthStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GwidthStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 66, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gpart = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020143.01000000": {UL: "partMetadataObject", Length: 0, Decode: DecodeTStrongReference},
}

type GpartStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GpartStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 67, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GpartMetadata = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020144.01000000": {UL: "partID", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020144.02000000": {UL: "partName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020144.03000000": {UL: "partDefinition", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020144.04000000": {UL: "partStartTimeObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020144.05000000": {UL: "partDurationTimeObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020144.06000000": {UL: "partNumber", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.01010101.0d020144.07000000": {UL: "partTotalNumber", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.01010101.0d020144.08000000": {UL: "partTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020144.09000000": {UL: "partMetaObject", Length: 0, Decode: DecodeTStrongReference},
}

type GpartMetadataStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GpartMetadataStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 68, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Ghash = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020146.01000000": {UL: "hashValueObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020146.02000000": {UL: "hashFunctionTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GhashStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GhashStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 70, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Glocator = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020147.01000000": {UL: "locatorValueObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020147.02000000": {UL: "locatorTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GlocatorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GlocatorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 71, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GcontainerFormat = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020148.01000000": {UL: "containerFormatId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020148.02000000": {UL: "containerFormatName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020148.03000000": {UL: "containerCodecObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020148.04000000": {UL: "containerFormatVersionId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020148.05000000": {UL: "containerFormatProfile", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020148.06000000": {UL: "containerFormatProfileLevel", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020148.07000000": {UL: "containerNote", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020148.08000000": {UL: "containerTechnicalAttributeStringObjects", Length: 0, Decode: DecodeTtechnicalAttributeStringStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020148.09000000": {UL: "containerTechnicalAttributeInt8Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt8StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020148.0a000000": {UL: "containerTechnicalAttributeInt16Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt16StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020148.0b000000": {UL: "containerTechnicalAttributeInt32Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt32StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020148.0c000000": {UL: "containerTechnicalAttributeInt64Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt64StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020148.0d000000": {UL: "containerTechnicalAttributeUInt8Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt8StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020148.0e000000": {UL: "containerTechnicalAttributeUInt16Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt16StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020148.0f000000": {UL: "containerTechnicalAttributeUInt32Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt32StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020148.10000000": {UL: "containerTechnicalAttributeUInt64Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt64StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020148.11000000": {UL: "containerTechnicalAttributeFloatObjects", Length: 0, Decode: DecodeTtechnicalAttributeFloatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020148.12000000": {UL: "containerTechnicalAttributeRationalObjects", Length: 0, Decode: DecodeTtechnicalAttributeRationalStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020148.13000000": {UL: "containerTechnicalAttributeAnyURIObjects", Length: 0, Decode: DecodeTtechnicalAttributeAnyURIStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020148.14000000": {UL: "containerTechnicalAttributeBooleanObjects", Length: 0, Decode: DecodeTtechnicalAttributeBooleanStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020148.15000000": {UL: "containerEncodingFormatGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GcontainerFormatStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GcontainerFormatStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 72, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioFormatExtended = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020149.01000000": {UL: "audioFormatExtendedId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020149.02000000": {UL: "audioFormatExtendedName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020149.03000000": {UL: "audioFormatExtendedDefinition", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020149.04000000": {UL: "audioFormatExtendedVersion", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020149.05000000": {UL: "audioFormatExtendedPresenceFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020149.06000000": {UL: "audioProgrammeObjects", Length: 0, Decode: DecodeTaudioProgrammeStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020149.07000000": {UL: "audioContentObjects", Length: 0, Decode: DecodeTaudioContentStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020149.08000000": {UL: "audioObjectObjects", Length: 0, Decode: DecodeTaudioObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020149.09000000": {UL: "audioPackFormatObjects", Length: 0, Decode: DecodeTaudioPackFormatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020149.0a000000": {UL: "audioChannelFormatObjects", Length: 0, Decode: DecodeTaudioChannelFormatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020149.0b000000": {UL: "audioBlockFormatObjects", Length: 0, Decode: DecodeTaudioBlockFormatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020149.0c000000": {UL: "audioStreamFormatObjects", Length: 0, Decode: DecodeTaudioStreamFormatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020149.0d000000": {UL: "audioTrackFormatObjects", Length: 0, Decode: DecodeTaudioTrackFormatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020149.0e000000": {UL: "audioTrackUIDObjects", Length: 0, Decode: DecodeTaudioTrackUIDStrongReferenceSet},
}

type GaudioFormatExtendedStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioFormatExtendedStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 73, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioProgramme = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02014a.01000000": {UL: "audioProgrammeId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02014a.02000000": {UL: "audioProgrammeName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02014a.03000000": {UL: "audioProgrammeLanguageCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02014a.04000000": {UL: "audioProgrammeStartTimecode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02014a.05000000": {UL: "audioProgrammeEndTimecode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02014a.06000000": {UL: "audioProgrammeTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02014a.07000000": {UL: "audioProgrammeFormatGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02014a.08000000": {UL: "audioProgrammeAudioContentIDRefObjects", Length: 0, Decode: DecodeTIDRefStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02014a.09000000": {UL: "audioProgrammeLoudnessMetadataObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02014a.0a000000": {UL: "audioProgrammeMaxDuckingDepth", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d02014a.0b000000": {UL: "audioProgrammeReferenceScreenObject", Length: 0, Decode: DecodeTStrongReference},
}

type GaudioProgrammeStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioProgrammeStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 74, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GIDRef = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02014b.01000000": {UL: "IDRefValue", Length: 0, Decode: DecodeTUTF16String},
}

type GIDRefStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GIDRefStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 75, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GloudnessMetadata = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02014c.01000000": {UL: "loudnessMethod", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02014c.02000000": {UL: "integratedLoudness", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d02014c.03000000": {UL: "loudnessRange", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d02014c.04000000": {UL: "loudnessMaxTruePeak", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d02014c.05000000": {UL: "loudnessMaxMomentary", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d02014c.06000000": {UL: "loudnessMaxShortTerm", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d02014c.07000000": {UL: "loudnessRecType", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02014c.08000000": {UL: "loudnessCorrectionType", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02014c.09000000": {UL: "dialogueLoudness", Length: 0, Decode: DecodeTfloat32},
}

type GloudnessMetadataStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GloudnessMetadataStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 76, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioContent = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02014d.01000000": {UL: "audioContentId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02014d.02000000": {UL: "audioContentName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02014d.03000000": {UL: "audioContentLanguageCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02014d.04000000": {UL: "audioContentDialogueIndicator", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d02014d.05000000": {UL: "audioContentAudioObjectIDRefObjects", Length: 0, Decode: DecodeTIDRefStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02014d.06000000": {UL: "audioContentLoudnessMetadataObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02014d.07000000": {UL: "audioContentDialogueObject", Length: 0, Decode: DecodeTStrongReference},
}

type GaudioContentStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioContentStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 77, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioObject = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02014e.01000000": {UL: "audioObjectId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02014e.02000000": {UL: "audioObjectName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02014e.03000000": {UL: "audioObjectStartTimecode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02014e.04000000": {UL: "audioObjectDurationTimecode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02014e.05000000": {UL: "audioObjectDialogueIndicator", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d02014e.06000000": {UL: "audioObjectImportance", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.01010101.0d02014e.07000000": {UL: "audioObjectInteract", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d02014e.08000000": {UL: "audioObjectAudioPackFormatIDRefObjects", Length: 0, Decode: DecodeTIDRefStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02014e.09000000": {UL: "audioObjectAudioObjectIDRefObjects", Length: 0, Decode: DecodeTIDRefStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02014e.0a000000": {UL: "audioObjectAudioTrackUIDRefObjects", Length: 0, Decode: DecodeTIDRefStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02014e.0b000000": {UL: "audioObjectInteractionObjects", Length: 0, Decode: DecodeTaudioObjectInteractionStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02014e.0c000000": {UL: "audioComplementaryObjectIDRefObjects", Length: 0, Decode: DecodeTIDRefStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02014e.0d000000": {UL: "audioObjectDisableDucking", Length: 1, Decode: DecodeTBoolean},
}

type GaudioObjectStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioObjectStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 78, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioPackFormat = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02014f.01000000": {UL: "audioPackFormatId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02014f.02000000": {UL: "audioPackFormatName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02014f.03000000": {UL: "audioPackAbsoluteDistance", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d02014f.04000000": {UL: "audioPackTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02014f.05000000": {UL: "audioPackImportance", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02014f.06000000": {UL: "audioPackAudioChannelFormatIDRefObjects", Length: 0, Decode: DecodeTIDRefStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02014f.07000000": {UL: "audioPackAudioPackFormatIDRefObjects", Length: 0, Decode: DecodeTIDRefStrongReferenceSet},
}

type GaudioPackFormatStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioPackFormatStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 79, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioChannelFormat = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020150.01000000": {UL: "audioChannelFormatId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020150.02000000": {UL: "audioChannelFormatName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020150.03000000": {UL: "audioChannelTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020150.04000000": {UL: "audioChannelFrequency", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020150.05000000": {UL: "audioChannelAudioBlockFormatObjects", Length: 0, Decode: DecodeTIDRefStrongReferenceSet},
}

type GaudioChannelFormatStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioChannelFormatStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 80, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioBlockFormat = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020151.01000000": {UL: "audioBlockFormatId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020151.02000000": {UL: "audioBlockRTimecode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020151.03000000": {UL: "audioBlockDurationTimecode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020151.04000000": {UL: "audioBlockSpeakerLabel", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020151.06000000": {UL: "audioBlockMatrixObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020151.07000000": {UL: "audioBlockGain", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020151.08000000": {UL: "audioBlockDiffuse", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020151.09000000": {UL: "audioBlockWidth", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020151.0a000000": {UL: "audioBlockHeight", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020151.0b000000": {UL: "audioBlockDepth", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020151.0c000000": {UL: "audioBlockChannelLock", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020151.0e000000": {UL: "audioBlockEquation", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020151.0f000000": {UL: "audioBlockDegree", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020151.10000000": {UL: "audioBlockOrder", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020151.11000000": {UL: "audioBlockCartesian", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020151.12000000": {UL: "audioBlockDivergenceObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020151.13000000": {UL: "audioBlockZoneExclusionObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020151.14000000": {UL: "audioBlockScreenReferenceFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020151.15000000": {UL: "audioBlockImportance", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.01010101.0d020151.16000000": {UL: "audioBlockPositionObjects", Length: 0, Decode: DecodeTaudioBlockPositionStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020151.17000000": {UL: "audioBlockJumpPositionObject", Length: 0, Decode: DecodeTStrongReference},
}

type GaudioBlockFormatStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioBlockFormatStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 81, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioBlockMatrixCoefficient = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020152.01000000": {UL: "audioBlockMatrixCoefficientValue", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020152.02000000": {UL: "audioBlockMatrixCoefficientGain", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020152.03000000": {UL: "audioBlockMatrixCoefficientGainVar", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020152.04000000": {UL: "audioBlockMatrixCoefficientPhase", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020152.05000000": {UL: "audioBlockMatrixCoefficientPhaseVar", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020152.06000000": {UL: "audioBlockMatrixCoefficientChannelFormatIDRefObject", Length: 0, Decode: DecodeTStrongReference},
}

type GaudioBlockMatrixCoefficientStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioBlockMatrixCoefficientStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 82, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioStreamFormat = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020153.01000000": {UL: "audioStreamFormatId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020153.02000000": {UL: "audioStreamFormatName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020153.03000000": {UL: "audioStreamFormatFormatGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020153.04000000": {UL: "audioStreamAudioChannelFormatIDRefObjects", Length: 0, Decode: DecodeTIDRefStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020153.05000000": {UL: "audioStreamAudioPackFormatIDRefObjects", Length: 0, Decode: DecodeTIDRefStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020153.06000000": {UL: "audioStreamAudioTrackFormatIDRefObjects", Length: 0, Decode: DecodeTIDRefStrongReferenceSet},
}

type GaudioStreamFormatStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioStreamFormatStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 83, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioTrackFormat = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020154.01000000": {UL: "audioTrackFormatId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020154.02000000": {UL: "audioTrackFormatName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020154.03000000": {UL: "audioTrackFormatFormatGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020154.04000000": {UL: "audioTrackAudioStreamFormatIDRefObjects", Length: 0, Decode: DecodeTIDRefStrongReferenceSet},
}

type GaudioTrackFormatStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioTrackFormatStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 84, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioTrackUID = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020155.01000000": {UL: "audioTrackUIDValue", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020155.02000000": {UL: "audioTrackUIDSampleRate", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010101.0d020155.03000000": {UL: "audioTrackUIDBitDepth", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.01010101.0d020155.04000000": {UL: "audioTrackMXFLookupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020155.05000000": {UL: "audioTrackAudioTrackFormatIDRefObjects", Length: 0, Decode: DecodeTIDRefStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020155.06000000": {UL: "audioTrackAudioPackFormatIDRefObjects", Length: 0, Decode: DecodeTIDRefStrongReferenceSet},
}

type GaudioTrackUIDStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioTrackUIDStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 85, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioMXFLookup = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020156.01000000": {UL: "audioMXFLookupPackageUIDRefObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020156.02000000": {UL: "audioMXFLookupTrackIDRefObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020156.03000000": {UL: "audioMXFLookupChannelIDRefObject", Length: 0, Decode: DecodeTStrongReference},
}

type GaudioMXFLookupStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioMXFLookupStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 86, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioBlockMatrix = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020157.01000000": {UL: "audioBlockMatrixCoefficientObjects", Length: 0, Decode: DecodeTaudioBlockMatrixCoefficientStrongReferenceSet},
}

type GaudioBlockMatrixStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioBlockMatrixStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 87, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gtime = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020158.01000000": {UL: "timecode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020158.02000000": {UL: "normalPlayTime", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020158.03000000": {UL: "editUnit", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020158.04000000": {UL: "textTime", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020158.05000000": {UL: "timeTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GtimeStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtimeStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 88, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GmetadataFormat = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020159.01000000": {UL: "metadataFormatId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020159.02000000": {UL: "metadataFormatName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020159.03000000": {UL: "metadataFormatVersionId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020159.04000000": {UL: "metadataFormatDefinition", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020159.05000000": {UL: "metadataTrackObjects", Length: 0, Decode: DecodeTtrackStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020159.06000000": {UL: "metadataTechnicalAttributeStringObjects", Length: 0, Decode: DecodeTtechnicalAttributeStringStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020159.07000000": {UL: "metadataTechnicalAttributeInt8Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt8StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020159.08000000": {UL: "metadataTechnicalAttributeInt16Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt16StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020159.09000000": {UL: "metadataTechnicalAttributeInt32Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt32StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020159.0a000000": {UL: "metadataTechnicalAttributeInt64Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt64StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020159.0b000000": {UL: "metadataTechnicalAttributeUInt8Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt8StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020159.0c000000": {UL: "metadataTechnicalAttributeUInt16Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt16StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020159.0d000000": {UL: "metadataTechnicalAttributeUInt32Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt32StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020159.0e000000": {UL: "metadataTechnicalAttributeUInt64Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt64StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020159.0f000000": {UL: "metadataTechnicalAttributeFloatObjects", Length: 0, Decode: DecodeTtechnicalAttributeFloatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020159.10000000": {UL: "metadataTechnicalAttributeRationalObjects", Length: 0, Decode: DecodeTtechnicalAttributeRationalStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020159.11000000": {UL: "metadataTechnicalAttributeAnyURIObjects", Length: 0, Decode: DecodeTtechnicalAttributeAnyURIStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020159.12000000": {UL: "metadataTechnicalAttributeBooleanObjects", Length: 0, Decode: DecodeTtechnicalAttributeBooleanStrongReferenceSet},
}

type GmetadataFormatStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GmetadataFormatStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 89, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GtimecodeFormat = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015a.01000000": {UL: "timecodeFormatId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02015a.02000000": {UL: "timecodeFormatName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02015a.03000000": {UL: "timecodeFormatVersionId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02015a.04000000": {UL: "timecodeFormatDefinition", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02015a.05000000": {UL: "timecodeStartTimeObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02015a.06000000": {UL: "timecodeTrackObjects", Length: 0, Decode: DecodeTtrackStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015a.07000000": {UL: "timecodeTechnicalAttributeStringObjects", Length: 0, Decode: DecodeTtechnicalAttributeStringStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015a.08000000": {UL: "timecodeTechnicalAttributeInt8Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt8StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015a.09000000": {UL: "timecodeTechnicalAttributeInt16Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt16StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015a.0a000000": {UL: "timecodeTechnicalAttributeInt32Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt32StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015a.0b000000": {UL: "timecodeTechnicalAttributeInt64Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt64StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015a.0c000000": {UL: "timecodeTechnicalAttributeUInt8Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt8StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015a.0d000000": {UL: "timecodeTechnicalAttributeUInt16Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt16StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015a.0e000000": {UL: "timecodeTechnicalAttributeUInt32Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt32StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015a.0f000000": {UL: "timecodeTechnicalAttributeUInt64Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt64StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015a.10000000": {UL: "timecodeTechnicalAttributeFloatObjects", Length: 0, Decode: DecodeTtechnicalAttributeFloatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015a.11000000": {UL: "timecodeTechnicalAttributeRationalObjects", Length: 0, Decode: DecodeTtechnicalAttributeRationalStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015a.12000000": {UL: "timecodeTechnicalAttributeAnyURIObjects", Length: 0, Decode: DecodeTtechnicalAttributeAnyURIStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015a.13000000": {UL: "timecodeTechnicalAttributeBooleanObjects", Length: 0, Decode: DecodeTtechnicalAttributeBooleanStrongReferenceSet},
}

type GtimecodeFormatStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GtimecodeFormatStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 90, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GvideoNoiseFilter = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015b.01000000": {UL: "videoNoiseFilterVendorId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02015b.02000000": {UL: "videoNoiseFilterTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GvideoNoiseFilterStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GvideoNoiseFilterStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 91, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GEBUCoreObject = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GEBUCoreObjectStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GEBUCoreObjectStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 92, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gaudience = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015d.01000000": {UL: "audienceReason", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02015d.02000000": {UL: "audienceLinkToLogo", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02015d.03000000": {UL: "audienceNotRatedFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d02015d.04000000": {UL: "audienceAdultContentFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d02015d.05000000": {UL: "audienceTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02015d.06000000": {UL: "audienceRegionObjects", Length: 0, Decode: DecodeTregionStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015d.07000000": {UL: "audienceExclusionRegionObjects", Length: 0, Decode: DecodeTregionStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015d.08000000": {UL: "audienceFormatGroupObject", Length: 0, Decode: DecodeTStrongReference},
}

type GaudienceStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudienceStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 93, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gfilter = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015e.01000000": {UL: "filterOrder", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.01010101.0d02015e.02000000": {UL: "filterTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02015e.03000000": {UL: "filterTrackIDRefObjects", Length: 0, Decode: DecodeTIDRefStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015e.04000000": {UL: "filterProfileTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02015e.05000000": {UL: "filterSettingObjects", Length: 0, Decode: DecodeTfilterSettingStrongReferenceSet},
}

type GfilterStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GfilterStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 94, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GfilterSetting = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015f.01000000": {UL: "filterSettingAttributeOrder", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.01010101.0d02015f.02000000": {UL: "filterSettingTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02015f.03000000": {UL: "filterSettingTechnicalAttributeStringObjects", Length: 0, Decode: DecodeTtechnicalAttributeStringStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015f.04000000": {UL: "filterSettingTechnicalAttributeInt8Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt8StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015f.05000000": {UL: "filterSettingTechnicalAttributeInt16Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt16StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015f.06000000": {UL: "filterSettingTechnicalAttributeInt32Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt32StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015f.07000000": {UL: "filterSettingTechnicalAttributeInt64Objects", Length: 0, Decode: DecodeTtechnicalAttributeInt64StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015f.08000000": {UL: "filterSettingTechnicalAttributeUInt8Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt8StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015f.09000000": {UL: "filterSettingTechnicalAttributeUInt16Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt16StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015f.0a000000": {UL: "filterSettingTechnicalAttributeUInt32Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt32StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015f.0b000000": {UL: "filterSettingTechnicalAttributeUInt64Objects", Length: 0, Decode: DecodeTtechnicalAttributeUInt64StrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015f.0c000000": {UL: "filterSettingTechnicalAttributeFloatObjects", Length: 0, Decode: DecodeTtechnicalAttributeFloatStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015f.0d000000": {UL: "filterSettingTechnicalAttributeRationalObjects", Length: 0, Decode: DecodeTtechnicalAttributeRationalStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015f.0e000000": {UL: "filterSettingTechnicalAttributeAnyURIObjects", Length: 0, Decode: DecodeTtechnicalAttributeAnyURIStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02015f.0f000000": {UL: "filterSettingTechnicalAttributeBooleanObjects", Length: 0, Decode: DecodeTtechnicalAttributeBooleanStrongReferenceSet},
}

type GfilterSettingStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GfilterSettingStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 95, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GreferenceScreen = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020160.01000000": {UL: "referenceScreenAspectRatio", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020160.02000000": {UL: "referenceScreenCentrePositionObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d020160.03000000": {UL: "referenceScreenWidthObject", Length: 0, Decode: DecodeTStrongReference},
}

type GreferenceScreenStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GreferenceScreenStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 96, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GreferenceScreenCentrePosition = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020161.01000000": {UL: "referenceScreenCentrePositionValue", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020161.02000000": {UL: "referenceScreenAzimuth", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020161.03000000": {UL: "referenceScreenElevation", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020161.04000000": {UL: "referenceScreenDistance", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020161.05000000": {UL: "referenceScreenX", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020161.06000000": {UL: "referenceScreenY", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020161.07000000": {UL: "referenceScreenZ", Length: 0, Decode: DecodeTfloat32},
}

type GreferenceScreenCentrePositionStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GreferenceScreenCentrePositionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 97, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GreferenceScreenWidth = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020162.01000000": {UL: "referenceScreenWidthValue", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020162.02000000": {UL: "referenceScreenWidthAzimuth", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020162.03000000": {UL: "referenceScreenWidthX", Length: 0, Decode: DecodeTfloat32},
}

type GreferenceScreenWidthStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GreferenceScreenWidthStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 98, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioContentDialogue = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020163.01000000": {UL: "audioContentDialogueValue", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.01010101.0d020163.02000000": {UL: "nonDialogueContentKind", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.01010101.0d020163.03000000": {UL: "dialogueContentKind", Length: 1, Decode: DecodeTInt8},
	"urn:smpte:ul:060e2b34.01010101.0d020163.04000000": {UL: "mixedContentkind", Length: 1, Decode: DecodeTInt8},
}

type GaudioContentDialogueStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioContentDialogueStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 99, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioObjectInteraction = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020164.01000000": {UL: "onOffInteract", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020164.02000000": {UL: "gainInteract", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020164.03000000": {UL: "positionInteract", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d020164.04000000": {UL: "gainInteractionRangeObjects", Length: 0, Decode: DecodeTgainInteractionRangeStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020164.05000000": {UL: "positionInteractionRangeObjects", Length: 0, Decode: DecodeTpositionInteractionRangeStrongReferenceSet},
}

type GaudioObjectInteractionStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioObjectInteractionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 100, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GgainInteractionRange = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020165.01000000": {UL: "gainInteractionRangeValue", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020165.02000000": {UL: "gainInteractionRangeBound", Length: 1, Decode: DecodeTBoolean},
}

type GgainInteractionRangeStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GgainInteractionRangeStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 101, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GpositionInteractionRange = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020166.01000000": {UL: "positionInteractionRangeValue", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020166.02000000": {UL: "positionInteractionRangeCoordinate", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020166.03000000": {UL: "positionInteractionRangeBound", Length: 0, Decode: DecodeTUTF16String},
}

type GpositionInteractionRangeStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GpositionInteractionRangeStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 102, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioBlockPosition = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020167.01000000": {UL: "audioBlockPositionValue", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020167.02000000": {UL: "audioBlockPositionCoordinate", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020167.03000000": {UL: "audioBlockPositionBound", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d020167.04000000": {UL: "audioBlockPositionScreenEdgeLock", Length: 0, Decode: DecodeTUTF16String},
}

type GaudioBlockPositionStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioBlockPositionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 103, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioBlockDivergence = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020168.01000000": {UL: "audioBlockDivergenceValue", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d020168.02000000": {UL: "audioBlockDivergenceAzimuthRange", Length: 0, Decode: DecodeTfloat32},
}

type GaudioBlockDivergenceStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioBlockDivergenceStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 104, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioBlockZoneExclusion = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d020169.01000000": {UL: "audioBlockZoneObjects", Length: 0, Decode: DecodeTaudioBlockZoneStrongReferenceSet},
}

type GaudioBlockZoneExclusionStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioBlockZoneExclusionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 105, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioBlockZone = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02016a.01000000": {UL: "audioBlockZoneValue", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02016a.02000000": {UL: "audioBlockZoneMinX", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d02016a.03000000": {UL: "audioBlockZoneMaxX", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d02016a.04000000": {UL: "audioBlockZoneMinY", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d02016a.05000000": {UL: "audioBlockZoneMaxY", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d02016a.06000000": {UL: "audioBlockZoneMinZ", Length: 0, Decode: DecodeTfloat32},
	"urn:smpte:ul:060e2b34.01010101.0d02016a.07000000": {UL: "audioBlockZoneMaxZ", Length: 0, Decode: DecodeTfloat32},
}

type GaudioBlockZoneStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioBlockZoneStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 106, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GaudioBlockJumpPosition = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02016b.01000000": {UL: "audioBlockJumPositionFlag", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d02016b.02000000": {UL: "audioBlockJumPositionInterpolationLength", Length: 0, Decode: DecodeTfloat32},
}

type GaudioBlockJumpPositionStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaudioBlockJumpPositionStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 107, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gevent = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02016c.01000000": {UL: "eventId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02016c.02000000": {UL: "eventTypeGroupObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02016c.03000000": {UL: "eventNote", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02016c.04000000": {UL: "eventNameObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02016c.05000000": {UL: "eventDescriptionObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02016c.06000000": {UL: "eventLocationObjects", Length: 0, Decode: DecodeTlocationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02016c.07000000": {UL: "eventStart", Length: 4, Decode: DecodeTDateStruct},
	"urn:smpte:ul:060e2b34.01010101.0d02016c.08000000": {UL: "eventEnd", Length: 4, Decode: DecodeTDateStruct},
}

type GeventStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GeventStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 108, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gaward = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02016d.01000000": {UL: "awardId", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d02016d.02000000": {UL: "awardNameObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02016d.03000000": {UL: "awardDescriptionObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02016d.04000000": {UL: "awardCategoryObjects", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02016d.05000000": {UL: "awardCeremonyObjects", Length: 0, Decode: DecodeTtextualAnnotationStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02016d.06000000": {UL: "awardOfficialObjects", Length: 0, Decode: DecodeTentityStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02016d.07000000": {UL: "awardDateObjects", Length: 0, Decode: DecodeTdateStrongReferenceSet},
}

type GawardStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GawardStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 109, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var Gaffiliation = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d02016e.01000000": {UL: "affiliationOrganizationObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.01010101.0d02016e.02000000": {UL: "affiliationPeriodOfTimeObject", Length: 0, Decode: DecodeTStrongReference},
}

type GaffiliationStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GaffiliationStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 2, 1, 110, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAPP_InfaxFramework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01010100": {UL: "APP_Format", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01010200": {UL: "APP_ProgrammeTitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01010300": {UL: "APP_EpisodeTitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01010400": {UL: "APP_TransmissionDate", Length: 8, Decode: DecodeTTimeStamp},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01010500": {UL: "APP_MagazinePrefix", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01010600": {UL: "APP_ProgrammeNumber", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01010700": {UL: "APP_SpoolStatus", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01010800": {UL: "APP_StockDate", Length: 8, Decode: DecodeTTimeStamp},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01010900": {UL: "APP_SpoolDescriptor", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01010a00": {UL: "APP_Memo", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01010b00": {UL: "APP_Duration", Length: 8, Decode: DecodeTInt64},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01010c00": {UL: "APP_SpoolNumber", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01010d00": {UL: "APP_AccessionNumber", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01010e00": {UL: "APP_CatalogueDetail", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01010f00": {UL: "APP_ProductionCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01011000": {UL: "APP_ItemNumber", Length: 4, Decode: DecodeTUInt32},
}

type GAPP_InfaxFrameworkStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GAPP_InfaxFrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 4, 1, 1, 1, 1, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAPP_PSEAnalysisFramework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01020100": {UL: "APP_RedFlash", Length: 2, Decode: DecodeTInt16},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01020300": {UL: "APP_LuminanceFlash", Length: 2, Decode: DecodeTInt16},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01020200": {UL: "APP_SpatialPattern", Length: 2, Decode: DecodeTInt16},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01020400": {UL: "APP_ExtendedFailure", Length: 1, Decode: DecodeTBoolean},
}

type GAPP_PSEAnalysisFrameworkStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GAPP_PSEAnalysisFrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 4, 1, 1, 1, 2, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAPP_VTRReplayErrorFramework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01030100": {UL: "APP_VTRErrorCode", Length: 1, Decode: DecodeTUInt8},
}

type GAPP_VTRReplayErrorFrameworkStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GAPP_VTRReplayErrorFrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 4, 1, 1, 1, 3, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAPP_DigiBetaDropoutFramework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01040100": {UL: "APP_Strength", Length: 4, Decode: DecodeTInt32},
}

type GAPP_DigiBetaDropoutFrameworkStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GAPP_DigiBetaDropoutFrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 4, 1, 1, 1, 4, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAPP_TimecodeBreakFramework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d040101.01050100": {UL: "APP_TimecodeType", Length: 2, Decode: DecodeTAPP_TimecodeTypeEnum},
}

type GAPP_TimecodeBreakFrameworkStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GAPP_TimecodeBreakFrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 4, 1, 1, 1, 5, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDM_AS_11_UKDPP_Framework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01010100": {UL: "UKDPP_Production_Number", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01010200": {UL: "UKDPP_Synopsis", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01010300": {UL: "UKDPP_Originator", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01010400": {UL: "UKDPP_Copyright_Year", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01010500": {UL: "UKDPP_Other_Identifier", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01010600": {UL: "UKDPP_Other_Identifier_Type", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01010700": {UL: "UKDPP_Genre", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01010800": {UL: "UKDPP_Distributor", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01010900": {UL: "UKDPP_Picture_Ratio", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01010a00": {UL: "UKDPP_3D", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01010b00": {UL: "UKDPP_3D_Type", Length: 1, Decode: DecodeTUKDPP_3D_Type_Enum},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01010c00": {UL: "UKDPP_Product_Placement", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01010d00": {UL: "UKDPP_PSE_Pass", Length: 1, Decode: DecodeTUKDPP_PSE_Pass_Enum},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01010e00": {UL: "UKDPP_PSE_Manufacturer", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01010f00": {UL: "UKDPP_PSE_Version", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01011000": {UL: "UKDPP_Video_Comments", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01011100": {UL: "UKDPP_Secondary_Audio_Language", Length: 0, Decode: DecodeTISO_639_2_Language_Code},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01011200": {UL: "UKDPP_Tertiary_Audio_Language", Length: 0, Decode: DecodeTISO_639_2_Language_Code},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01011300": {UL: "UKDPP_Audio_Loudness_Standard", Length: 1, Decode: DecodeTUKDPP_Audio_Loudness_Standard_Enum},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01011400": {UL: "UKDPP_Audio_Comments", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01011500": {UL: "UKDPP_Line_Up_Start", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01011600": {UL: "UKDPP_Ident_Clock_Start", Length: 8, Decode: DecodeTPositionType},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01011700": {UL: "UKDPP_Total_Number_Of_Parts", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01011800": {UL: "UKDPP_Total_Programme_Duration", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01011900": {UL: "UKDPP_Audio_Description_Present", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01011a00": {UL: "UKDPP_Audio_Description_Type", Length: 1, Decode: DecodeTUKDPP_Audio_Description_Type_Enum},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01011b00": {UL: "UKDPP_Open_Captions_Present", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01011c00": {UL: "UKDPP_Open_Captions_Type", Length: 1, Decode: DecodeTAS_11_Captions_Type_Enum},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01011d00": {UL: "UKDPP_Open_Captions_Language", Length: 0, Decode: DecodeTISO_639_2_Language_Code},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01011e00": {UL: "UKDPP_Signing_Present", Length: 1, Decode: DecodeTUKDPP_Signing_Present_Enum},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01011f00": {UL: "UKDPP_Sign_Language", Length: 1, Decode: DecodeTUKDPP_Sign_Language_Enum},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01012000": {UL: "UKDPP_Completion_Date", Length: 8, Decode: DecodeTTimeStamp},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01012100": {UL: "UKDPP_Textless_Elements_Exist", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01012200": {UL: "UKDPP_Programme_Has_Text", Length: 1, Decode: DecodeTBoolean},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01012300": {UL: "UKDPP_Programme_Text_Language", Length: 0, Decode: DecodeTISO_639_2_Language_Code},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01012400": {UL: "UKDPP_Contact_Email", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0c0101.01012500": {UL: "UKDPP_Contact_Telephone_Number", Length: 0, Decode: DecodeTUTF16String},
}

type GDM_AS_11_UKDPP_FrameworkStruct struct {
	InstanceID                      TUUID                               // IsOptional:true
	UKDPP_Production_Number         TUTF16String                        // IsOptional:false
	UKDPP_Synopsis                  TUTF16String                        // IsOptional:false
	UKDPP_Originator                TUTF16String                        // IsOptional:false
	UKDPP_Copyright_Year            uint16                              // IsOptional:false
	UKDPP_3D                        TBoolean                            // IsOptional:false
	UKDPP_PSE_Pass                  TUKDPP_PSE_Pass_Enum                // IsOptional:false
	UKDPP_Secondary_Audio_Language  TISO_639_2_Language_Code            // IsOptional:false
	UKDPP_Tertiary_Audio_Language   TISO_639_2_Language_Code            // IsOptional:false
	UKDPP_Audio_Loudness_Standard   TUKDPP_Audio_Loudness_Standard_Enum // IsOptional:false
	UKDPP_Line_Up_Start             TPositionType                       // IsOptional:false
	UKDPP_Ident_Clock_Start         TPositionType                       // IsOptional:false
	UKDPP_Total_Number_Of_Parts     uint16                              // IsOptional:false
	UKDPP_Total_Programme_Duration  TLengthType                         // IsOptional:false
	UKDPP_Audio_Description_Present TBoolean                            // IsOptional:false
	UKDPP_Open_Captions_Present     TBoolean                            // IsOptional:false
	UKDPP_Signing_Present           TUKDPP_Signing_Present_Enum         // IsOptional:false
	UKDPP_Completion_Date           TTimeStamp                          // IsOptional:false
	UKDPP_Contact_Email             TUTF16String                        // IsOptional:false
	UKDPP_Contact_Telephone_Number  TUTF16String                        // IsOptional:false

}

func (g *GDM_AS_11_UKDPP_FrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.UKDPP_Production_Number)
	code060e2b34010101010d0c010101010100 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 12, 1, 1, 1, 1, 1, 0}, []byte{})
	result = append(result, code060e2b34010101010d0c010101010100...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.UKDPP_Synopsis)
	code060e2b34010101010d0c010101010200 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 12, 1, 1, 1, 1, 2, 0}, []byte{})
	result = append(result, code060e2b34010101010d0c010101010200...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.UKDPP_Originator)
	code060e2b34010101010d0c010101010300 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 12, 1, 1, 1, 1, 3, 0}, []byte{})
	result = append(result, code060e2b34010101010d0c010101010300...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.UKDPP_Copyright_Year)
	code060e2b34010101010d0c010101010400 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 12, 1, 1, 1, 1, 4, 0}, []byte{})
	result = append(result, code060e2b34010101010d0c010101010400...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTBoolean(g.UKDPP_3D)
	code060e2b34010101010d0c010101010a00 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 12, 1, 1, 1, 1, 10, 0}, []byte{})
	result = append(result, code060e2b34010101010d0c010101010a00...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUKDPP_PSE_Pass_Enum(g.UKDPP_PSE_Pass)
	code060e2b34010101010d0c010101010d00 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 12, 1, 1, 1, 1, 13, 0}, []byte{})
	result = append(result, code060e2b34010101010d0c010101010d00...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTISO_639_2_Language_Code(g.UKDPP_Secondary_Audio_Language)
	code060e2b34010101010d0c010101011100 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 12, 1, 1, 1, 1, 17, 0}, []byte{})
	result = append(result, code060e2b34010101010d0c010101011100...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTISO_639_2_Language_Code(g.UKDPP_Tertiary_Audio_Language)
	code060e2b34010101010d0c010101011200 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 12, 1, 1, 1, 1, 18, 0}, []byte{})
	result = append(result, code060e2b34010101010d0c010101011200...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUKDPP_Audio_Loudness_Standard_Enum(g.UKDPP_Audio_Loudness_Standard)
	code060e2b34010101010d0c010101011300 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 12, 1, 1, 1, 1, 19, 0}, []byte{})
	result = append(result, code060e2b34010101010d0c010101011300...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPositionType(g.UKDPP_Line_Up_Start)
	code060e2b34010101010d0c010101011500 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 12, 1, 1, 1, 1, 21, 0}, []byte{})
	result = append(result, code060e2b34010101010d0c010101011500...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTPositionType(g.UKDPP_Ident_Clock_Start)
	code060e2b34010101010d0c010101011600 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 12, 1, 1, 1, 1, 22, 0}, []byte{})
	result = append(result, code060e2b34010101010d0c010101011600...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.UKDPP_Total_Number_Of_Parts)
	code060e2b34010101010d0c010101011700 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 12, 1, 1, 1, 1, 23, 0}, []byte{})
	result = append(result, code060e2b34010101010d0c010101011700...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTLengthType(g.UKDPP_Total_Programme_Duration)
	code060e2b34010101010d0c010101011800 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 12, 1, 1, 1, 1, 24, 0}, []byte{})
	result = append(result, code060e2b34010101010d0c010101011800...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTBoolean(g.UKDPP_Audio_Description_Present)
	code060e2b34010101010d0c010101011900 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 12, 1, 1, 1, 1, 25, 0}, []byte{})
	result = append(result, code060e2b34010101010d0c010101011900...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTBoolean(g.UKDPP_Open_Captions_Present)
	code060e2b34010101010d0c010101011b00 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 12, 1, 1, 1, 1, 27, 0}, []byte{})
	result = append(result, code060e2b34010101010d0c010101011b00...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUKDPP_Signing_Present_Enum(g.UKDPP_Signing_Present)
	code060e2b34010101010d0c010101011e00 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 12, 1, 1, 1, 1, 30, 0}, []byte{})
	result = append(result, code060e2b34010101010d0c010101011e00...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTTimeStamp(g.UKDPP_Completion_Date)
	code060e2b34010101010d0c010101012000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 12, 1, 1, 1, 1, 32, 0}, []byte{})
	result = append(result, code060e2b34010101010d0c010101012000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.UKDPP_Contact_Email)
	code060e2b34010101010d0c010101012400 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 12, 1, 1, 1, 1, 36, 0}, []byte{})
	result = append(result, code060e2b34010101010d0c010101012400...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.UKDPP_Contact_Telephone_Number)
	code060e2b34010101010d0c010101012500 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 12, 1, 1, 1, 1, 37, 0}, []byte{})
	result = append(result, code060e2b34010101010d0c010101012500...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 12, 1, 1, 1, 1, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GDMS_AS_12_AdID_Slate = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.0101010d.0d0d0101.00000000": {UL: "adid_prefix", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.0d0d0102.00000000": {UL: "adid_code", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.0d0d0103.00000000": {UL: "ad_title", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.0d0d0104.00000000": {UL: "brand", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.0d0d0105.00000000": {UL: "product", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.0d0d0106.00000000": {UL: "advertiser", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.0d0d0107.00000000": {UL: "agency_office_location", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.0d0d0108.00000000": {UL: "length", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.0d0d0109.00000000": {UL: "medium", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.0d0d010a.00000000": {UL: "sd_flag", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.0d0d010b.00000000": {UL: "parent", Length: 0, Decode: DecodeTUTF16String},
}

type GDMS_AS_12_AdID_SlateStruct struct {
	InstanceID             TUUID        // IsOptional:true
	adid_prefix            TUTF16String // IsOptional:false
	adid_code              TUTF16String // IsOptional:false
	ad_title               TUTF16String // IsOptional:false
	brand                  TUTF16String // IsOptional:false
	product                TUTF16String // IsOptional:false
	advertiser             TUTF16String // IsOptional:false
	agency_office_location TUTF16String // IsOptional:false
	length                 TUTF16String // IsOptional:false
	medium                 TUTF16String // IsOptional:false
	sd_flag                TUTF16String // IsOptional:false
	parent                 TUTF16String // IsOptional:false

}

func (g *GDMS_AS_12_AdID_SlateStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.adid_prefix)
	code060e2b340101010d0d0d010100000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 13, 13, 1, 1, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0d0d010100000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.adid_code)
	code060e2b340101010d0d0d010200000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 13, 13, 1, 2, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0d0d010200000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.ad_title)
	code060e2b340101010d0d0d010300000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 13, 13, 1, 3, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0d0d010300000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.brand)
	code060e2b340101010d0d0d010400000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 13, 13, 1, 4, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0d0d010400000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.product)
	code060e2b340101010d0d0d010500000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 13, 13, 1, 5, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0d0d010500000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.advertiser)
	code060e2b340101010d0d0d010600000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 13, 13, 1, 6, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0d0d010600000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.agency_office_location)
	code060e2b340101010d0d0d010700000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 13, 13, 1, 7, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0d0d010700000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.length)
	code060e2b340101010d0d0d010800000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 13, 13, 1, 8, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0d0d010800000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.medium)
	code060e2b340101010d0d0d010900000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 13, 13, 1, 9, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0d0d010900000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.sd_flag)
	code060e2b340101010d0d0d010a00000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 13, 13, 1, 10, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0d0d010a00000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.parent)
	code060e2b340101010d0d0d010b00000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 13, 13, 1, 11, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0d0d010b00000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 13, 13, 13, 1, 0, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAS_07_Core_DMS_Framework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010101": {UL: "AS_07_Core_DMS_ShimName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010102": {UL: "AS_07_Core_DMS_Identifiers", Length: 0, Decode: DecodeTStrongReferenceSetAS_07_DMS_Identifier},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010103": {UL: "AS_07_Core_DMS_ResponsibleOrganizationName", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010105": {UL: "AS_07_Core_DMS_ResponsibleOrganizationCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010106": {UL: "AS_07_Core_DMS_NatureOfOrganization", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010107": {UL: "AS_07_Core_DMS_WorkingTitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010108": {UL: "AS_07_Core_DMS_SecondaryTitle", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010109": {UL: "AS_07_Core_DMS_PictureFormat", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.0701010a": {UL: "AS_07_Core_DMS_IntendedAFD", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.0701010b": {UL: "AS_07_Core_DMS_Captions", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.0701010c": {UL: "AS_07_Core_DMS_AudioTrackPrimaryLanguage", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.0701010d": {UL: "AS_07_Core_DMS_AudioTrackSecondaryLanguage", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.0701010e": {UL: "AS_07_Core_DMS_AudioTrackLayout", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.0701010f": {UL: "AS_07_Core_DMS_AudioTrackLayoutComment", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010110": {UL: "AS_07_Core_DMS_Devices", Length: 0, Decode: DecodeTStrongReferenceSetAS_07_DMS_Device},
}

type GAS_07_Core_DMS_FrameworkStruct struct {
	InstanceID                                 TUUID                                   // IsOptional:true
	AS_07_Core_DMS_ShimName                    TUTF16String                            // IsOptional:false
	AS_07_Core_DMS_Identifiers                 TStrongReferenceSetAS_07_DMS_Identifier // IsOptional:false
	AS_07_Core_DMS_ResponsibleOrganizationName TUTF16String                            // IsOptional:false
	AS_07_Core_DMS_PictureFormat               TUTF16String                            // IsOptional:false
	AS_07_Core_DMS_IntendedAFD                 TUTF16String                            // IsOptional:false
	AS_07_Core_DMS_Captions                    TUTF16String                            // IsOptional:false
	AS_07_Core_DMS_AudioTrackLayout            TAUID                                   // IsOptional:false

}

func (g *GAS_07_Core_DMS_FrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_07_Core_DMS_ShimName)
	code060e2b34010101010d0e010107010101 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 14, 1, 1, 7, 1, 1, 1}, []byte{})
	result = append(result, code060e2b34010101010d0e010107010101...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTStrongReferenceSetAS_07_DMS_Identifier(g.AS_07_Core_DMS_Identifiers)
	code060e2b34010101010d0e010107010102 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 14, 1, 1, 7, 1, 1, 2}, []byte{})
	result = append(result, code060e2b34010101010d0e010107010102...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_07_Core_DMS_ResponsibleOrganizationName)
	code060e2b34010101010d0e010107010103 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 14, 1, 1, 7, 1, 1, 3}, []byte{})
	result = append(result, code060e2b34010101010d0e010107010103...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_07_Core_DMS_PictureFormat)
	code060e2b34010101010d0e010107010109 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 14, 1, 1, 7, 1, 1, 9}, []byte{})
	result = append(result, code060e2b34010101010d0e010107010109...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_07_Core_DMS_IntendedAFD)
	code060e2b34010101010d0e01010701010a := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 14, 1, 1, 7, 1, 1, 10}, []byte{})
	result = append(result, code060e2b34010101010d0e01010701010a...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_07_Core_DMS_Captions)
	code060e2b34010101010d0e01010701010b := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 14, 1, 1, 7, 1, 1, 11}, []byte{})
	result = append(result, code060e2b34010101010d0e01010701010b...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.AS_07_Core_DMS_AudioTrackLayout)
	code060e2b34010101010d0e01010701010e := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 14, 1, 1, 7, 1, 1, 14}, []byte{})
	result = append(result, code060e2b34010101010d0e01010701010e...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 14, 1, 1, 7, 1, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAS_07_DMS_Device = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010202": {UL: "AS_07_Core_DMS_DeviceType", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010203": {UL: "AS_07_Core_DMS_DeviceManufacturer", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010204": {UL: "AS_07_Core_DMS_DeviceModel", Length: 0, Decode: DecodeTUTF8String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010205": {UL: "AS_07_Core_DMS_DeviceSerialNumber", Length: 0, Decode: DecodeTUTF8String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010206": {UL: "AS_07_Core_DMS_DeviceUsageDescription", Length: 0, Decode: DecodeTUTF16String},
}

type GAS_07_DMS_DeviceStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GAS_07_DMS_DeviceStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 14, 1, 1, 7, 1, 2, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAS_07_DMS_Identifier = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010302": {UL: "AS_07_DMS_IdentifierValue", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010303": {UL: "AS_07_DMS_IdentifierRole", Length: 0, Decode: DecodeTAS_07_DMS_IdentifierRoleCode},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010304": {UL: "AS_07_DMS_IdentifierType", Length: 0, Decode: DecodeTAS_07_DMS_IdentifierTypeCode},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010305": {UL: "AS_07_DMS_IdentifierComment", Length: 0, Decode: DecodeTUTF16String},
}

type GAS_07_DMS_IdentifierStruct struct {
	InstanceID                TUUID                         // IsOptional:true
	AS_07_DMS_IdentifierValue TUTF16String                  // IsOptional:false
	AS_07_DMS_IdentifierRole  TAS_07_DMS_IdentifierRoleCode // IsOptional:false
	AS_07_DMS_IdentifierType  TAS_07_DMS_IdentifierTypeCode // IsOptional:false

}

func (g *GAS_07_DMS_IdentifierStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_07_DMS_IdentifierValue)
	code060e2b34010101010d0e010107010302 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 14, 1, 1, 7, 1, 3, 2}, []byte{})
	result = append(result, code060e2b34010101010d0e010107010302...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAS_07_DMS_IdentifierRoleCode(g.AS_07_DMS_IdentifierRole)
	code060e2b34010101010d0e010107010303 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 14, 1, 1, 7, 1, 3, 3}, []byte{})
	result = append(result, code060e2b34010101010d0e010107010303...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAS_07_DMS_IdentifierTypeCode(g.AS_07_DMS_IdentifierType)
	code060e2b34010101010d0e010107010304 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 14, 1, 1, 7, 1, 3, 4}, []byte{})
	result = append(result, code060e2b34010101010d0e010107010304...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 14, 1, 1, 7, 1, 3, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAS_07_GSP_DMS_Object = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.01030408.00000000": {UL: "GenericStreamID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010d.04060806.00000000": {UL: "TextBasedMetadataPayloadSchemeID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010d.04090202.00000000": {UL: "TextMIMEMediaType", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.03010102.02140000": {UL: "RFC5646TextLanguageCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010d.03020106.03020000": {UL: "TextDataDescription", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.0101010c.05200701.11000000": {UL: "LinkedDescriptiveObjectPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010401": {UL: "AS_07_GSP_DMS_Identifiers", Length: 0, Decode: DecodeTStrongReferenceSetAS_07_DMS_Identifier},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010402": {UL: "AS_07_GSP_DMS_MIMEMediaType", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010403": {UL: "AS_07_GSP_DMS_DataDescription", Length: 0, Decode: DecodeTAS_07_DMS_DataDescriptionCode},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07010404": {UL: "AS_07_GSP_DMS_Note", Length: 0, Decode: DecodeTUTF16String},
}

type GAS_07_GSP_DMS_ObjectStruct struct {
	GenericStreamID                  uint32                                  // IsOptional:false
	TextBasedMetadataPayloadSchemeID TAUID                                   // IsOptional:false
	TextMIMEMediaType                TUTF16String                            // IsOptional:false
	RFC5646TextLanguageCode          TUTF16String                            // IsOptional:false
	InstanceID                       TUUID                                   // IsOptional:true
	AS_07_GSP_DMS_Identifiers        TStrongReferenceSetAS_07_DMS_Identifier // IsOptional:false
	AS_07_GSP_DMS_MIMEMediaType      TUTF16String                            // IsOptional:false
	AS_07_GSP_DMS_DataDescription    TAS_07_DMS_DataDescriptionCode          // IsOptional:false

}

func (g *GAS_07_GSP_DMS_ObjectStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUInt32(g.GenericStreamID)
	code060e2b340101010d0103040800000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 1, 3, 4, 8, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0103040800000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAUID(g.TextBasedMetadataPayloadSchemeID)
	code060e2b340101010d0406080600000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 4, 6, 8, 6, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0406080600000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.TextMIMEMediaType)
	code060e2b340101010d0409020200000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 4, 9, 2, 2, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0409020200000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.RFC5646TextLanguageCode)
	code060e2b340101010d0301010202140000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 3, 1, 1, 2, 2, 20, 0, 0}, []byte{})
	result = append(result, code060e2b340101010d0301010202140000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTStrongReferenceSetAS_07_DMS_Identifier(g.AS_07_GSP_DMS_Identifiers)
	code060e2b34010101010d0e010107010401 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 14, 1, 1, 7, 1, 4, 1}, []byte{})
	result = append(result, code060e2b34010101010d0e010107010401...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_07_GSP_DMS_MIMEMediaType)
	code060e2b34010101010d0e010107010402 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 14, 1, 1, 7, 1, 4, 2}, []byte{})
	result = append(result, code060e2b34010101010d0e010107010402...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTAS_07_DMS_DataDescriptionCode(g.AS_07_GSP_DMS_DataDescription)
	code060e2b34010101010d0e010107010403 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 14, 1, 1, 7, 1, 4, 3}, []byte{})
	result = append(result, code060e2b34010101010d0e010107010403...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 14, 1, 1, 7, 1, 4, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAS_07_GSP_DMS_Framework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.06010104.05410100": {UL: "TextBasedObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GAS_07_GSP_DMS_FrameworkStruct struct {
	TextBasedObject TStrongReference // IsOptional:false
	InstanceID      TUUID            // IsOptional:true

}

func (g *GAS_07_GSP_DMS_FrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTStrongReference(g.TextBasedObject)
	code060e2b340101010d0601010405410100 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 6, 1, 1, 4, 5, 65, 1, 0}, []byte{})
	result = append(result, code060e2b340101010d0601010405410100...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 14, 1, 1, 7, 2, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAS_07_GSP_BD_DMS_Framework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.06010104.05410100": {UL: "TextBasedObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GAS_07_GSP_BD_DMS_FrameworkStruct struct {
	TextBasedObject TStrongReference // IsOptional:false
	InstanceID      TUUID            // IsOptional:true

}

func (g *GAS_07_GSP_BD_DMS_FrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTStrongReference(g.TextBasedObject)
	code060e2b340101010d0601010405410100 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 6, 1, 1, 4, 5, 65, 1, 0}, []byte{})
	result = append(result, code060e2b340101010d0601010405410100...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 14, 1, 1, 7, 2, 2, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAS_07_GSP_TD_DMS_Framework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010d.06010104.05410100": {UL: "TextBasedObject", Length: 0, Decode: DecodeTStrongReference},
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07020301": {UL: "AS_07_GSP_TD_DMS_PrimaryRFC5646LanguageCode", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07020302": {UL: "AS_07_GSP_TD_DMS_SecondaryRFC5646LanguageCode", Length: 0, Decode: DecodeTUTF16String},
}

type GAS_07_GSP_TD_DMS_FrameworkStruct struct {
	TextBasedObject                             TStrongReference // IsOptional:false
	InstanceID                                  TUUID            // IsOptional:true
	AS_07_GSP_TD_DMS_PrimaryRFC5646LanguageCode TUTF16String     // IsOptional:false

}

func (g *GAS_07_GSP_TD_DMS_FrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTStrongReference(g.TextBasedObject)
	code060e2b340101010d0601010405410100 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 13, 6, 1, 1, 4, 5, 65, 1, 0}, []byte{})
	result = append(result, code060e2b340101010d0601010405410100...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_07_GSP_TD_DMS_PrimaryRFC5646LanguageCode)
	code060e2b34010101010d0e010107020301 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 14, 1, 1, 7, 2, 3, 1}, []byte{})
	result = append(result, code060e2b34010101010d0e010107020301...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 14, 1, 1, 7, 2, 3, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAS_07_Segmentation_DMS_Framework = map[string]Group{
	"urn:smpte:ul:060e2b34.0101010c.05200701.0c000000": {UL: "LinkedDescriptiveFrameworkPluginID", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07030101": {UL: "AS_07_Segmentation_DMS_PartNumber", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07030102": {UL: "AS_07_Segmentation_DMS_PartTotal", Length: 2, Decode: DecodeTUInt16},
}

type GAS_07_Segmentation_DMS_FrameworkStruct struct {
	InstanceID                        TUUID  // IsOptional:true
	AS_07_Segmentation_DMS_PartNumber uint16 // IsOptional:false
	AS_07_Segmentation_DMS_PartTotal  uint16 // IsOptional:false

}

func (g *GAS_07_Segmentation_DMS_FrameworkStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.AS_07_Segmentation_DMS_PartNumber)
	code060e2b34010101010d0e010107030101 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 14, 1, 1, 7, 3, 1, 1}, []byte{})
	result = append(result, code060e2b34010101010d0e010107030101...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUInt16(g.AS_07_Segmentation_DMS_PartTotal)
	code060e2b34010101010d0e010107030102 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 14, 1, 1, 7, 3, 1, 2}, []byte{})
	result = append(result, code060e2b34010101010d0e010107030102...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 14, 1, 1, 7, 3, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GAS_07_TimecodeLabelSubdescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07040101": {UL: "AS_07_DateTimeSymbol", Length: 0, Decode: DecodeTUTF16String},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07040102": {UL: "AS_07_DateTimeEssenceTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07040103": {UL: "AS_07_DateTimeChannelID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010101.0d0e0101.07040104": {UL: "AS_07_DateTimeDescription", Length: 0, Decode: DecodeTUTF16String},
}

type GAS_07_TimecodeLabelSubdescriptorStruct struct {
	InstanceID           TUUID        // IsOptional:true
	AS_07_DateTimeSymbol TUTF16String // IsOptional:false

}

func (g *GAS_07_TimecodeLabelSubdescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF16String(g.AS_07_DateTimeSymbol)
	code060e2b34010101010d0e010107040101 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 13, 14, 1, 1, 7, 4, 1, 1}, []byte{})
	result = append(result, code060e2b34010101010d0e010107040101...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 13, 14, 1, 1, 7, 4, 1, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GIADataEssenceDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010103.04030302.00000000": {UL: "DataEssenceCoding", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
}

type GIADataEssenceDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GIADataEssenceDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 5, 14, 9, 6, 3, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GIADataEssenceSubDescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.0e090506.00000000": {UL: "ImmersiveAudioVersion", Length: 1, Decode: DecodeTUInt8},
	"urn:smpte:ul:060e2b34.01010105.0e090507.00000000": {UL: "MaxChannelCount", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.0e090508.00000000": {UL: "MaxObjectCount", Length: 2, Decode: DecodeTUInt16},
	"urn:smpte:ul:060e2b34.01010105.0e090509.00000000": {UL: "ImmersiveAudioID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010105.0e09050a.00000000": {UL: "FirstFrame", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.0101010e.04020301.0f000000": {UL: "IABSampleRate", Length: 8, Decode: DecodeTRational},
}

type GIADataEssenceSubDescriptorStruct struct {
	InstanceID TUUID // IsOptional:true

}

func (g *GIADataEssenceSubDescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 5, 14, 9, 6, 6, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GMRXessencedescriptor = map[string]Group{
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010105.0e090400.01000000": {UL: "ISO8601Time", Length: 0, Decode: DecodeTUTF8String},
	"urn:smpte:ul:060e2b34.01010105.0e090400.02000000": {UL: "MetarexID", Length: 0, Decode: DecodeTUTF8String},
	"urn:smpte:ul:060e2b34.01010105.0e090400.03000000": {UL: "RegURI", Length: 0, Decode: DecodeTUTF8String},
}

type GMRXessencedescriptorStruct struct {
	InstanceID  TUUID       // IsOptional:true
	ISO8601Time TUTF8String // IsOptional:false
	MetarexID   TUTF8String // IsOptional:false
	RegURI      TUTF8String // IsOptional:false

}

func (g *GMRXessencedescriptorStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF8String(g.ISO8601Time)
	code060e2b34010101050e09040001000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 14, 9, 4, 0, 1, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101050e09040001000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF8String(g.MetarexID)
	code060e2b34010101050e09040002000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 14, 9, 4, 0, 2, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101050e09040002000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF8String(g.RegURI)
	code060e2b34010101050e09040003000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 14, 9, 4, 0, 3, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101050e09040003000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 1, 15, 17, 17, 17, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

var GISXD = map[string]Group{
	"urn:smpte:ul:060e2b34.01010103.04030302.00000000": {UL: "DataEssenceCoding", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.01010101.04060101.00000000": {UL: "SampleRate", Length: 8, Decode: DecodeTRational},
	"urn:smpte:ul:060e2b34.01010101.04060102.00000000": {UL: "EssenceLength", Length: 8, Decode: DecodeTLengthType},
	"urn:smpte:ul:060e2b34.01010102.06010104.01020000": {UL: "ContainerFormat", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.06010104.01030000": {UL: "Codec", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010105.06010103.05000000": {UL: "LinkedTrackID", Length: 4, Decode: DecodeTUInt32},
	"urn:smpte:ul:060e2b34.01010102.06010104.06030000": {UL: "Locators", Length: 0, Decode: DecodeTLocatorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010109.06010104.06100000": {UL: "SubDescriptors", Length: 0, Decode: DecodeTSubDescriptorStrongReferenceVector},
	"urn:smpte:ul:060e2b34.01010101.01011502.00000000": {UL: "InstanceID", Length: 16, Decode: DecodeTUUID},
	"urn:smpte:ul:060e2b34.01010102.06010104.01010000": {UL: "ObjectClass", Length: 0, Decode: DecodeTWeakReference},
	"urn:smpte:ul:060e2b34.01010102.05200701.08000000": {UL: "LinkedGenerationID", Length: 16, Decode: DecodeTAUID},
	"urn:smpte:ul:060e2b34.0101010c.06010104.020e0000": {UL: "ApplicationPlugInObjects", Length: 0, Decode: DecodeTApplicationPluginObjectStrongReferenceSet},
	"urn:smpte:ul:060e2b34.01010105.0e090400.00000000": {UL: "NamespaceURIUTF8", Length: 0, Decode: DecodeTUTF8String},
}

type GISXDStruct struct {
	DataEssenceCoding TAUID          // IsOptional:false
	SampleRate        TRational      // IsOptional:false
	ContainerFormat   TWeakReference // IsOptional:false
	InstanceID        TUUID          // IsOptional:true
	NamespaceURIUTF8  TUTF8String    // IsOptional:false

}

func (g *GISXDStruct) Encode(primer *Primer) ([]byte, error) {
	var result, field, BERField []byte

	field, _ = EncodeTAUID(g.DataEssenceCoding)
	result = append(result, []byte{62, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 3, 4, 3, 3, 2, 0, 0, 0, 0}, []byte{62, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTRational(g.SampleRate)
	result = append(result, []byte{48, 1}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 4, 6, 1, 1, 0, 0, 0, 0}, []byte{48, 1})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTWeakReference(g.ContainerFormat)
	result = append(result, []byte{48, 4}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 2, 6, 1, 1, 4, 1, 2, 0, 0}, []byte{48, 4})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUUID(g.InstanceID)
	result = append(result, []byte{60, 10}...)
	primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 1, 1, 1, 21, 2, 0, 0, 0, 0}, []byte{60, 10})
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	field, _ = EncodeTUTF8String(g.NamespaceURIUTF8)
	code060e2b34010101050e09040000000000 := primer.AddEntry([]byte{6, 14, 43, 52, 1, 1, 1, 5, 14, 9, 4, 0, 0, 0, 0, 0}, []byte{})
	result = append(result, code060e2b34010101050e09040000000000...)
	BERField = binary.BigEndian.AppendUint16([]byte{}, uint16(len(field)))
	result = append(result, BERField...)
	result = append(result, field...)

	header := []byte{6, 14, 43, 52, 2, 83, 1, 5, 14, 9, 5, 2, 0, 0, 0, 0}

	totalLength := BEREncode(len(result))
	header = append(header, totalLength...)

	result = append(header, result...)
	return result, nil
}

// Groups is a map of the groups in the groups register.
// Values are found with their UL which takes the format
// "urn:smpte:ul:00000000.00000000.00000000.00000000".
//
// Each group contains the individual fields and decode functions.
var Groups = map[string]GroupID{
	"urn:smpte:ul:060e2b34.027f0101.02070101.01000000": {Name: "BadRequestResponse", Group: GBadRequestResponse},
	"urn:smpte:ul:060e2b34.027f0101.02070102.10000000": {Name: "TimeRequest", Group: GTimeRequest},
	"urn:smpte:ul:060e2b34.027f0101.02070102.11000000": {Name: "TimeResponse", Group: GTimeResponse},
	"urn:smpte:ul:060e2b34.027f0101.02070102.12000000": {Name: "EventListRequest", Group: GEventListRequest},
	"urn:smpte:ul:060e2b34.027f0101.02070102.13000000": {Name: "EventListResponse", Group: GEventListResponse},
	"urn:smpte:ul:060e2b34.027f0101.02070102.14000000": {Name: "EventIDRequest", Group: GEventIDRequest},
	"urn:smpte:ul:060e2b34.027f0101.02070102.15000000": {Name: "EventIDResponse", Group: GEventIDResponse},
	"urn:smpte:ul:060e2b34.027f0101.02070102.16000000": {Name: "SecureProcessingBlockQueryRequest", Group: GSecureProcessingBlockQueryRequest},
	"urn:smpte:ul:060e2b34.027f0101.02070102.17000000": {Name: "SecureProcessingBlockQueryResponse", Group: GSecureProcessingBlockQueryResponse},
	"urn:smpte:ul:060e2b34.027f0101.02070102.18000000": {Name: "ProjectorCertificateRequest", Group: GProjectorCertificateRequest},
	"urn:smpte:ul:060e2b34.027f0101.02070102.19000000": {Name: "ProjectorCertificateResponse", Group: GProjectorCertificateResponse},
	"urn:smpte:ul:060e2b34.027f0101.02070103.20000000": {Name: "LinkEncryptionKeyLoadRequest", Group: GLinkEncryptionKeyLoadRequest},
	"urn:smpte:ul:060e2b34.027f0101.02070103.21000000": {Name: "LinkEncryptionKeyLoadResponse", Group: GLinkEncryptionKeyLoadResponse},
	"urn:smpte:ul:060e2b34.027f0101.02070103.22000000": {Name: "LinkEncryptionKeyQueryIDRequest", Group: GLinkEncryptionKeyQueryIDRequest},
	"urn:smpte:ul:060e2b34.027f0101.02070103.23000000": {Name: "LinkEncryptionKeyQueryIDResponse", Group: GLinkEncryptionKeyQueryIDResponse},
	"urn:smpte:ul:060e2b34.027f0101.02070103.24000000": {Name: "LinkEncryptionKeyQueryAllRequest", Group: GLinkEncryptionKeyQueryAllRequest},
	"urn:smpte:ul:060e2b34.027f0101.02070103.25000000": {Name: "LinkEncryptionKeyQueryAllResponse", Group: GLinkEncryptionKeyQueryAllResponse},
	"urn:smpte:ul:060e2b34.027f0101.02070103.26000000": {Name: "LinkEncryptionPurgeIDRequest", Group: GLinkEncryptionPurgeIDRequest},
	"urn:smpte:ul:060e2b34.027f0101.02070103.27000000": {Name: "LinkEncryptionPurgeIDResponse", Group: GLinkEncryptionPurgeIDResponse},
	"urn:smpte:ul:060e2b34.027f0101.02070103.28000000": {Name: "LinkEncryptionPurgeAllRequest", Group: GLinkEncryptionPurgeAllRequest},
	"urn:smpte:ul:060e2b34.027f0101.02070103.29000000": {Name: "LinkEncryptionPurgeAllResponse", Group: GLinkEncryptionPurgeAllResponse},
	"urn:smpte:ul:060e2b34.027f0101.05310101.00000000": {Name: "DMCVTGenericSet1", Group: GDMCVTGenericSet1},
	"urn:smpte:ul:060e2b34.027f0101.05310201.00000000": {Name: "DMCVTApp1Set", Group: GDMCVTApp1Set},
	"urn:smpte:ul:060e2b34.027f0101.05310202.00000000": {Name: "DMCVTApp2Set", Group: GDMCVTApp2Set},
	"urn:smpte:ul:060e2b34.027f0101.05310203.00000000": {Name: "DMCVTApp3Set", Group: GDMCVTApp3Set},
	"urn:smpte:ul:060e2b34.027f0101.05310204.00000000": {Name: "DMCVTApp4Set", Group: GDMCVTApp4Set},
	"urn:smpte:ul:060e2b34.027f0101.05320100.00000000": {Name: "MDColorVolumeMetadata", Group: GMDColorVolumeMetadata},
	"urn:smpte:ul:060e2b34.027f0101.05320200.00000000": {Name: "MaximumLightLevelMetadata", Group: GMaximumLightLevelMetadata},
	"urn:smpte:ul:060e2b34.027f0101.0c010101.01010100": {Name: "AdministrativeBaseClass", Group: GAdministrativeBaseClass},
	"urn:smpte:ul:060e2b34.027f0101.0c010101.01010200": {Name: "CompoundEntryElementBaseClass", Group: GCompoundEntryElementBaseClass},
	"urn:smpte:ul:060e2b34.027f0101.0c010101.01010300": {Name: "Entry", Group: GEntry},
	"urn:smpte:ul:060e2b34.027f0101.0c010101.01010400": {Name: "EntryAdministration", Group: GEntryAdministration},
	"urn:smpte:ul:060e2b34.027f0101.0c010101.01010500": {Name: "Leaf", Group: GLeaf},
	"urn:smpte:ul:060e2b34.027f0101.0c010101.01010600": {Name: "Node", Group: GNode},
	"urn:smpte:ul:060e2b34.027f0101.0c010101.01010700": {Name: "Register", Group: GRegister},
	"urn:smpte:ul:060e2b34.027f0101.0c010101.01010800": {Name: "RegisterAdministration", Group: GRegisterAdministration},
	"urn:smpte:ul:060e2b34.027f0101.0c010101.01010900": {Name: "RifBaseClass", Group: GRifBaseClass},
	"urn:smpte:ul:060e2b34.027f0101.0c020101.01010000": {Name: "LensUnitAcquisitionMetadata", Group: GLensUnitAcquisitionMetadata},
	"urn:smpte:ul:060e2b34.027f0101.0c020101.02010000": {Name: "CameraUnitAcquisitionMetadata", Group: GCameraUnitAcquisitionMetadata},
	"urn:smpte:ul:060e2b34.027f0101.0c020101.7f010000": {Name: "UserDefinedAcquisitionMetadata", Group: GUserDefinedAcquisitionMetadata},
	"urn:smpte:ul:060e2b34.027f0101.0c030101.00000000": {Name: "AuxDataBlockTransferHeader", Group: GAuxDataBlockTransferHeader},
	"urn:smpte:ul:060e2b34.027f0101.0c030102.00000000": {Name: "AuxDataBlock", Group: GAuxDataBlock},
	"urn:smpte:ul:060e2b34.027f0101.0c040100.00000000": {Name: "AudioMetadataPack", Group: GAudioMetadataPack},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01010100": {Name: "InterchangeObject", Group: GInterchangeObject},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01010200": {Name: "Component", Group: GComponent},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01010300": {Name: "Segment", Group: GSegment},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01010400": {Name: "EdgeCode", Group: GEdgeCode},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01010500": {Name: "EssenceGroup", Group: GEssenceGroup},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01010600": {Name: "Event", Group: GEvent},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01010700": {Name: "GPITrigger", Group: GGPITrigger},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01010800": {Name: "CommentMarker", Group: GCommentMarker},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01010900": {Name: "Filler", Group: GFiller},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01010a00": {Name: "OperationGroup", Group: GOperationGroup},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01010b00": {Name: "NestedScope", Group: GNestedScope},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01010c00": {Name: "Pulldown", Group: GPulldown},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01010d00": {Name: "ScopeReference", Group: GScopeReference},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01010e00": {Name: "Selector", Group: GSelector},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01010f00": {Name: "Sequence", Group: GSequence},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01011000": {Name: "SourceReference", Group: GSourceReference},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01011100": {Name: "SourceClip", Group: GSourceClip},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01011200": {Name: "TextClip", Group: GTextClip},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01011300": {Name: "HTMLClip", Group: GHTMLClip},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01011400": {Name: "Timecode", Group: GTimecode},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01011500": {Name: "TimecodeStream", Group: GTimecodeStream},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01011600": {Name: "TimecodeStream12M", Group: GTimecodeStream12M},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01011700": {Name: "Transition", Group: GTransition},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01011800": {Name: "ContentStorage", Group: GContentStorage},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01011900": {Name: "ControlPoint", Group: GControlPoint},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01011a00": {Name: "DefinitionObject", Group: GDefinitionObject},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01011b00": {Name: "DataDefinition", Group: GDataDefinition},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01011c00": {Name: "OperationDefinition", Group: GOperationDefinition},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01011d00": {Name: "ParameterDefinition", Group: GParameterDefinition},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01011e00": {Name: "PluginDefinition", Group: GPluginDefinition},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01011f00": {Name: "CodecDefinition", Group: GCodecDefinition},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01012000": {Name: "ContainerDefinition", Group: GContainerDefinition},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01012100": {Name: "InterpolationDefinition", Group: GInterpolationDefinition},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01012200": {Name: "Dictionary", Group: GDictionary},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01012300": {Name: "EssenceData", Group: GEssenceData},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01012400": {Name: "EssenceDescriptor", Group: GEssenceDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01012500": {Name: "FileDescriptor", Group: GFileDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01012600": {Name: "AIFCDescriptor", Group: GAIFCDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01012700": {Name: "PictureDescriptor", Group: GPictureDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01012800": {Name: "CDCIDescriptor", Group: GCDCIDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01012900": {Name: "RGBADescriptor", Group: GRGBADescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01012a00": {Name: "HTMLDescriptor", Group: GHTMLDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01012b00": {Name: "TIFFDescriptor", Group: GTIFFDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01012c00": {Name: "WAVEDescriptor", Group: GWAVEDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01012d00": {Name: "FilmDescriptor", Group: GFilmDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01012e00": {Name: "TapeDescriptor", Group: GTapeDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01012f00": {Name: "Preface", Group: GPreface},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01013000": {Name: "Identification", Group: GIdentification},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01013100": {Name: "Locator", Group: GLocator},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01013200": {Name: "NetworkLocator", Group: GNetworkLocator},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01013300": {Name: "TextLocator", Group: GTextLocator},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01013400": {Name: "Package", Group: GPackage},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01013500": {Name: "CompositionPackage", Group: GCompositionPackage},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01013600": {Name: "MaterialPackage", Group: GMaterialPackage},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01013700": {Name: "SourcePackage", Group: GSourcePackage},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01013800": {Name: "Track", Group: GTrack},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01013900": {Name: "EventTrack", Group: GEventTrack},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01013a00": {Name: "StaticTrack", Group: GStaticTrack},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01013b00": {Name: "TimelineTrack", Group: GTimelineTrack},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01013c00": {Name: "Parameter", Group: GParameter},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01013d00": {Name: "ConstantValue", Group: GConstantValue},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01013e00": {Name: "VaryingValue", Group: GVaryingValue},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01013f00": {Name: "TaggedValue", Group: GTaggedValue},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01014000": {Name: "KLVData", Group: GKLVData},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01014100": {Name: "DescriptiveMarker", Group: GDescriptiveMarker},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01014200": {Name: "SoundDescriptor", Group: GSoundDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01014300": {Name: "DataEssenceDescriptor", Group: GDataEssenceDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01014400": {Name: "MultipleDescriptor", Group: GMultipleDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01014500": {Name: "DescriptiveClip", Group: GDescriptiveClip},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01014600": {Name: "DateTimeDescriptor", Group: GDateTimeDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01014700": {Name: "AES3PCMDescriptor", Group: GAES3PCMDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01014800": {Name: "WAVEPCMDescriptor", Group: GWAVEPCMDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01014900": {Name: "PhysicalDescriptor", Group: GPhysicalDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01014a00": {Name: "ImportDescriptor", Group: GImportDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01014b00": {Name: "RecordingDescriptor", Group: GRecordingDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01014c00": {Name: "TaggedValueDefinition", Group: GTaggedValueDefinition},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01014d00": {Name: "KLVDataDefinition", Group: GKLVDataDefinition},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01014e00": {Name: "AuxiliaryDescriptor", Group: GAuxiliaryDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01014f00": {Name: "RIFFChunk", Group: GRIFFChunk},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01015000": {Name: "BWFImportDescriptor", Group: GBWFImportDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01015100": {Name: "MPEGVideoDescriptor", Group: GMPEGVideoDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01015200": {Name: "ParsedTextDescriptor", Group: GParsedTextDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01015300": {Name: "SGMLDescriptor", Group: GSGMLDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01015400": {Name: "XMLDescriptor", Group: GXMLDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01015500": {Name: "HTMLParsedTextDescriptor", Group: GHTMLParsedTextDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01015600": {Name: "RP217Descriptor", Group: GRP217Descriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01015700": {Name: "DynamicMarker", Group: GDynamicMarker},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01015800": {Name: "DynamicClip", Group: GDynamicClip},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01015900": {Name: "SubDescriptor", Group: GSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01015a00": {Name: "JPEG2000SubDescriptor", Group: GJPEG2000SubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01015b00": {Name: "VBIDataDescriptor", Group: GVBIDataDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01015c00": {Name: "ANCDataDescriptor", Group: GANCDataDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01015d00": {Name: "DCPCMSoundDescriptor", Group: GDCPCMSoundDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01015e00": {Name: "MPEGAudioDescriptor", Group: GMPEGAudioDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01015f00": {Name: "VC1VideoDescriptor", Group: GVC1VideoDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01016000": {Name: "PackageMarker", Group: GPackageMarker},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01016100": {Name: "ApplicationPlugInObject", Group: GApplicationPlugInObject},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01016200": {Name: "ApplicationReferencedObject", Group: GApplicationReferencedObject},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01016300": {Name: "StereoscopicPictureSubDescriptor", Group: GStereoscopicPictureSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01016400": {Name: "DCTimedTextDescriptor", Group: GDCTimedTextDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01016500": {Name: "DCTimedTextResourceSubDescriptor", Group: GDCTimedTextResourceSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01016600": {Name: "ApplicationObject", Group: GApplicationObject},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01016700": {Name: "ContainerConstraintsSubDescriptor", Group: GContainerConstraintsSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01016800": {Name: "MPEG4VisualSubDescriptor", Group: GMPEG4VisualSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01016900": {Name: "TIFFPictureEssenceDescriptor", Group: GTIFFPictureEssenceDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01016a00": {Name: "MCALabelSubDescriptor", Group: GMCALabelSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01016b00": {Name: "AudioChannelLabelSubDescriptor", Group: GAudioChannelLabelSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01016c00": {Name: "SoundfieldGroupLabelSubDescriptor", Group: GSoundfieldGroupLabelSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01016d00": {Name: "GroupOfSoundfieldGroupsLabelSubDescriptor", Group: GGroupOfSoundfieldGroupsLabelSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01016e00": {Name: "AVCSubDescriptor", Group: GAVCSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01016f00": {Name: "EventTextDescriptor", Group: GEventTextDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01017000": {Name: "STLDescriptor", Group: GSTLDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01017100": {Name: "STLSubDescriptor", Group: GSTLSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01017200": {Name: "OperationsStereoscopicSubDescriptor", Group: GOperationsStereoscopicSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01017300": {Name: "AuxDataEssenceDescriptor", Group: GAuxDataEssenceDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01017400": {Name: "VC2SubDescriptor", Group: GVC2SubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01017500": {Name: "DMCVTTargetSubDescriptor", Group: GDMCVTTargetSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01017600": {Name: "VC5BayerPictureEssenceSubDescriptor", Group: GVC5BayerPictureEssenceSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01017700": {Name: "VC5CDCIPictureEssenceSubDescriptor", Group: GVC5CDCIPictureEssenceSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01017800": {Name: "AACSubDescriptor", Group: GAACSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01017900": {Name: "ACESPictureSubDescriptor", Group: GACESPictureSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01017a00": {Name: "TargetFrameSubDescriptor", Group: GTargetFrameSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01017b00": {Name: "IABEssenceDescriptor", Group: GIABEssenceDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01017c00": {Name: "IABSoundfieldLabelSubDescriptor", Group: GIABSoundfieldLabelSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01017d00": {Name: "OPDefinition", Group: GOPDefinition},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01017e00": {Name: "CompressionDefinition", Group: GCompressionDefinition},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01017f00": {Name: "AbstractObject", Group: GAbstractObject},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.01018101": {Name: "HEVCSubDescriptor", Group: GHEVCSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.02010000": {Name: "ClassDefinition", Group: GClassDefinition},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.02020000": {Name: "PropertyDefinition", Group: GPropertyDefinition},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.02030000": {Name: "TypeDefinition", Group: GTypeDefinition},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.02040000": {Name: "TypeDefinitionInteger", Group: GTypeDefinitionInteger},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.02050000": {Name: "TypeDefinitionStrongObjectReference", Group: GTypeDefinitionStrongObjectReference},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.02060000": {Name: "TypeDefinitionWeakObjectReference", Group: GTypeDefinitionWeakObjectReference},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.02070000": {Name: "TypeDefinitionEnumeration", Group: GTypeDefinitionEnumeration},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.02080000": {Name: "TypeDefinitionFixedArray", Group: GTypeDefinitionFixedArray},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.02090000": {Name: "TypeDefinitionVariableArray", Group: GTypeDefinitionVariableArray},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.020a0000": {Name: "TypeDefinitionSet", Group: GTypeDefinitionSet},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.020b0000": {Name: "TypeDefinitionString", Group: GTypeDefinitionString},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.020c0000": {Name: "TypeDefinitionStream", Group: GTypeDefinitionStream},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.020d0000": {Name: "TypeDefinitionRecord", Group: GTypeDefinitionRecord},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.020e0000": {Name: "TypeDefinitionRename", Group: GTypeDefinitionRename},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.02200000": {Name: "TypeDefinitionExtendibleEnumeration", Group: GTypeDefinitionExtendibleEnumeration},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.02210000": {Name: "TypeDefinitionIndirect", Group: GTypeDefinitionIndirect},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.02220000": {Name: "TypeDefinitionOpaque", Group: GTypeDefinitionOpaque},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.02230000": {Name: "TypeDefinitionCharacter", Group: GTypeDefinitionCharacter},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.02240000": {Name: "MetaDefinition", Group: GMetaDefinition},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.02250000": {Name: "MetaDictionary", Group: GMetaDictionary},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.02260000": {Name: "ExtensionScheme", Group: GExtensionScheme},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.02270000": {Name: "PropertyAliasDefinition", Group: GPropertyAliasDefinition},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.02280000": {Name: "ExtendibleEnumerationElement", Group: GExtendibleEnumerationElement},
	"urn:smpte:ul:060e2b34.027f0101.0d010101.03000000": {Name: "Root", Group: GRoot},
	"urn:smpte:ul:060e2b34.027f0101.0d010201.01010000": {Name: "PartitionPack", Group: GPartitionPack},
	"urn:smpte:ul:060e2b34.027f0101.0d010201.01020000": {Name: "HeaderPartitionPack", Group: GHeaderPartitionPack},
	"urn:smpte:ul:060e2b34.027f0101.0d010201.01020100": {Name: "HeaderPartitionOpenIncomplete", Group: GHeaderPartitionOpenIncomplete},
	"urn:smpte:ul:060e2b34.027f0101.0d010201.01020200": {Name: "HeaderPartitionClosedIncomplete", Group: GHeaderPartitionClosedIncomplete},
	"urn:smpte:ul:060e2b34.027f0101.0d010201.01020300": {Name: "HeaderPartitionOpenComplete", Group: GHeaderPartitionOpenComplete},
	"urn:smpte:ul:060e2b34.027f0101.0d010201.01020400": {Name: "HeaderPartitionClosedComplete", Group: GHeaderPartitionClosedComplete},
	"urn:smpte:ul:060e2b34.027f0101.0d010201.01030000": {Name: "BodyPartitionPack", Group: GBodyPartitionPack},
	"urn:smpte:ul:060e2b34.027f0101.0d010201.01030100": {Name: "BodyPartitionOpenIncomplete", Group: GBodyPartitionOpenIncomplete},
	"urn:smpte:ul:060e2b34.027f0101.0d010201.01030200": {Name: "BodyPartitionClosedIncomplete", Group: GBodyPartitionClosedIncomplete},
	"urn:smpte:ul:060e2b34.027f0101.0d010201.01030300": {Name: "BodyPartitionOpenComplete", Group: GBodyPartitionOpenComplete},
	"urn:smpte:ul:060e2b34.027f0101.0d010201.01030400": {Name: "BodyPartitionClosedComplete", Group: GBodyPartitionClosedComplete},
	"urn:smpte:ul:060e2b34.027f0101.0d010201.01031100": {Name: "GenericStreamPartition", Group: GGenericStreamPartition},
	"urn:smpte:ul:060e2b34.027f0101.0d010201.01040000": {Name: "FooterPartitionPack", Group: GFooterPartitionPack},
	"urn:smpte:ul:060e2b34.027f0101.0d010201.01040200": {Name: "FooterPartitionClosedIncomplete", Group: GFooterPartitionClosedIncomplete},
	"urn:smpte:ul:060e2b34.027f0101.0d010201.01040400": {Name: "FooterPartitionClosedComplete", Group: GFooterPartitionClosedComplete},
	"urn:smpte:ul:060e2b34.027f0101.0d010201.01050100": {Name: "PrimerPack", Group: GPrimerPack},
	"urn:smpte:ul:060e2b34.027f0101.0d010201.01100100": {Name: "IndexTableSegment", Group: GIndexTableSegment},
	"urn:smpte:ul:060e2b34.027f0101.0d010201.01110100": {Name: "RandomIndexPack", Group: GRandomIndexPack},
	"urn:smpte:ul:060e2b34.027f0101.0d010301.027e0100": {Name: "EncryptedTriplet", Group: GEncryptedTriplet},
	"urn:smpte:ul:060e2b34.027f0101.0d010400.00000000": {Name: "DescriptiveObject", Group: GDescriptiveObject},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.00000000": {Name: "DescriptiveFramework", Group: GDescriptiveFramework},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01010100": {Name: "ProductionFramework", Group: GProductionFramework},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01010200": {Name: "ClipFramework", Group: GClipFramework},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01010300": {Name: "SceneFramework", Group: GSceneFramework},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01100100": {Name: "Titles", Group: GTitles},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01110100": {Name: "DMS1Identification", Group: GDMS1Identification},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01120100": {Name: "GroupRelationship", Group: GGroupRelationship},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01130100": {Name: "Branding", Group: GBranding},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01140100": {Name: "DMS1Event", Group: GDMS1Event},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01140200": {Name: "Publication", Group: GPublication},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01150100": {Name: "Award", Group: GAward},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01160100": {Name: "CaptionsDescription", Group: GCaptionsDescription},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01170100": {Name: "DMS1Annotation", Group: GDMS1Annotation},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01170200": {Name: "SettingPeriod", Group: GSettingPeriod},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01170300": {Name: "Scripting", Group: GScripting},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01170400": {Name: "Classification", Group: GClassification},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01170500": {Name: "Shot", Group: GShot},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01170600": {Name: "Keypoint", Group: GKeypoint},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01170800": {Name: "CueWords", Group: GCueWords},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01180100": {Name: "Participant", Group: GParticipant},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01190100": {Name: "ContactsList", Group: GContactsList},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.011a0200": {Name: "Person", Group: GPerson},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.011a0300": {Name: "Organization", Group: GOrganization},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.011a0400": {Name: "Location", Group: GLocation},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.011b0100": {Name: "Address", Group: GAddress},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.011b0200": {Name: "Communications", Group: GCommunications},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.011c0100": {Name: "Contract", Group: GContract},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.011c0200": {Name: "Rights", Group: GRights},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.011d0100": {Name: "PictureFormat", Group: GPictureFormat},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.011e0100": {Name: "DeviceParameters", Group: GDeviceParameters},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.011f0100": {Name: "NameValue", Group: GNameValue},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01200100": {Name: "Processing", Group: GProcessing},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.01200200": {Name: "Project", Group: GProject},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.017f0100": {Name: "DMS1Framework", Group: GDMS1Framework},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.017f0200": {Name: "ProductionClipFramework", Group: GProductionClipFramework},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.017f1000": {Name: "DMS1Object", Group: GDMS1Object},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.017f1100": {Name: "TextLanguage", Group: GTextLanguage},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.017f1200": {Name: "Thesaurus", Group: GThesaurus},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.017f1a00": {Name: "Contact", Group: GContact},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.02010000": {Name: "CryptographicFramework", Group: GCryptographicFramework},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.02020000": {Name: "CryptographicContext", Group: GCryptographicContext},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.03010000": {Name: "DMS_AS_03_Framework", Group: GDMS_AS_03_Framework},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.04010100": {Name: "TextBasedFramework", Group: GTextBasedFramework},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.04020100": {Name: "GenericStreamTextBasedSet", Group: GGenericStreamTextBasedSet},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.04020200": {Name: "UTF8TextBasedSet", Group: GUTF8TextBasedSet},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.04020300": {Name: "UTF16TextBasedSet", Group: GUTF16TextBasedSet},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.04030100": {Name: "TextBasedObject", Group: GTextBasedObject},
	"urn:smpte:ul:060e2b34.027f0101.0d010401.05010000": {Name: "EIDRFramework", Group: GEIDRFramework},
	"urn:smpte:ul:060e2b34.027f0101.0d010701.01010100": {Name: "DM_Segmentation_Framework", Group: GDM_Segmentation_Framework},
	"urn:smpte:ul:060e2b34.027f0101.0d010701.0a010100": {Name: "DMS_AS_10_Core_Framework", Group: GDMS_AS_10_Core_Framework},
	"urn:smpte:ul:060e2b34.027f0101.0d010701.0b010100": {Name: "DM_AS_11_Core_Framework", Group: GDM_AS_11_Core_Framework},
	"urn:smpte:ul:060e2b34.027f0101.0d010701.0b020100": {Name: "DM_AS_11_Segmentation_Framework", Group: GDM_AS_11_Segmentation_Framework},
	"urn:smpte:ul:060e2b34.027f0101.0d010701.0c010100": {Name: "DMS_AS_12_Framework", Group: GDMS_AS_12_Framework},
	"urn:smpte:ul:060e2b34.027f0101.0d010701.0c010200": {Name: "AS_12_DescriptiveObject", Group: GAS_12_DescriptiveObject},
	"urn:smpte:ul:060e2b34.027f0101.0d020101.00000000": {Name: "EBUCoreMainFramework", Group: GEBUCoreMainFramework},
	"urn:smpte:ul:060e2b34.027f0101.0d020102.00000000": {Name: "coreMetadata", Group: GcoreMetadata},
	"urn:smpte:ul:060e2b34.027f0101.0d020103.00000000": {Name: "metadataSchemaInformation", Group: GmetadataSchemaInformation},
	"urn:smpte:ul:060e2b34.027f0101.0d020104.00000000": {Name: "identifier", Group: Gidentifier},
	"urn:smpte:ul:060e2b34.027f0101.0d020105.00000000": {Name: "title", Group: Gtitle},
	"urn:smpte:ul:060e2b34.027f0101.0d020106.00000000": {Name: "alternativeTitle", Group: GalternativeTitle},
	"urn:smpte:ul:060e2b34.027f0101.0d020108.00000000": {Name: "subject", Group: Gsubject},
	"urn:smpte:ul:060e2b34.027f0101.0d020109.00000000": {Name: "description", Group: Gdescription},
	"urn:smpte:ul:060e2b34.027f0101.0d02010c.00000000": {Name: "date", Group: Gdate},
	"urn:smpte:ul:060e2b34.027f0101.0d02010d.00000000": {Name: "dateType", Group: GdateType},
	"urn:smpte:ul:060e2b34.027f0101.0d02010e.00000000": {Name: "type", Group: Gtype},
	"urn:smpte:ul:060e2b34.027f0101.0d02010f.00000000": {Name: "objectType", Group: GobjectType},
	"urn:smpte:ul:060e2b34.027f0101.0d020110.00000000": {Name: "genre", Group: Ggenre},
	"urn:smpte:ul:060e2b34.027f0101.0d020111.00000000": {Name: "targetAudience", Group: GtargetAudience},
	"urn:smpte:ul:060e2b34.027f0101.0d020112.00000000": {Name: "language", Group: Glanguage},
	"urn:smpte:ul:060e2b34.027f0101.0d020113.00000000": {Name: "coverage", Group: Gcoverage},
	"urn:smpte:ul:060e2b34.027f0101.0d020114.00000000": {Name: "spatial", Group: Gspatial},
	"urn:smpte:ul:060e2b34.027f0101.0d020115.00000000": {Name: "location", Group: Glocation},
	"urn:smpte:ul:060e2b34.027f0101.0d020116.00000000": {Name: "coordinates", Group: Gcoordinates},
	"urn:smpte:ul:060e2b34.027f0101.0d020117.00000000": {Name: "temporal", Group: Gtemporal},
	"urn:smpte:ul:060e2b34.027f0101.0d020118.00000000": {Name: "periodOfTime", Group: GperiodOfTime},
	"urn:smpte:ul:060e2b34.027f0101.0d020119.00000000": {Name: "rights", Group: Grights},
	"urn:smpte:ul:060e2b34.027f0101.0d02011a.00000000": {Name: "version", Group: Gversion},
	"urn:smpte:ul:060e2b34.027f0101.0d02011b.00000000": {Name: "rating", Group: Grating},
	"urn:smpte:ul:060e2b34.027f0101.0d02011c.00000000": {Name: "publicationEvent", Group: GpublicationEvent},
	"urn:smpte:ul:060e2b34.027f0101.0d02011d.00000000": {Name: "publicationHistory", Group: GpublicationHistory},
	"urn:smpte:ul:060e2b34.027f0101.0d02011e.00000000": {Name: "publicationChannel", Group: GpublicationChannel},
	"urn:smpte:ul:060e2b34.027f0101.0d02011f.00000000": {Name: "publicationMedium", Group: GpublicationMedium},
	"urn:smpte:ul:060e2b34.027f0101.0d020120.00000000": {Name: "publicationService", Group: GpublicationService},
	"urn:smpte:ul:060e2b34.027f0101.0d020121.00000000": {Name: "entity", Group: Gentity},
	"urn:smpte:ul:060e2b34.027f0101.0d020122.00000000": {Name: "contact", Group: Gcontact},
	"urn:smpte:ul:060e2b34.027f0101.0d020123.00000000": {Name: "organization", Group: Gorganization},
	"urn:smpte:ul:060e2b34.027f0101.0d020124.00000000": {Name: "department", Group: Gdepartment},
	"urn:smpte:ul:060e2b34.027f0101.0d020125.00000000": {Name: "details", Group: Gdetails},
	"urn:smpte:ul:060e2b34.027f0101.0d020126.00000000": {Name: "address", Group: Gaddress},
	"urn:smpte:ul:060e2b34.027f0101.0d020127.00000000": {Name: "region", Group: Gregion},
	"urn:smpte:ul:060e2b34.027f0101.0d020128.00000000": {Name: "compoundName", Group: GcompoundName},
	"urn:smpte:ul:060e2b34.027f0101.0d020129.00000000": {Name: "role", Group: Grole},
	"urn:smpte:ul:060e2b34.027f0101.0d02012a.00000000": {Name: "countryType", Group: GcountryType},
	"urn:smpte:ul:060e2b34.027f0101.0d02012b.01000000": {Name: "customRelation", Group: GcustomRelation},
	"urn:smpte:ul:060e2b34.027f0101.0d02012b.02000000": {Name: "basicRelation", Group: GbasicRelation},
	"urn:smpte:ul:060e2b34.027f0101.0d02012c.00000000": {Name: "planning", Group: Gplanning},
	"urn:smpte:ul:060e2b34.027f0101.0d02012d.01000000": {Name: "typeGroup", Group: GtypeGroup},
	"urn:smpte:ul:060e2b34.027f0101.0d02012d.02000000": {Name: "formatGroup", Group: GformatGroup},
	"urn:smpte:ul:060e2b34.027f0101.0d02012d.03000000": {Name: "statusGroup", Group: GstatusGroup},
	"urn:smpte:ul:060e2b34.027f0101.0d02012e.00000000": {Name: "textualAnnotation", Group: GtextualAnnotation},
	"urn:smpte:ul:060e2b34.027f0101.0d02012f.00000000": {Name: "basicLink", Group: GbasicLink},
	"urn:smpte:ul:060e2b34.027f0101.0d020130.00000000": {Name: "format", Group: Gformat},
	"urn:smpte:ul:060e2b34.027f0101.0d020131.00000000": {Name: "videoFormat", Group: GvideoFormat},
	"urn:smpte:ul:060e2b34.027f0101.0d020132.00000000": {Name: "imageFormat", Group: GimageFormat},
	"urn:smpte:ul:060e2b34.027f0101.0d020133.00000000": {Name: "audioFormat", Group: GaudioFormat},
	"urn:smpte:ul:060e2b34.027f0101.0d020134.00000000": {Name: "track", Group: Gtrack},
	"urn:smpte:ul:060e2b34.027f0101.0d020135.00000000": {Name: "dataFormat", Group: GdataFormat},
	"urn:smpte:ul:060e2b34.027f0101.0d020136.00000000": {Name: "captioning", Group: Gcaptioning},
	"urn:smpte:ul:060e2b34.027f0101.0d020137.00000000": {Name: "subtitling", Group: Gsubtitling},
	"urn:smpte:ul:060e2b34.027f0101.0d020138.00000000": {Name: "ancillaryData", Group: GancillaryData},
	"urn:smpte:ul:060e2b34.027f0101.0d020139.00000000": {Name: "signingFormat", Group: GsigningFormat},
	"urn:smpte:ul:060e2b34.027f0101.0d02013a.01000000": {Name: "technicalAttributeString", Group: GtechnicalAttributeString},
	"urn:smpte:ul:060e2b34.027f0101.0d02013a.02000000": {Name: "technicalAttributeInt8", Group: GtechnicalAttributeInt8},
	"urn:smpte:ul:060e2b34.027f0101.0d02013a.03000000": {Name: "technicalAttributeInt16", Group: GtechnicalAttributeInt16},
	"urn:smpte:ul:060e2b34.027f0101.0d02013a.04000000": {Name: "technicalAttributeInt32", Group: GtechnicalAttributeInt32},
	"urn:smpte:ul:060e2b34.027f0101.0d02013a.05000000": {Name: "technicalAttributeInt64", Group: GtechnicalAttributeInt64},
	"urn:smpte:ul:060e2b34.027f0101.0d02013a.06000000": {Name: "technicalAttributeUInt8", Group: GtechnicalAttributeUInt8},
	"urn:smpte:ul:060e2b34.027f0101.0d02013a.07000000": {Name: "technicalAttributeUInt16", Group: GtechnicalAttributeUInt16},
	"urn:smpte:ul:060e2b34.027f0101.0d02013a.08000000": {Name: "technicalAttributeUInt32", Group: GtechnicalAttributeUInt32},
	"urn:smpte:ul:060e2b34.027f0101.0d02013a.09000000": {Name: "technicalAttributeUInt64", Group: GtechnicalAttributeUInt64},
	"urn:smpte:ul:060e2b34.027f0101.0d02013a.0a000000": {Name: "technicalAttributeFloat", Group: GtechnicalAttributeFloat},
	"urn:smpte:ul:060e2b34.027f0101.0d02013a.0b000000": {Name: "technicalAttributeRational", Group: GtechnicalAttributeRational},
	"urn:smpte:ul:060e2b34.027f0101.0d02013a.0c000000": {Name: "technicalAttributeAnyURI", Group: GtechnicalAttributeAnyURI},
	"urn:smpte:ul:060e2b34.027f0101.0d02013a.0d000000": {Name: "technicalAttributeBoolean", Group: GtechnicalAttributeBoolean},
	"urn:smpte:ul:060e2b34.027f0101.0d02013b.00000000": {Name: "dimension", Group: Gdimension},
	"urn:smpte:ul:060e2b34.027f0101.0d02013c.00000000": {Name: "packageInfo", Group: GpackageInfo},
	"urn:smpte:ul:060e2b34.027f0101.0d02013d.00000000": {Name: "medium", Group: Gmedium},
	"urn:smpte:ul:060e2b34.027f0101.0d02013e.00000000": {Name: "codec", Group: Gcodec},
	"urn:smpte:ul:060e2b34.027f0101.0d02013f.00000000": {Name: "rational", Group: Grational},
	"urn:smpte:ul:060e2b34.027f0101.0d020140.00000000": {Name: "aspectRatio", Group: GaspectRatio},
	"urn:smpte:ul:060e2b34.027f0101.0d020141.00000000": {Name: "height", Group: Gheight},
	"urn:smpte:ul:060e2b34.027f0101.0d020142.00000000": {Name: "width", Group: Gwidth},
	"urn:smpte:ul:060e2b34.027f0101.0d020143.00000000": {Name: "part", Group: Gpart},
	"urn:smpte:ul:060e2b34.027f0101.0d020144.00000000": {Name: "partMetadata", Group: GpartMetadata},
	"urn:smpte:ul:060e2b34.027f0101.0d020146.00000000": {Name: "hash", Group: Ghash},
	"urn:smpte:ul:060e2b34.027f0101.0d020147.00000000": {Name: "locator", Group: Glocator},
	"urn:smpte:ul:060e2b34.027f0101.0d020148.00000000": {Name: "containerFormat", Group: GcontainerFormat},
	"urn:smpte:ul:060e2b34.027f0101.0d020149.00000000": {Name: "audioFormatExtended", Group: GaudioFormatExtended},
	"urn:smpte:ul:060e2b34.027f0101.0d02014a.00000000": {Name: "audioProgramme", Group: GaudioProgramme},
	"urn:smpte:ul:060e2b34.027f0101.0d02014b.00000000": {Name: "IDRef", Group: GIDRef},
	"urn:smpte:ul:060e2b34.027f0101.0d02014c.00000000": {Name: "loudnessMetadata", Group: GloudnessMetadata},
	"urn:smpte:ul:060e2b34.027f0101.0d02014d.00000000": {Name: "audioContent", Group: GaudioContent},
	"urn:smpte:ul:060e2b34.027f0101.0d02014e.00000000": {Name: "audioObject", Group: GaudioObject},
	"urn:smpte:ul:060e2b34.027f0101.0d02014f.00000000": {Name: "audioPackFormat", Group: GaudioPackFormat},
	"urn:smpte:ul:060e2b34.027f0101.0d020150.00000000": {Name: "audioChannelFormat", Group: GaudioChannelFormat},
	"urn:smpte:ul:060e2b34.027f0101.0d020151.00000000": {Name: "audioBlockFormat", Group: GaudioBlockFormat},
	"urn:smpte:ul:060e2b34.027f0101.0d020152.00000000": {Name: "audioBlockMatrixCoefficient", Group: GaudioBlockMatrixCoefficient},
	"urn:smpte:ul:060e2b34.027f0101.0d020153.00000000": {Name: "audioStreamFormat", Group: GaudioStreamFormat},
	"urn:smpte:ul:060e2b34.027f0101.0d020154.00000000": {Name: "audioTrackFormat", Group: GaudioTrackFormat},
	"urn:smpte:ul:060e2b34.027f0101.0d020155.00000000": {Name: "audioTrackUID", Group: GaudioTrackUID},
	"urn:smpte:ul:060e2b34.027f0101.0d020156.00000000": {Name: "audioMXFLookup", Group: GaudioMXFLookup},
	"urn:smpte:ul:060e2b34.027f0101.0d020157.00000000": {Name: "audioBlockMatrix", Group: GaudioBlockMatrix},
	"urn:smpte:ul:060e2b34.027f0101.0d020158.00000000": {Name: "time", Group: Gtime},
	"urn:smpte:ul:060e2b34.027f0101.0d020159.00000000": {Name: "metadataFormat", Group: GmetadataFormat},
	"urn:smpte:ul:060e2b34.027f0101.0d02015a.00000000": {Name: "timecodeFormat", Group: GtimecodeFormat},
	"urn:smpte:ul:060e2b34.027f0101.0d02015b.00000000": {Name: "videoNoiseFilter", Group: GvideoNoiseFilter},
	"urn:smpte:ul:060e2b34.027f0101.0d02015c.00000000": {Name: "EBUCoreObject", Group: GEBUCoreObject},
	"urn:smpte:ul:060e2b34.027f0101.0d02015d.00000000": {Name: "audience", Group: Gaudience},
	"urn:smpte:ul:060e2b34.027f0101.0d02015e.00000000": {Name: "filter", Group: Gfilter},
	"urn:smpte:ul:060e2b34.027f0101.0d02015f.00000000": {Name: "filterSetting", Group: GfilterSetting},
	"urn:smpte:ul:060e2b34.027f0101.0d020160.00000000": {Name: "referenceScreen", Group: GreferenceScreen},
	"urn:smpte:ul:060e2b34.027f0101.0d020161.00000000": {Name: "referenceScreenCentrePosition", Group: GreferenceScreenCentrePosition},
	"urn:smpte:ul:060e2b34.027f0101.0d020162.00000000": {Name: "referenceScreenWidth", Group: GreferenceScreenWidth},
	"urn:smpte:ul:060e2b34.027f0101.0d020163.00000000": {Name: "audioContentDialogue", Group: GaudioContentDialogue},
	"urn:smpte:ul:060e2b34.027f0101.0d020164.00000000": {Name: "audioObjectInteraction", Group: GaudioObjectInteraction},
	"urn:smpte:ul:060e2b34.027f0101.0d020165.00000000": {Name: "gainInteractionRange", Group: GgainInteractionRange},
	"urn:smpte:ul:060e2b34.027f0101.0d020166.00000000": {Name: "positionInteractionRange", Group: GpositionInteractionRange},
	"urn:smpte:ul:060e2b34.027f0101.0d020167.00000000": {Name: "audioBlockPosition", Group: GaudioBlockPosition},
	"urn:smpte:ul:060e2b34.027f0101.0d020168.00000000": {Name: "audioBlockDivergence", Group: GaudioBlockDivergence},
	"urn:smpte:ul:060e2b34.027f0101.0d020169.00000000": {Name: "audioBlockZoneExclusion", Group: GaudioBlockZoneExclusion},
	"urn:smpte:ul:060e2b34.027f0101.0d02016a.00000000": {Name: "audioBlockZone", Group: GaudioBlockZone},
	"urn:smpte:ul:060e2b34.027f0101.0d02016b.00000000": {Name: "audioBlockJumpPosition", Group: GaudioBlockJumpPosition},
	"urn:smpte:ul:060e2b34.027f0101.0d02016c.00000000": {Name: "event", Group: Gevent},
	"urn:smpte:ul:060e2b34.027f0101.0d02016d.00000000": {Name: "award", Group: Gaward},
	"urn:smpte:ul:060e2b34.027f0101.0d02016e.00000000": {Name: "affiliation", Group: Gaffiliation},
	"urn:smpte:ul:060e2b34.027f0101.0d040101.01010000": {Name: "APP_InfaxFramework", Group: GAPP_InfaxFramework},
	"urn:smpte:ul:060e2b34.027f0101.0d040101.01020000": {Name: "APP_PSEAnalysisFramework", Group: GAPP_PSEAnalysisFramework},
	"urn:smpte:ul:060e2b34.027f0101.0d040101.01030000": {Name: "APP_VTRReplayErrorFramework", Group: GAPP_VTRReplayErrorFramework},
	"urn:smpte:ul:060e2b34.027f0101.0d040101.01040000": {Name: "APP_DigiBetaDropoutFramework", Group: GAPP_DigiBetaDropoutFramework},
	"urn:smpte:ul:060e2b34.027f0101.0d040101.01050000": {Name: "APP_TimecodeBreakFramework", Group: GAPP_TimecodeBreakFramework},
	"urn:smpte:ul:060e2b34.027f0101.0d0c0101.01010000": {Name: "DM_AS_11_UKDPP_Framework", Group: GDM_AS_11_UKDPP_Framework},
	"urn:smpte:ul:060e2b34.027f010d.0d0d0100.00000000": {Name: "DMS_AS_12_AdID_Slate", Group: GDMS_AS_12_AdID_Slate},
	"urn:smpte:ul:060e2b34.027f0101.0d0e0101.07010100": {Name: "AS_07_Core_DMS_Framework", Group: GAS_07_Core_DMS_Framework},
	"urn:smpte:ul:060e2b34.027f0101.0d0e0101.07010200": {Name: "AS_07_DMS_Device", Group: GAS_07_DMS_Device},
	"urn:smpte:ul:060e2b34.027f0101.0d0e0101.07010300": {Name: "AS_07_DMS_Identifier", Group: GAS_07_DMS_Identifier},
	"urn:smpte:ul:060e2b34.027f0101.0d0e0101.07010400": {Name: "AS_07_GSP_DMS_Object", Group: GAS_07_GSP_DMS_Object},
	"urn:smpte:ul:060e2b34.027f0101.0d0e0101.07020100": {Name: "AS_07_GSP_DMS_Framework", Group: GAS_07_GSP_DMS_Framework},
	"urn:smpte:ul:060e2b34.027f0101.0d0e0101.07020200": {Name: "AS_07_GSP_BD_DMS_Framework", Group: GAS_07_GSP_BD_DMS_Framework},
	"urn:smpte:ul:060e2b34.027f0101.0d0e0101.07020300": {Name: "AS_07_GSP_TD_DMS_Framework", Group: GAS_07_GSP_TD_DMS_Framework},
	"urn:smpte:ul:060e2b34.027f0101.0d0e0101.07030100": {Name: "AS_07_Segmentation_DMS_Framework", Group: GAS_07_Segmentation_DMS_Framework},
	"urn:smpte:ul:060e2b34.027f0101.0d0e0101.07040100": {Name: "AS_07_TimecodeLabelSubdescriptor", Group: GAS_07_TimecodeLabelSubdescriptor},
	"urn:smpte:ul:060e2b34.027f0105.0e090603.00000000": {Name: "IADataEssenceDescriptor", Group: GIADataEssenceDescriptor},
	"urn:smpte:ul:060e2b34.027f0105.0e090606.00000000": {Name: "IADataEssenceSubDescriptor", Group: GIADataEssenceSubDescriptor},
	"urn:smpte:ul:060e2b34.027f0101.0f111111.00000000": {Name: "MRXessencedescriptor", Group: GMRXessencedescriptor},
	"urn:smpte:ul:060e2b34.02530105.0e090502.00000000": {Name: "ISXD", Group: GISXD},
}

// ShortHandLookUp contain a map of the short hand hex bytes as
// declared  in the register and their corresponding UL.
var ShortHandLookUp = map[string]string{
	"3601": "urn:smpte:ul:060e2b34.0101010e.05310101.00000000",
	"3602": "urn:smpte:ul:060e2b34.0101010e.05310102.00000000",
	"3603": "urn:smpte:ul:060e2b34.0101010e.05310103.00000000",
	"3604": "urn:smpte:ul:060e2b34.0101010e.05310104.00000000",
	"3605": "urn:smpte:ul:060e2b34.0101010e.05310105.00000000",
	"3606": "urn:smpte:ul:060e2b34.0101010e.05310106.00000000",
	"3607": "urn:smpte:ul:060e2b34.0101010e.05310107.00000000",
	"3608": "urn:smpte:ul:060e2b34.0101010e.05310108.00000000",
	"3609": "urn:smpte:ul:060e2b34.0101010e.05310109.00000000",
	"360a": "urn:smpte:ul:060e2b34.0101010e.0531010a.00000000",
	"360b": "urn:smpte:ul:060e2b34.0101010e.0531010b.00000000",
	"360c": "urn:smpte:ul:060e2b34.0101010e.0531010c.00000000",
	"360d": "urn:smpte:ul:060e2b34.0101010e.0531010d.00000000",
	"360e": "urn:smpte:ul:060e2b34.0101010e.0531010e.00000000",
	"360f": "urn:smpte:ul:060e2b34.0101010e.0531010f.00000000",
	"3610": "urn:smpte:ul:060e2b34.0101010e.05310110.00000000",
	"3611": "urn:smpte:ul:060e2b34.0101010e.05310111.00000000",
	"3612": "urn:smpte:ul:060e2b34.0101010e.05310112.00000000",
	"3613": "urn:smpte:ul:060e2b34.0101010e.05310113.00000000",
	"3614": "urn:smpte:ul:060e2b34.0101010e.05310114.00000000",
	"3615": "urn:smpte:ul:060e2b34.0101010e.05310115.00000000",
	"3616": "urn:smpte:ul:060e2b34.0101010e.05310116.00000000",
	"3617": "urn:smpte:ul:060e2b34.0101010e.05310117.00000000",
	"3618": "urn:smpte:ul:060e2b34.0101010e.05310118.00000000",
	"3619": "urn:smpte:ul:060e2b34.0101010e.05310119.00000000",
	"361a": "urn:smpte:ul:060e2b34.0101010e.0531011a.00000000",
	"361b": "urn:smpte:ul:060e2b34.0101010e.0531011b.00000000",
	"361c": "urn:smpte:ul:060e2b34.0101010e.0531011c.00000000",
	"361d": "urn:smpte:ul:060e2b34.0101010e.0531011d.00000000",
	"361e": "urn:smpte:ul:060e2b34.0101010e.0531011e.00000000",
	"361f": "urn:smpte:ul:060e2b34.0101010e.0531011f.00000000",
	"3620": "urn:smpte:ul:060e2b34.0101010e.05310120.00000000",
	"3621": "urn:smpte:ul:060e2b34.0101010e.05310121.00000000",
	"3622": "urn:smpte:ul:060e2b34.0101010e.05310122.00000000",
	"3623": "urn:smpte:ul:060e2b34.0101010e.05310123.00000000",
	"3624": "urn:smpte:ul:060e2b34.0101010e.05310124.00000000",
	"3625": "urn:smpte:ul:060e2b34.0101010e.05310125.00000000",
	"3626": "urn:smpte:ul:060e2b34.0101010e.05310126.00000000",
	"3627": "urn:smpte:ul:060e2b34.0101010e.05310127.00000000",
	"3628": "urn:smpte:ul:060e2b34.0101010e.05310128.00000000",
	"3629": "urn:smpte:ul:060e2b34.0101010e.05310129.00000000",
	"362a": "urn:smpte:ul:060e2b34.0101010e.0531012a.00000000",
	"362b": "urn:smpte:ul:060e2b34.0101010e.0531012b.00000000",
	"362c": "urn:smpte:ul:060e2b34.0101010e.0531012c.00000000",
	"362d": "urn:smpte:ul:060e2b34.0101010e.0531012d.00000000",
	"362e": "urn:smpte:ul:060e2b34.0101010e.0531012e.00000000",
	"362f": "urn:smpte:ul:060e2b34.0101010e.0531012f.00000000",
	"3630": "urn:smpte:ul:060e2b34.0101010e.05310130.00000000",
	"3631": "urn:smpte:ul:060e2b34.0101010e.05310131.00000000",
	"3632": "urn:smpte:ul:060e2b34.0101010e.05310132.00000000",
	"3633": "urn:smpte:ul:060e2b34.0101010e.05310133.00000000",
	"3634": "urn:smpte:ul:060e2b34.0101010e.05310134.00000000",
	"3635": "urn:smpte:ul:060e2b34.0101010e.05310135.00000000",
	"3636": "urn:smpte:ul:060e2b34.0101010e.05310136.00000000",
	"3637": "urn:smpte:ul:060e2b34.0101010e.05310137.00000000",
	"3638": "urn:smpte:ul:060e2b34.0101010e.05310138.00000000",
	"3639": "urn:smpte:ul:060e2b34.0101010e.05310139.00000000",
	"363a": "urn:smpte:ul:060e2b34.0101010e.0531013a.00000000",
	"363b": "urn:smpte:ul:060e2b34.0101010e.0531013b.00000000",
	"363c": "urn:smpte:ul:060e2b34.0101010e.0531013c.00000000",
	"363d": "urn:smpte:ul:060e2b34.0101010e.0531013d.00000000",
	"363e": "urn:smpte:ul:060e2b34.0101010e.0531013e.00000000",
	"363f": "urn:smpte:ul:060e2b34.0101010e.0531013f.00000000",
	"3640": "urn:smpte:ul:060e2b34.0101010e.05310140.00000000",
	"3641": "urn:smpte:ul:060e2b34.0101010e.05310141.00000000",
	"3c0a": "urn:smpte:ul:060e2b34.01010101.01011502.00000000",
	"8000": "urn:smpte:ul:060e2b34.0101010d.04200202.01000000",
	"8008": "urn:smpte:ul:060e2b34.0101010e.04200202.08000000",
	"8009": "urn:smpte:ul:060e2b34.0101010e.04200202.09000000",
	"8001": "urn:smpte:ul:060e2b34.0101010d.04200202.02000000",
	"8002": "urn:smpte:ul:060e2b34.0101010d.04200202.03000000",
	"800a": "urn:smpte:ul:060e2b34.0101010e.04200202.0a000000",
	"8003": "urn:smpte:ul:060e2b34.0101010d.04200202.04000000",
	"8004": "urn:smpte:ul:060e2b34.0101010d.04200202.05000000",
	"8005": "urn:smpte:ul:060e2b34.0101010d.04200202.06000000",
	"800b": "urn:smpte:ul:060e2b34.0101010e.04200202.0b000000",
	"8006": "urn:smpte:ul:060e2b34.0101010d.04200202.07000000",
	"8007": "urn:smpte:ul:060e2b34.0101010d.03020302.02100100",
	"8100": "urn:smpte:ul:060e2b34.0101010d.04200103.01010000",
	"8115": "urn:smpte:ul:060e2b34.0101010e.04200103.010c0000",
	"8101": "urn:smpte:ul:060e2b34.0101010d.04200103.01020000",
	"8102": "urn:smpte:ul:060e2b34.0101010d.04200103.01030000",
	"8103": "urn:smpte:ul:060e2b34.0101010d.04200103.01040000",
	"8104": "urn:smpte:ul:060e2b34.0101010d.04200103.01050000",
	"8105": "urn:smpte:ul:060e2b34.0101010d.04200103.01060000",
	"8106": "urn:smpte:ul:060e2b34.0101010d.04010301.03010000",
	"8107": "urn:smpte:ul:060e2b34.0101010d.04200103.01070000",
	"8108": "urn:smpte:ul:060e2b34.0101010d.04200103.01080000",
	"8109": "urn:smpte:ul:060e2b34.0101010d.04200103.01080100",
	"810a": "urn:smpte:ul:060e2b34.0101010d.04200103.01090000",
	"810b": "urn:smpte:ul:060e2b34.0101010d.04200103.010a0000",
	"8118": "urn:smpte:ul:060e2b34.0101010e.04200103.010d0000",
	"810c": "urn:smpte:ul:060e2b34.0101010d.04200103.010b0000",
	"810d": "urn:smpte:ul:060e2b34.0101010d.04200103.02010000",
	"810e": "urn:smpte:ul:060e2b34.0101010d.04200103.02020000",
	"810f": "urn:smpte:ul:060e2b34.0101010d.04200103.02030000",
	"8110": "urn:smpte:ul:060e2b34.0101010d.04200103.02040000",
	"8111": "urn:smpte:ul:060e2b34.0101010d.04200103.02050000",
	"8112": "urn:smpte:ul:060e2b34.0101010d.04200103.02060000",
	"3210": "urn:smpte:ul:060e2b34.01010102.04010201.01010200",
	"8116": "urn:smpte:ul:060e2b34.0101010e.04200103.02070000",
	"8117": "urn:smpte:ul:060e2b34.0101010e.04200103.02080000",
	"8113": "urn:smpte:ul:060e2b34.0101010d.01020108.02000000",
	"8114": "urn:smpte:ul:060e2b34.0101010d.03020302.02100200",
	"e000": "urn:smpte:ul:060e2b34.0101010d.04060805.00000000",
	"0101": "urn:smpte:ul:060e2b34.01010102.06010104.01010000",
	"0102": "urn:smpte:ul:060e2b34.01010102.05200701.08000000",
	"0201": "urn:smpte:ul:060e2b34.01010102.04070100.00000000",
	"0202": "urn:smpte:ul:060e2b34.01010102.07020201.01030000",
	"0203": "urn:smpte:ul:060e2b34.01010102.03010210.04000000",
	"0204": "urn:smpte:ul:060e2b34.01010107.03020102.16000000",
	"0205": "urn:smpte:ul:060e2b34.01010107.03010210.08000000",
	"0401": "urn:smpte:ul:060e2b34.01010102.01040901.00000000",
	"0402": "urn:smpte:ul:060e2b34.01010102.04100103.01090000",
	"0403": "urn:smpte:ul:060e2b34.01010101.04100103.01020000",
	"0404": "urn:smpte:ul:060e2b34.01010102.01030201.02000000",
	"0501": "urn:smpte:ul:060e2b34.01010102.06010104.06010000",
	"0502": "urn:smpte:ul:060e2b34.01010102.06010104.02080000",
	"0601": "urn:smpte:ul:060e2b34.01010102.07020103.03030000",
	"0602": "urn:smpte:ul:060e2b34.01010102.05300404.01000000",
	"0801": "urn:smpte:ul:060e2b34.01010101.05300401.00000000",
	"0901": "urn:smpte:ul:060e2b34.01010102.06010104.020a0000",
	"0b01": "urn:smpte:ul:060e2b34.01010102.05300506.00000000",
	"0b02": "urn:smpte:ul:060e2b34.01010102.06010104.06020000",
	"0b03": "urn:smpte:ul:060e2b34.01010102.06010104.060a0000",
	"0b04": "urn:smpte:ul:060e2b34.01010102.0530050c.00000000",
	"0b05": "urn:smpte:ul:060e2b34.01010102.06010104.02060000",
	"0c01": "urn:smpte:ul:060e2b34.01010102.06010104.06070000",
	"0d01": "urn:smpte:ul:060e2b34.01010102.06010104.02070000",
	"0d02": "urn:smpte:ul:060e2b34.01010102.05401001.02000000",
	"0d03": "urn:smpte:ul:060e2b34.01010102.05401001.01000000",
	"0d04": "urn:smpte:ul:060e2b34.01010102.05401001.03000000",
	"0e01": "urn:smpte:ul:060e2b34.01010102.06010103.03000000",
	"0e02": "urn:smpte:ul:060e2b34.01010102.06010103.04000000",
	"0f01": "urn:smpte:ul:060e2b34.01010102.06010104.02090000",
	"0f02": "urn:smpte:ul:060e2b34.01010102.06010104.06080000",
	"1001": "urn:smpte:ul:060e2b34.01010102.06010104.06090000",
	"1101": "urn:smpte:ul:060e2b34.01010102.06010103.01000000",
	"1102": "urn:smpte:ul:060e2b34.01010102.06010103.02000000",
	"1103": "urn:smpte:ul:060e2b34.01010107.06010103.07000000",
	"1104": "urn:smpte:ul:060e2b34.01010108.06010103.08000000",
	"1201": "urn:smpte:ul:060e2b34.01010102.07020103.01040000",
	"1202": "urn:smpte:ul:060e2b34.01010102.07020201.01050200",
	"1203": "urn:smpte:ul:060e2b34.01010101.05300501.00000000",
	"1204": "urn:smpte:ul:060e2b34.01010102.07020201.01050300",
	"1205": "urn:smpte:ul:060e2b34.01010101.05300502.00000000",
	"1401": "urn:smpte:ul:060e2b34.01010102.05300601.01000000",
	"1402": "urn:smpte:ul:060e2b34.01010102.05300602.01000000",
	"1501": "urn:smpte:ul:060e2b34.01010102.07020103.01050000",
	"1502": "urn:smpte:ul:060e2b34.01010102.04040101.02060000",
	"1503": "urn:smpte:ul:060e2b34.01010101.04040101.05000000",
	"1601": "urn:smpte:ul:060e2b34.01010102.04040101.02010000",
	"1602": "urn:smpte:ul:060e2b34.01010102.04070300.00000000",
	"1603": "urn:smpte:ul:060e2b34.01010101.04040201.00000000",
	"1701": "urn:smpte:ul:060e2b34.01010101.04040101.04000000",
	"1801": "urn:smpte:ul:060e2b34.01010102.06010104.02050000",
	"1802": "urn:smpte:ul:060e2b34.01010102.07020103.01060000",
	"1901": "urn:smpte:ul:060e2b34.01010102.06010104.05010000",
	"1902": "urn:smpte:ul:060e2b34.01010102.06010104.05020000",
	"1a02": "urn:smpte:ul:060e2b34.01010102.0530050d.00000000",
	"1a03": "urn:smpte:ul:060e2b34.01010102.07020103.10020100",
	"1a04": "urn:smpte:ul:060e2b34.01010102.05300508.00000000",
	"1b01": "urn:smpte:ul:060e2b34.01010102.01011503.00000000",
	"1b02": "urn:smpte:ul:060e2b34.01010102.01070102.03010000",
	"1b03": "urn:smpte:ul:060e2b34.01010102.03020301.02010000",
	"1e01": "urn:smpte:ul:060e2b34.01010102.05300509.00000000",
	"1e02": "urn:smpte:ul:060e2b34.01010101.05300503.00000000",
	"1e03": "urn:smpte:ul:060e2b34.01010102.06010104.04010000",
	"1e06": "urn:smpte:ul:060e2b34.01010102.0530050a.00000000",
	"1e07": "urn:smpte:ul:060e2b34.01010101.05300504.00000000",
	"1e08": "urn:smpte:ul:060e2b34.01010101.05300505.00000000",
	"1e09": "urn:smpte:ul:060e2b34.01010102.06010104.03020000",
	"1f01": "urn:smpte:ul:060e2b34.01010102.06010104.01060000",
	"1f03": "urn:smpte:ul:060e2b34.01010102.0530050b.01000000",
	"2203": "urn:smpte:ul:060e2b34.01010102.05200901.00000000",
	"2204": "urn:smpte:ul:060e2b34.01010102.03030301.03000000",
	"2205": "urn:smpte:ul:060e2b34.01010102.03030301.02010000",
	"2206": "urn:smpte:ul:060e2b34.01010102.010a0101.01010000",
	"2207": "urn:smpte:ul:060e2b34.01010102.06010104.020b0000",
	"2208": "urn:smpte:ul:060e2b34.01010102.010a0101.03000000",
	"2209": "urn:smpte:ul:060e2b34.01010102.05200902.00000000",
	"220a": "urn:smpte:ul:060e2b34.01010102.05200903.00000000",
	"220b": "urn:smpte:ul:060e2b34.01010102.05200904.00000000",
	"220c": "urn:smpte:ul:060e2b34.01010102.05200905.00000000",
	"220d": "urn:smpte:ul:060e2b34.01010102.05200906.00000000",
	"220e": "urn:smpte:ul:060e2b34.01010102.05200907.00000000",
	"220f": "urn:smpte:ul:060e2b34.01010102.05200908.00000000",
	"2210": "urn:smpte:ul:060e2b34.01010102.05200909.00000000",
	"2211": "urn:smpte:ul:060e2b34.01010102.0520090a.00000000",
	"2212": "urn:smpte:ul:060e2b34.01010102.0520090b.00000000",
	"2213": "urn:smpte:ul:060e2b34.01010102.0520090c.00000000",
	"2214": "urn:smpte:ul:060e2b34.01010102.0520090d.00000000",
	"2215": "urn:smpte:ul:060e2b34.01010102.0520090e.00000000",
	"2216": "urn:smpte:ul:060e2b34.01010102.0520090f.00000000",
	"2301": "urn:smpte:ul:060e2b34.01010102.06010104.01070000",
	"2302": "urn:smpte:ul:060e2b34.01010102.06010104.03010000",
	"2401": "urn:smpte:ul:060e2b34.01010101.03010201.03000000",
	"2603": "urn:smpte:ul:060e2b34.01010102.06010104.05030000",
	"2604": "urn:smpte:ul:060e2b34.01010102.06010104.05040000",
	"2605": "urn:smpte:ul:060e2b34.01010102.06010104.05050000",
	"2606": "urn:smpte:ul:060e2b34.01010102.06010104.05060000",
	"2607": "urn:smpte:ul:060e2b34.01010102.06010104.05070000",
	"2608": "urn:smpte:ul:060e2b34.01010102.06010104.05080000",
	"2609": "urn:smpte:ul:060e2b34.01010102.06010104.05090000",
	"260a": "urn:smpte:ul:060e2b34.01010107.06010104.050a0000",
	"260b": "urn:smpte:ul:060e2b34.01010107.06010104.050b0000",
	"2701": "urn:smpte:ul:060e2b34.01010102.06010106.01000000",
	"2702": "urn:smpte:ul:060e2b34.01010102.04070200.00000000",
	"2b01": "urn:smpte:ul:060e2b34.01010102.06010102.01000000",
	"3f07": "urn:smpte:ul:060e2b34.01010104.01030404.00000000",
	"3f06": "urn:smpte:ul:060e2b34.01010104.01030405.00000000",
	"2f01": "urn:smpte:ul:060e2b34.01010102.06010104.06030000",
	"3001": "urn:smpte:ul:060e2b34.01010101.04060101.00000000",
	"3002": "urn:smpte:ul:060e2b34.01010101.04060102.00000000",
	"3004": "urn:smpte:ul:060e2b34.01010102.06010104.01020000",
	"3005": "urn:smpte:ul:060e2b34.01010102.06010104.01030000",
	"3006": "urn:smpte:ul:060e2b34.01010105.06010103.05000000",
	"3101": "urn:smpte:ul:060e2b34.01010102.03030302.02000000",
	"3201": "urn:smpte:ul:060e2b34.01010102.04010601.00000000",
	"3202": "urn:smpte:ul:060e2b34.01010101.04010502.01000000",
	"3203": "urn:smpte:ul:060e2b34.01010101.04010502.02000000",
	"3204": "urn:smpte:ul:060e2b34.01010101.04010501.07000000",
	"3205": "urn:smpte:ul:060e2b34.01010101.04010501.08000000",
	"3206": "urn:smpte:ul:060e2b34.01010101.04010501.09000000",
	"3207": "urn:smpte:ul:060e2b34.01010101.04010501.0a000000",
	"3208": "urn:smpte:ul:060e2b34.01010101.04010501.0b000000",
	"3209": "urn:smpte:ul:060e2b34.01010101.04010501.0c000000",
	"320a": "urn:smpte:ul:060e2b34.01010101.04010501.0d000000",
	"320b": "urn:smpte:ul:060e2b34.01010101.04010501.0e000000",
	"320c": "urn:smpte:ul:060e2b34.01010101.04010301.04000000",
	"320d": "urn:smpte:ul:060e2b34.01010102.04010302.05000000",
	"320e": "urn:smpte:ul:060e2b34.01010101.04010101.01000000",
	"320f": "urn:smpte:ul:060e2b34.01010102.05200102.00000000",
	"3219": "urn:smpte:ul:060e2b34.01010109.04010201.01060100",
	"321a": "urn:smpte:ul:060e2b34.01010102.04010201.01030100",
	"3211": "urn:smpte:ul:060e2b34.01010102.04180101.00000000",
	"3212": "urn:smpte:ul:060e2b34.01010102.04010301.06000000",
	"3213": "urn:smpte:ul:060e2b34.01010102.04180102.00000000",
	"3214": "urn:smpte:ul:060e2b34.01010102.04180103.00000000",
	"3215": "urn:smpte:ul:060e2b34.01010105.04050113.00000000",
	"3216": "urn:smpte:ul:060e2b34.01010105.04010302.08000000",
	"3217": "urn:smpte:ul:060e2b34.01010105.04010302.07000000",
	"3218": "urn:smpte:ul:060e2b34.01010105.04010302.09000000",
	"3301": "urn:smpte:ul:060e2b34.01010102.04010503.0a000000",
	"3302": "urn:smpte:ul:060e2b34.01010101.04010501.05000000",
	"3303": "urn:smpte:ul:060e2b34.01010101.04010501.06000000",
	"3304": "urn:smpte:ul:060e2b34.01010101.04010503.03000000",
	"3305": "urn:smpte:ul:060e2b34.01010101.04010503.04000000",
	"3306": "urn:smpte:ul:060e2b34.01010102.04010503.05000000",
	"3307": "urn:smpte:ul:060e2b34.01010102.04180104.00000000",
	"3308": "urn:smpte:ul:060e2b34.01010102.04010501.10000000",
	"3309": "urn:smpte:ul:060e2b34.01010102.04010503.07000000",
	"330b": "urn:smpte:ul:060e2b34.01010105.03010201.0a000000",
	"3401": "urn:smpte:ul:060e2b34.01010102.04010503.06000000",
	"3403": "urn:smpte:ul:060e2b34.01010102.04010503.08000000",
	"3404": "urn:smpte:ul:060e2b34.01010102.04010503.09000000",
	"3405": "urn:smpte:ul:060e2b34.01010105.04010404.01000000",
	"3406": "urn:smpte:ul:060e2b34.01010105.04010503.0b000000",
	"3407": "urn:smpte:ul:060e2b34.01010105.04010503.0c000000",
	"3408": "urn:smpte:ul:060e2b34.01010105.04010503.0d000000",
	"3409": "urn:smpte:ul:060e2b34.01010105.04010503.0e000000",
	"3701": "urn:smpte:ul:060e2b34.01010102.05020103.01010000",
	"3702": "urn:smpte:ul:060e2b34.01010101.06080201.00000000",
	"3703": "urn:smpte:ul:060e2b34.01010101.04010302.03000000",
	"3704": "urn:smpte:ul:060e2b34.01010101.04010302.04000000",
	"3705": "urn:smpte:ul:060e2b34.01010102.05020103.01020000",
	"3706": "urn:smpte:ul:060e2b34.01010102.03030302.03000000",
	"3801": "urn:smpte:ul:060e2b34.01010102.03030302.01000000",
	"3901": "urn:smpte:ul:060e2b34.01010102.04100103.01080000",
	"3902": "urn:smpte:ul:060e2b34.01010102.04010802.03000000",
	"3903": "urn:smpte:ul:060e2b34.01010102.04100103.01030000",
	"3904": "urn:smpte:ul:060e2b34.01010102.04100103.02030000",
	"3905": "urn:smpte:ul:060e2b34.01010102.04100103.01060100",
	"3906": "urn:smpte:ul:060e2b34.01010102.04100103.01050100",
	"3907": "urn:smpte:ul:060e2b34.01010102.04100103.01040100",
	"3908": "urn:smpte:ul:060e2b34.01010102.04100103.01070100",
	"3a01": "urn:smpte:ul:060e2b34.01010102.04100101.01010000",
	"3a02": "urn:smpte:ul:060e2b34.01010102.04010401.01000000",
	"3a03": "urn:smpte:ul:060e2b34.01010102.0d010101.01010100",
	"3a04": "urn:smpte:ul:060e2b34.01010102.04100101.03000000",
	"3a05": "urn:smpte:ul:060e2b34.01010102.04100101.04010000",
	"3a06": "urn:smpte:ul:060e2b34.01010102.04100101.02010000",
	"3a07": "urn:smpte:ul:060e2b34.01010102.04100101.06010000",
	"3a08": "urn:smpte:ul:060e2b34.01010102.04100101.05010000",
	"3b01": "urn:smpte:ul:060e2b34.01010101.03010201.02000000",
	"3b02": "urn:smpte:ul:060e2b34.01010102.07020110.02040000",
	"3b03": "urn:smpte:ul:060e2b34.01010102.06010104.02010000",
	"3b04": "urn:smpte:ul:060e2b34.01010102.06010104.02020000",
	"3b05": "urn:smpte:ul:060e2b34.01010102.03010201.05000000",
	"3b06": "urn:smpte:ul:060e2b34.01010102.06010104.06040000",
	"3b07": "urn:smpte:ul:060e2b34.01010102.03010201.04000000",
	"3b08": "urn:smpte:ul:060e2b34.01010104.06010104.01080000",
	"3b09": "urn:smpte:ul:060e2b34.01010105.01020203.00000000",
	"3b0a": "urn:smpte:ul:060e2b34.01010105.01020210.02010000",
	"3b0b": "urn:smpte:ul:060e2b34.01010105.01020210.02020000",
	"3c01": "urn:smpte:ul:060e2b34.01010102.05200701.02010000",
	"3c02": "urn:smpte:ul:060e2b34.01010102.05200701.03010000",
	"3c03": "urn:smpte:ul:060e2b34.01010102.05200701.04000000",
	"3c04": "urn:smpte:ul:060e2b34.01010102.05200701.05010000",
	"3c05": "urn:smpte:ul:060e2b34.01010102.05200701.07000000",
	"3c06": "urn:smpte:ul:060e2b34.01010102.07020110.02030000",
	"3c07": "urn:smpte:ul:060e2b34.01010102.05200701.0a000000",
	"3c08": "urn:smpte:ul:060e2b34.01010102.05200701.06010000",
	"3c09": "urn:smpte:ul:060e2b34.01010102.05200701.01000000",
	"4001": "urn:smpte:ul:060e2b34.01010101.01020101.01000000",
	"4101": "urn:smpte:ul:060e2b34.01010102.01040102.01000000",
	"4401": "urn:smpte:ul:060e2b34.01010101.01011510.00000000",
	"4402": "urn:smpte:ul:060e2b34.01010101.01030302.01000000",
	"4403": "urn:smpte:ul:060e2b34.01010102.06010104.06050000",
	"4404": "urn:smpte:ul:060e2b34.01010102.07020110.02050000",
	"4405": "urn:smpte:ul:060e2b34.01010102.07020110.01030000",
	"4406": "urn:smpte:ul:060e2b34.01010102.03020102.0c000000",
	"4407": "urn:smpte:ul:060e2b34.01010102.03010210.03000000",
	"4409": "urn:smpte:ul:060e2b34.01010107.03010210.07000000",
	"4408": "urn:smpte:ul:060e2b34.01010107.05010108.00000000",
	"4501": "urn:smpte:ul:060e2b34.01010102.07020201.01050100",
	"4502": "urn:smpte:ul:060e2b34.01010101.05300201.00000000",
	"4503": "urn:smpte:ul:060e2b34.01010102.05300403.00000000",
	"4504": "urn:smpte:ul:060e2b34.01010108.06010104.010a0000",
	"4701": "urn:smpte:ul:060e2b34.01010102.06010104.02030000",
	"4801": "urn:smpte:ul:060e2b34.01010102.01070101.00000000",
	"4802": "urn:smpte:ul:060e2b34.01010102.01070102.01000000",
	"4803": "urn:smpte:ul:060e2b34.01010102.06010104.02040000",
	"4804": "urn:smpte:ul:060e2b34.01010102.01040103.00000000",
	"4901": "urn:smpte:ul:060e2b34.01010102.05300402.00000000",
	"4902": "urn:smpte:ul:060e2b34.01010105.07020103.010b0000",
	"4b01": "urn:smpte:ul:060e2b34.01010102.05300405.00000000",
	"4b02": "urn:smpte:ul:060e2b34.01010102.07020103.01030000",
	"4b03": "urn:smpte:ul:060e2b34.01010107.07020103.010c0000",
	"4b04": "urn:smpte:ul:060e2b34.01010107.07020103.02030000",
	"4b05": "urn:smpte:ul:060e2b34.01010107.07020103.010d0000",
	"4b06": "urn:smpte:ul:060e2b34.0101010a.07020103.010e0000",
	"4b07": "urn:smpte:ul:060e2b34.0101010a.07020103.02040000",
	"4c01": "urn:smpte:ul:060e2b34.01010102.06010104.01040000",
	"4d01": "urn:smpte:ul:060e2b34.01010102.05300507.00000000",
	"4e01": "urn:smpte:ul:060e2b34.01010102.06010104.01050000",
	"4e02": "urn:smpte:ul:060e2b34.01010102.06010104.06060000",
	"5001": "urn:smpte:ul:060e2b34.01010102.03020102.09010000",
	"5003": "urn:smpte:ul:060e2b34.01010102.03020102.0a010000",
	"5101": "urn:smpte:ul:060e2b34.01010102.03010210.02000000",
	"6102": "urn:smpte:ul:060e2b34.01010104.01070105.00000000",
	"6101": "urn:smpte:ul:060e2b34.01010105.06010104.020c0000",
	"3d03": "urn:smpte:ul:060e2b34.01010105.04020301.01010000",
	"3d02": "urn:smpte:ul:060e2b34.01010104.04020301.04000000",
	"3d04": "urn:smpte:ul:060e2b34.01010101.04020101.03000000",
	"3d05": "urn:smpte:ul:060e2b34.01010101.04020101.01000000",
	"3d07": "urn:smpte:ul:060e2b34.01010105.04020101.04000000",
	"3d01": "urn:smpte:ul:060e2b34.01010104.04020303.04000000",
	"3d0c": "urn:smpte:ul:060e2b34.01010105.04020701.00000000",
	"3d06": "urn:smpte:ul:060e2b34.01010102.04020402.00000000",
	"3e01": "urn:smpte:ul:060e2b34.01010103.04030302.00000000",
	"3f01": "urn:smpte:ul:060e2b34.01010104.06010104.060b0000",
	"6103": "urn:smpte:ul:060e2b34.01010105.01070106.00000000",
	"3501": "urn:smpte:ul:060e2b34.01010105.04040102.01000000",
	"3502": "urn:smpte:ul:060e2b34.01010105.04040102.02000000",
	"3503": "urn:smpte:ul:060e2b34.01010105.04040102.03000000",
	"3504": "urn:smpte:ul:060e2b34.01010105.04040102.04000000",
	"3d0d": "urn:smpte:ul:060e2b34.01010105.04020501.06000000",
	"3d0f": "urn:smpte:ul:060e2b34.01010105.04020302.03000000",
	"3d08": "urn:smpte:ul:060e2b34.01010105.04020501.01000000",
	"3d10": "urn:smpte:ul:060e2b34.01010105.04020501.02000000",
	"3d11": "urn:smpte:ul:060e2b34.01010105.04020501.03000000",
	"3d12": "urn:smpte:ul:060e2b34.01010105.04020501.04000000",
	"3d13": "urn:smpte:ul:060e2b34.01010105.04020501.05000000",
	"3d0a": "urn:smpte:ul:060e2b34.01010105.04020302.01000000",
	"3d0b": "urn:smpte:ul:060e2b34.01010105.04020302.02000000",
	"3d09": "urn:smpte:ul:060e2b34.01010105.04020303.05000000",
	"3d32": "urn:smpte:ul:060e2b34.01010107.04020101.05000000",
	"3d29": "urn:smpte:ul:060e2b34.01010108.04020301.06000000",
	"3d2a": "urn:smpte:ul:060e2b34.01010108.04020301.07000000",
	"3d2b": "urn:smpte:ul:060e2b34.01010108.04020301.08000000",
	"3d2c": "urn:smpte:ul:060e2b34.01010108.04020301.09000000",
	"3d2d": "urn:smpte:ul:060e2b34.01010108.04020301.0a000000",
	"3d2e": "urn:smpte:ul:060e2b34.01010108.04020301.0b000000",
	"3d2f": "urn:smpte:ul:060e2b34.01010108.04020301.0c000000",
	"3d30": "urn:smpte:ul:060e2b34.01010108.04020301.0d000000",
	"3d31": "urn:smpte:ul:060e2b34.01010108.04020301.0e000000",
	"4c11": "urn:smpte:ul:060e2b34.01010107.06010104.03050000",
	"4d11": "urn:smpte:ul:060e2b34.01010107.06010104.03040000",
	"4d12": "urn:smpte:ul:060e2b34.01010107.06010104.01090000",
	"4e11": "urn:smpte:ul:060e2b34.01010107.04090201.00000000",
	"4e12": "urn:smpte:ul:060e2b34.01010108.04090300.00000000",
	"4f01": "urn:smpte:ul:060e2b34.01010108.04060802.00000000",
	"4f02": "urn:smpte:ul:060e2b34.01010108.04060903.00000000",
	"4f03": "urn:smpte:ul:060e2b34.01010108.04070400.00000000",
	"3d15": "urn:smpte:ul:060e2b34.01010105.04020302.05000000",
	"3d16": "urn:smpte:ul:060e2b34.01010105.04020302.06000000",
	"3d21": "urn:smpte:ul:060e2b34.01010105.04020502.01010000",
	"3d22": "urn:smpte:ul:060e2b34.01010105.04020502.02010000",
	"3d23": "urn:smpte:ul:060e2b34.01010105.04020502.03010000",
	"3d24": "urn:smpte:ul:060e2b34.01010105.04020502.04010000",
	"3d25": "urn:smpte:ul:060e2b34.01010105.04020502.05010000",
	"3d26": "urn:smpte:ul:060e2b34.01010105.04020502.06010000",
	"3d27": "urn:smpte:ul:060e2b34.01010105.04020502.07010000",
	"3d28": "urn:smpte:ul:060e2b34.01010105.04020502.08010000",
	"3d33": "urn:smpte:ul:060e2b34.01010108.06010104.060f0000",
	"5212": "urn:smpte:ul:060e2b34.01010108.04090401.00000000",
	"5401": "urn:smpte:ul:060e2b34.01010108.01020104.01000000",
	"5402": "urn:smpte:ul:060e2b34.01010108.01020106.01000000",
	"5403": "urn:smpte:ul:060e2b34.01010108.01030606.01000000",
	"5501": "urn:smpte:ul:060e2b34.01010108.01030604.01000000",
	"5601": "urn:smpte:ul:060e2b34.01010109.01030406.00000000",
	"5602": "urn:smpte:ul:060e2b34.01010109.01030407.00000000",
	"5701": "urn:smpte:ul:060e2b34.01010109.07020501.00000000",
	"5702": "urn:smpte:ul:060e2b34.01010109.07020503.00000000",
	"5703": "urn:smpte:ul:060e2b34.01010109.07020502.00000000",
	"5801": "urn:smpte:ul:060e2b34.01010109.06010103.09000000",
	"5802": "urn:smpte:ul:060e2b34.01010109.06010103.0a000000",
	"5803": "urn:smpte:ul:060e2b34.01010109.06010103.0b000000",
	"5804": "urn:smpte:ul:060e2b34.01010109.06010103.0c000000",
	"08":   "urn:smpte:ul:060e2b34.01010102.06010107.01000000",
	"09":   "urn:smpte:ul:060e2b34.01010102.06010107.02000000",
	"0a":   "urn:smpte:ul:060e2b34.01010102.06010107.03000000",
	"0b":   "urn:smpte:ul:060e2b34.01010102.06010107.04000000",
	"0c":   "urn:smpte:ul:060e2b34.01010102.03010202.01000000",
	"0d":   "urn:smpte:ul:060e2b34.01010102.06010107.05000000",
	"0e":   "urn:smpte:ul:060e2b34.01010102.06010107.06000000",
	"2b":   "urn:smpte:ul:060e2b34.0101010d.06010107.22000000",
	"0f":   "urn:smpte:ul:060e2b34.01010102.03010203.01000000",
	"10":   "urn:smpte:ul:060e2b34.01010102.03010203.02000000",
	"11":   "urn:smpte:ul:060e2b34.01010102.06010107.09000000",
	"12":   "urn:smpte:ul:060e2b34.01010102.06010107.0a000000",
	"13":   "urn:smpte:ul:060e2b34.01010102.03010203.0b000000",
	"14":   "urn:smpte:ul:060e2b34.01010102.06010107.0b000000",
	"15":   "urn:smpte:ul:060e2b34.01010102.03010203.04000000",
	"16":   "urn:smpte:ul:060e2b34.01010102.03010203.05000000",
	"17":   "urn:smpte:ul:060e2b34.01010102.06010107.0c000000",
	"18":   "urn:smpte:ul:060e2b34.01010102.03010203.03000000",
	"19":   "urn:smpte:ul:060e2b34.01010102.06010107.0d000000",
	"1a":   "urn:smpte:ul:060e2b34.01010102.06010107.0e000000",
	"1b":   "urn:smpte:ul:060e2b34.01010102.06010107.0f000000",
	"1c":   "urn:smpte:ul:060e2b34.01010102.06010107.11000000",
	"1d":   "urn:smpte:ul:060e2b34.01010102.03010203.06000000",
	"1e":   "urn:smpte:ul:060e2b34.01010102.06010107.12000000",
	"1f":   "urn:smpte:ul:060e2b34.01010102.03010203.07000000",
	"20":   "urn:smpte:ul:060e2b34.01010102.03010203.08000000",
	"05":   "urn:smpte:ul:060e2b34.01010102.06010107.13000000",
	"06":   "urn:smpte:ul:060e2b34.01010102.03020401.02010000",
	"07":   "urn:smpte:ul:060e2b34.01010102.06010107.14010000",
	"03":   "urn:smpte:ul:060e2b34.01010102.06010107.07000000",
	"04":   "urn:smpte:ul:060e2b34.01010102.06010107.08000000",
	"24":   "urn:smpte:ul:060e2b34.0101010d.06010107.1b000000",
	"25":   "urn:smpte:ul:060e2b34.0101010d.06010107.1c000000",
	"26":   "urn:smpte:ul:060e2b34.0101010d.06010107.1d000000",
	"27":   "urn:smpte:ul:060e2b34.0101010d.06010107.1e000000",
	"28":   "urn:smpte:ul:060e2b34.0101010d.06010107.1f000000",
	"29":   "urn:smpte:ul:060e2b34.0101010d.06010107.20000000",
	"2a":   "urn:smpte:ul:060e2b34.0101010d.06010107.21000000",
	"01":   "urn:smpte:ul:060e2b34.0101010a.06010107.16000000",
	"02":   "urn:smpte:ul:060e2b34.0101010a.06010107.17000000",
	"21":   "urn:smpte:ul:060e2b34.0101010a.06010107.18000000",
	"22":   "urn:smpte:ul:060e2b34.0101010a.06010107.19000000",
	"23":   "urn:smpte:ul:060e2b34.0101010d.06010107.1a000000",
	"3f0b": "urn:smpte:ul:060e2b34.01010105.05300406.00000000",
	"3f0c": "urn:smpte:ul:060e2b34.01010105.07020103.010a0000",
	"3f0d": "urn:smpte:ul:060e2b34.01010105.07020201.01020000",
	"3f05": "urn:smpte:ul:060e2b34.01010104.04060201.00000000",
	"3f08": "urn:smpte:ul:060e2b34.01010104.04040401.01000000",
	"3f0e": "urn:smpte:ul:060e2b34.01010105.04040401.07000000",
	"3f09": "urn:smpte:ul:060e2b34.01010105.04040401.06000000",
	"3f0a": "urn:smpte:ul:060e2b34.01010105.04040402.05000000",
	"3f0f": "urn:smpte:ul:060e2b34.0101010a.04060204.00000000",
	"3f10": "urn:smpte:ul:060e2b34.0101010a.04060205.00000000",
	"3f11": "urn:smpte:ul:060e2b34.0101010e.04040501.00000000",
	"3f12": "urn:smpte:ul:060e2b34.0101010e.04060206.00000000",
	"3f13": "urn:smpte:ul:060e2b34.0101010e.04040502.00000000",
}
